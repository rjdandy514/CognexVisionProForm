<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cognex.Vision.Core.Net</name>
    </assembly>
    <members>
        <member name="T:Cognex.Vision.ShareableBase">
            <summary>
            <para>This is the base class for shareable OMX classes. This class provides the ability of a class to supply a shared pointer to itself, and adds support for the IObject interface. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ShareableBase.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ShareableBase.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.ShareableBase.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ShareableBase.op_Equality(Cognex.Vision.ShareableBase,Cognex.Vision.ShareableBase)">
            <summary>Compares the equality of two ShareableBase objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ShareableBase.op_Inequality(Cognex.Vision.ShareableBase,Cognex.Vision.ShareableBase)">
            <summary>Compares the inequality of two ShareableBase objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.IChangedEvent">
            <summary>
            <para>This interface contains the ChangedEvent and methods for suspending and resuming it. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IChangedEvent.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IChangedEvent.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IChangedEvent.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IChangedEvent.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.ChangedEventShareableBase">
            <summary>
            <para>This is the base class for OMX classes that are both shareable and changeable. It extends the <see cref="T:Cognex.Vision.ShareableBase">ShareableBase</see> class by adding the <see cref="T:Cognex.Vision.IChangedEvent">IChangedEvent</see> interface. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ChangedEventShareableBase.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ChangedEventShareableBase.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ChangedEventShareableBase.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ChangedEventShareableBase.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ChangedEventShareableBase.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.ChangedEventShareableBase.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ChangedEventShareableBase.op_Equality(Cognex.Vision.ChangedEventShareableBase,Cognex.Vision.ChangedEventShareableBase)">
            <summary>Compares the equality of two ChangedEventShareableBase objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ChangedEventShareableBase.op_Inequality(Cognex.Vision.ChangedEventShareableBase,Cognex.Vision.ChangedEventShareableBase)">
            <summary>Compares the inequality of two ChangedEventShareableBase objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.StringCollection">
            <summary>
            <para>Class which holds a collection of strings. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.StringCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.StringCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.StringCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.StringCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.StringCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.StringCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.StringCollection.Add(System.String)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.StringCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.StringCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.StringCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.StringCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.StringCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.StringCollection.Contains(System.String)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.StringCollection.IndexOf(System.String)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.StringCollection.Insert(System.Int32,System.String)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.StringCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.StringCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.StringCollection.setItem(System.Int32,System.String)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.StringCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.StringCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.StringCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.StringCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.StringCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.StringCollection.Remove(System.String)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.StringCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.StringCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.StringCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.StringCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.StringCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.StringCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.StringCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.StringCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.StringCollection.op_Equality(Cognex.Vision.StringCollection,Cognex.Vision.StringCollection)">
            <summary>Compares the equality of two StringCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.StringCollection.op_Inequality(Cognex.Vision.StringCollection,Cognex.Vision.StringCollection)">
            <summary>Compares the inequality of two StringCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.StringCollection.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.VariantCollection">
            <summary>
            <para>Class which holds a collection of Variants. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.VariantCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.VariantCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.VariantCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.VariantCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.VariantCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.VariantCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.VariantCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.VariantCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.VariantCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.VariantCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.VariantCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.VariantCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.VariantCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.VariantCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.VariantCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.Add(System.Object)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.VariantCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.VariantCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.VariantCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.VariantCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.Contains(System.Object)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.IndexOf(System.Object)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.Insert(System.Int32,System.Object)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.VariantCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.VariantCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.setItem(System.Int32,System.Object)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.VariantCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.VariantCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.VariantCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.VariantCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.Remove(System.Object)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.VariantCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.VariantCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.VariantCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.VariantCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.op_Equality(Cognex.Vision.VariantCollection,Cognex.Vision.VariantCollection)">
            <summary>Compares the equality of two VariantCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.op_Inequality(Cognex.Vision.VariantCollection,Cognex.Vision.VariantCollection)">
            <summary>Compares the inequality of two VariantCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.VariantCollection.AddRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.EventArgs">
            <summary>
            <para>A base class for event args. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.EventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.EventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.EventArgs.op_Equality(Cognex.Vision.EventArgs,Cognex.Vision.EventArgs)">
            <summary>Compares the equality of two EventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.EventArgs.op_Inequality(Cognex.Vision.EventArgs,Cognex.Vision.EventArgs)">
            <summary>Compares the inequality of two EventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.ChangedEventArgs">
            <summary>
            <para>Arguments of a <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ChangedEventArgs.#ctor(System.Int64)">
            <summary>
            <para>Construct an instance of this class with the provided argument. </para>
            </summary>
            <param name="stateFlags">The state flags to be associated with the <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see>. </param>
        </member>
        <member name="P:Cognex.Vision.ChangedEventArgs.StateFlags">
            <summary>
            <para>The state flags associated with the <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ChangedEventArgs.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ChangedEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.ChangedEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ChangedEventArgs.op_Equality(Cognex.Vision.ChangedEventArgs,Cognex.Vision.ChangedEventArgs)">
            <summary>Compares the equality of two ChangedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ChangedEventArgs.op_Inequality(Cognex.Vision.ChangedEventArgs,Cognex.Vision.ChangedEventArgs)">
            <summary>Compares the inequality of two ChangedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.CancelEventArgs">
            <summary>
            <para>This class provides a boolean argument to control the optional cancellation of an action during event processing. Unlike most event argument classes which simply deliver information to the subscriber, this argument class allows two-way communication. Specifically, a recipient of an event notification with an instance of this argument class may optionally set the <see cref="P:Cognex.Vision.CancelEventArgs.Cancel">Cancel</see> property to true, thereby communicating to the source of the event that the action should be cancelled. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CancelEventArgs.#ctor">
            <summary>
            <para>Construct an instance of this class with the value of <see cref="P:Cognex.Vision.CancelEventArgs.Cancel">Cancel</see> set by default to false. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.CancelEventArgs.#ctor(System.Boolean)">
            <summary>
            <para>Construct an instance of this class and set the <see cref="P:Cognex.Vision.CancelEventArgs.Cancel">Cancel</see> property to the supplied value. </para>
            </summary>
            <param name="cancel">The value to which <see cref="P:Cognex.Vision.CancelEventArgs.Cancel">Cancel</see> will be set. </param>
        </member>
        <member name="P:Cognex.Vision.CancelEventArgs.Cancel">
            <summary>
            <b>Get</b>
            <para>Get the value of the Cancel property. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Set the value of the Cancel property. When an event subscriber sets this property to true, the event source will interpret that to mean that the current action should be cancelled. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CancelEventArgs.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CancelEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.CancelEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CancelEventArgs.op_Equality(Cognex.Vision.CancelEventArgs,Cognex.Vision.CancelEventArgs)">
            <summary>Compares the equality of two CancelEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CancelEventArgs.op_Inequality(Cognex.Vision.CancelEventArgs,Cognex.Vision.CancelEventArgs)">
            <summary>Compares the inequality of two CancelEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.CancelChangingStringEventArgs">
            <summary>
            <para>This class provides arguments for a cancellable change to a string. These arguments include a copy of the old string value as well as a copy of the new string value. In addition, these arguments include a reference to an optional exception to be thrown should cancellation be activated. Cancellation is activated when the base class <see cref="P:Cognex.Vision.CancelEventArgs.Cancel">Cancel</see> property is set to true. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CancelChangingStringEventArgs.#ctor(System.String,System.String)">
            <summary>
            <para>Construct an instance of this class with the specified values for the old and new strings. </para>
            </summary>
            <param name="oldValue">The value of the subject string as it exists now. </param>
            <param name="newValue">The value that will be assigned to the string after the event is processed without cancellation. </param>
        </member>
        <member name="P:Cognex.Vision.CancelChangingStringEventArgs.ExceptionToThrow">
            <summary>
            <b>Get</b>
            <para>Get the exception that is to be thrown should the action be cancelled. This may be null. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Set the exception that is to be thrown should the action be cancelled. This may be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CancelChangingStringEventArgs.NewValue">
            <summary>
            <para>Get the new string value that will be assigned unless the action is cancelled. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CancelChangingStringEventArgs.OldValue">
            <summary>
            <para>Get the old string value that was in effect when the event was raised. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CancelChangingStringEventArgs.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CancelChangingStringEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.CancelChangingStringEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CancelChangingStringEventArgs.op_Equality(Cognex.Vision.CancelChangingStringEventArgs,Cognex.Vision.CancelChangingStringEventArgs)">
            <summary>Compares the equality of two CancelChangingStringEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CancelChangingStringEventArgs.op_Inequality(Cognex.Vision.CancelChangingStringEventArgs,Cognex.Vision.CancelChangingStringEventArgs)">
            <summary>Compares the inequality of two CancelChangingStringEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.VisionException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.VisionException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.VisionException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VisionException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.VisionException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.VisionException.op_Equality(Cognex.Vision.VisionException,Cognex.Vision.VisionException)">
            <summary>Compares the equality of two VisionException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.VisionException.op_Inequality(Cognex.Vision.VisionException,Cognex.Vision.VisionException)">
            <summary>Compares the inequality of two VisionException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.ITool">
            <summary>
            <para>This interface is implemented by all Vision tools. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ITool.Ran">
            <summary>
            <para>Event that is raised at the end of the tool's <see cref="M:Cognex.Vision.ITool.Run">Run</see> method. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ITool.Running">
            <summary>
            <para>Event that is raised at the start of the tool's <see cref="M:Cognex.Vision.ITool.Run">Run</see> method. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ITool.Inputs">
            <summary>
            <para>A collection of named Input Pin values. </para>
            </summary>
            <remarks>
            <para>Add or remove ToolPins to the Inputs collection to control which Tool properties are exposed as Inputs in the GUI (for linking). </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ITool.Outputs">
            <summary>
            <para>A collection of named Output Pin values. </para>
            </summary>
            <remarks>
            <para>Add or remove ToolPins to the Outputs collection to control which Tool properties are exposed as Outputs in the GUI (for linking). </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ITool.RunStatus">
            <summary>
            <para>Gets general information about the last call to the tool's <see cref="M:Cognex.Vision.ITool.Run">Run</see> method. Note that serious errors that occur within the tool's <see cref="M:Cognex.Vision.ITool.Run">Run</see> method may only be detected by examining the <see cref="P:Cognex.Vision.ITool.RunStatus">RunStatus</see> after calling <see cref="M:Cognex.Vision.ITool.Run">Run</see>. It is the user's responsibility to examine the tool's <see cref="P:Cognex.Vision.ITool.RunStatus">RunStatus</see> after calling <see cref="M:Cognex.Vision.ITool.Run">Run</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ITool.Enabled">
            <summary>
            <b>Get</b>
            <para>Whether the tool is enabled to run. If false, calling the tool's <see cref="M:Cognex.Vision.ITool.Run">Run</see> function will not actually run the tool and will cause no change in the tool's state. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Set the <see cref="P:Cognex.Vision.ITool.Enabled">Enabled</see> property. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>SfEnabled</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ITool.CreateCurrentRecord">
            <summary>
            <para>Creates a new set of records that represents the tool's current state. </para>
            </summary>
            <returns>
            <para>IRecord instance containing a set of records representing the tool's current state. The records created are specified by the CurrentRecordEnable property. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.ITool.CreateLastRunRecord">
            <summary>
            <para>Creates a new set of records that represents the tool's last-run state. </para>
            </summary>
            <returns>
            <para>IRecord instance containing a set of records representing the tool's last-run state. The records created are specified by the LastRunRecordEnable and LastRunRecordDiagEnable properties. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.ITool.Run">
            <summary>
            <para>Runs the tool. This method is guaranteed to not throw an exception. Any exception generated in the course of running the tool will be caught and a string representation of that exception will be packaged in the <see cref="P:Cognex.Vision.IRunStatus.Message">Message</see> property of the tool's <see cref="P:Cognex.Vision.ITool.RunStatus">RunStatus</see>. Should this occur, the <see cref="P:Cognex.Vision.IRunStatus.Result">Result</see> property of the tool's <see cref="P:Cognex.Vision.ITool.RunStatus">RunStatus</see> will be set to <see cref="F:Cognex.Vision.ToolResultConstants.Error">Error</see>. It is the user's responsibility to examine the tool's <see cref="P:Cognex.Vision.ITool.RunStatus">RunStatus</see> after calling <see cref="M:Cognex.Vision.ITool.Run">Run</see>. </para>
            </summary>
            <remarks>
            <para>
            <list type="bullet">
            <item>
            <description>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the state of this tool changes.</description>
            </item>
            <item>
            <description>
            <see cref="E:Cognex.Vision.ITool.Running">Running</see> Raised at the start of the <see cref="M:Cognex.Vision.ITool.Run">Run</see> method.</description>
            </item>
            <item>
            <description>
            <see cref="E:Cognex.Vision.ITool.Ran">Ran</see> Raised at the end of the <see cref="M:Cognex.Vision.ITool.Run">Run</see> method.</description>
            </item>
            </list>
            </para>
            <code>
            Imports Cognex.Vision
            Private Function RunTool() As Boolean
              mTool.Run() ' a previously created and configured tool...
              Dim aRunStatus As Cognex.Vision.IRunStatus = mTool.RunStatus
              If (aRunStatus.Result = ToolResultConstants.Error) Then
                If (Not aRunStatus.Message Is Nothing) Then
                  MessageBox.Show(aRunStatus.Message)
                End If
                RunTool = False
              Else
                RunTool = True
              End If
            End Function
            </code>
            <code>
            using Cognex.Vision;
            private Boolean RunTool()
            {
              mTool.Run(); // a previously created and configured tool
              <see cref="T:Cognex.Vision.IRunStatus">IRunStatus</see> aRunStatus = mTool.RunStatus;
              if (aRunStatus.<see cref="P:Cognex.Vision.IRunStatus.Result">Result</see> == <see cref="T:Cognex.Vision.ToolResultConstants">ToolResultConstants</see>.Error)
              {
                if (aRunStatus.<see cref="P:Cognex.Vision.IRunStatus.Message">Message</see> != null)
                {
                  MessageBox.Show(aRunStatus.<see cref="P:Cognex.Vision.IRunStatus.Message">Message</see>);
                }
                return false;
              }
              else
              {
                return true;
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ITool.CheckRunConditionsSelf">
            <summary>
            <para>Performs RunCondition check by the tool itself. </para>
            </summary>
            <remarks>
            <para>The tool can check if it meets the condition to be run by itself. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ITool.IsCheckRunConditionsDelegateToOwner">
            <summary>
            <para>Check if tool checks its RunCondition by its owner. </para>
            </summary>
            <remarks>
            <para>The tool can delegate its RunCondition check to a owner like a container having the capacity to check the condition for its <see cref="T:Cognex.Vision.ITool">ITool</see>. </para>
            </remarks>
            <returns>
            <para>bool True if check is delegated by owner, False otherwise. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.ITool.CopyBase(Cognex.Vision.ToolCopyModeConstants)">
            <summary>
            <para>Create a copy of this tool. </para>
            </summary>
            <param name="copyMode">The desired mode in which to copy this tool. </param>
            <returns>
            <para>A copy of this tool. </para>
            </returns>
        </member>
        <member name="T:Cognex.Vision.IRunStatus">
            <summary>
            <para>This interface is returned by the RunStatus property of the <see cref="T:Cognex.Vision.ITool">ITool</see> interface and provides general information about the last call to the tool's Run method. Note that serious errors that occur within the tool's Run method may only be detected by examining the RunStatus after calling Run. It is the user's responsibility to examine the tool's RunStatus after calling Run. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IRunStatus.Message">
            <summary>
            <para>Returns an empty string if the result was Accept, and otherwise returns a string that provides additional information about the Warning, Reject, or Error condition. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IRunStatus.ProcessingTime">
            <summary>
            <para>Returns the time in milliseconds taken to perform the tool's processing when its Run function was called. This excludes the time taken by event handlers connected to the tool. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IRunStatus.Result">
            <summary>
            <para>Gets a result code that indicates the overall result of running the tool. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IRunStatus.TotalTime">
            <summary>
            <para>Returns the total time in milliseconds taken by the tool's Run function. This includes the time taken by event handlers connected to the tool. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.Record">
            <summary>
            <para>Class that holds information about the state of a tool. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Record.#ctor">
            <summary>
            <para>Constructs a new instance of the <see cref="T:Cognex.Vision.Record">Record</see> class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Record.#ctor(System.String,System.Type,Cognex.Vision.RecordUsageConstants,System.Boolean,System.Object,System.String)">
            <summary>
            <para>Constructs a new instance of the <see cref="T:Cognex.Vision.Record">Record</see> class. </para>
            </summary>
            <param name="recordKey">Key used to identify the CogRecord. </param>
            <param name="contentType">Format of record content. </param>
            <param name="recordUsage">How the record is used. </param>
            <param name="contentMutable">If true, record content can be modified. </param>
            <param name="content">
            <see cref="T:Cognex.Vision.Record">Record</see> data. </param>
            <param name="annotation">Description of the record. </param>
        </member>
        <member name="M:Cognex.Vision.Record.#ctor(System.String,System.Type,Cognex.Vision.RecordUsageConstants,System.Boolean,System.Object,System.String,Cognex.Vision.IRecordConstructor,System.Int32)">
            <summary>
            <para>Constructs a new instance of the <see cref="T:Cognex.Vision.Record">Record</see> class. </para>
            </summary>
            <param name="recordKey">Key used to identify the CogRecord. </param>
            <param name="contentType">Format of record content. </param>
            <param name="recordUsage">How the record is used. </param>
            <param name="contentMutable">If true, record content can be modified. </param>
            <param name="content">
            <see cref="T:Cognex.Vision.Record">Record</see> data. </param>
            <param name="annotation">Description of the record. </param>
            <param name="constructor">Interface to method for constructing content (including subrecords' content) and annotation. </param>
            <param name="flags">Passed to supplied ICogRecordConstructor methods when called. </param>
        </member>
        <member name="E:Cognex.Vision.Record.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Record.Annotation">
            <summary>
            <b>Get</b>
            <para>Description of the record. </para>
            </summary>
            <returns>
            <para>A string describing or annotating the record. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Record.Annotation">Annotation</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Record.Content">
            <summary>
            <b>Get</b>
            <para>Gets or sets the record's content. </para>
            </summary>
            <returns>
            <para>The record's content. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Record.Content">Content</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Record.ContentMutable">
            <summary>
            <b>Get</b>
            <para>Gets or sets the flag indicating whether or not the record's content can be modified. </para>
            </summary>
            <returns>
            <para>A boolean which indicates whether or not the record's content can be modified. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Record.ContentMutable">ContentMutable</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Record.ContentType">
            <summary>
            <b>Get</b>
            <para>Gets or sets the format of record content. </para>
            </summary>
            <returns>
            <para>The type of record content. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Record.ContentType">ContentType</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Record.RecordKey">
            <summary>
            <b>Get</b>
            <para>Gets or sets the key used to identify the record. </para>
            </summary>
            <returns>
            <para>The string key used to identify the record. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Record.RecordKey">RecordKey</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Record.RecordUsage">
            <summary>
            <b>Get</b>
            <para>Gets or sets an indicator of the record's usage. </para>
            </summary>
            <returns>
            <para>An enumeration describing the context in which the record is used. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Record.RecordUsage">RecordUsage</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Record.SubRecords">
            <summary>
            <para>Gets the sub-records of this record. </para>
            </summary>
            <returns>
            <para>The collection of sub-records contained within this record. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Record.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Record.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Record.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Record.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Record.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Record.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Record.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Record.op_Equality(Cognex.Vision.Record,Cognex.Vision.Record)">
            <summary>Compares the equality of two Record objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Record.op_Inequality(Cognex.Vision.Record,Cognex.Vision.Record)">
            <summary>Compares the inequality of two Record objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.IRecordConstructor">
            <summary>
            <para>Interface implemented by an object that constructs the Content, Annotation, and SubRecords of a record when they are requested. This may allow one to avoid time-consuming computations and/or the creation of memory-consuming objects when they are not needed. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IRecordConstructor.ConstructAnnotation(Cognex.Vision.Record,System.Int32)">
            <summary>
            <para>Constructs the record's Annotation. </para>
            </summary>
            <param name="record">The record being constructed. </param>
            <param name="flags">An integer that was stored when the record was created. </param>
        </member>
        <member name="M:Cognex.Vision.IRecordConstructor.ConstructContent(Cognex.Vision.Record,System.Int32)">
            <summary>
            <para>Constructs the record's Content. </para>
            </summary>
            <param name="record">The record being constructed. </param>
            <param name="flags">An integer that was stored when the record was created. </param>
        </member>
        <member name="M:Cognex.Vision.IRecordConstructor.ConstructSubRecords(Cognex.Vision.Record,System.Int32)">
            <summary>
            <para>Constructs the record's SubRecords. </para>
            </summary>
            <param name="record">The record being constructed. </param>
            <param name="flags">An integer that was stored when the record was created. </param>
        </member>
        <member name="T:Cognex.Vision.RecordCollection">
            <summary>
            <para>Class that holds a collection of <see cref="T:Cognex.Vision.Record">Record</see> objects. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.RecordCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RecordCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RecordCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RecordCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RecordCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RecordCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RecordCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RecordCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RecordCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RecordCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RecordCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RecordCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RecordCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RecordCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RecordCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.ContainsKey(System.String)">
            <summary>
            <para>Determines whether this dictionary contains the specified key. </para>
            </summary>
            <param name="key">The key to check. </param>
            <returns>
            <para>True if this dictionary contains <b>key</b>, otherwise False. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.Key(System.Int32)">
            <summary>
            <para>Get the key at the specified index. </para>
            </summary>
            <param name="index">The zero-based index to check. </param>
            <returns>
            <para>The key at the specified index. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.GetItemByKey(System.String)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>ByKey
        </member>
        <member name="M:Cognex.Vision.RecordCollection.TryGetValue(System.String,Cognex.Vision.Record@)">
            <summary>
            <para>Get the item associated with the specified key. </para>
            </summary>
            <param name="key">The key of the item to retrieve. </param>
            <param name="value">If the key is found, this will be the value associated with that key when this method returns. If the key is NOT found, this will equal the input value. </param>
            <returns>
            <para>true if this dictionary contains an element with the specified key, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.TryGetByIndex(System.Int32,System.String@,Cognex.Vision.Record@)">
            <summary>
            <para>Get the key and value associated with the specified index. </para>
            </summary>
            <param name="index">The index of the key and value to retrieve. </param>
            <param name="outKey">If the index is valid, this will be the key associated with that index when this method returns. If the index is invalid, this will equal the input key. </param>
            <param name="outValue">If the index is valid, this will be the value associated with that index when this method returns. If the index is invalid, this will equal the input value. </param>
            <returns>
            <para>true if this dictionary contains a key and value at the specified index, else false. </para>
            </returns>
            <remarks>
            <para>An index is invalid if it is less than zero or is greater than or equal to Count. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.Add(Cognex.Vision.Record)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RecordCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.RecordCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RecordCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.RecordCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.Contains(Cognex.Vision.Record)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.IndexOf(Cognex.Vision.Record)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.Insert(System.Int32,Cognex.Vision.Record)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RecordCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.RecordCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.setItem(System.Int32,Cognex.Vision.Record)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RecordCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.RecordCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RecordCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.RecordCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.Remove(Cognex.Vision.Record)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RecordCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.RecordCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RecordCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.RecordCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.IndexOfKey(System.String)">
            <summary>
            <para>Searches the list for a given key. </para>
            </summary>
            <param name="key">The key for which to search. </param>
            <returns>
            <para>The index of the record, or -1 if it is not in the list. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.op_Equality(Cognex.Vision.RecordCollection,Cognex.Vision.RecordCollection)">
            <summary>Compares the equality of two RecordCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.op_Inequality(Cognex.Vision.RecordCollection,Cognex.Vision.RecordCollection)">
            <summary>Compares the inequality of two RecordCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.CopyTo(Cognex.Vision.Record[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Record})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="M:Cognex.Vision.RecordCollection.Contains(System.Collections.Generic.KeyValuePair{System.String,Cognex.Vision.Record})">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="T:Cognex.Vision.PropertyWatcher">
            <summary>
            <para>This class watches a property or sub-property of an object, and raises a Changed event when the value of the property has changed. Can also be used to set the value of a watched property. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PropertyWatcher.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.PropertyWatcher.#ctor(System.Object,System.String)">
            <summary>
            <para>Constructs a new instance of the <see cref="T:Cognex.Vision.PropertyWatcher">PropertyWatcher</see> class with the given subject and path. </para>
            </summary>
            <param name="subject">The object instance to monitor. </param>
            <param name="path">Path to property to monitor. </param>
        </member>
        <member name="E:Cognex.Vision.PropertyWatcher.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PropertyWatcher.IsConnected">
            <summary>
            <para>Indicates if this property watcher is currently connected to a valid property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PropertyWatcher.OptimizeIneffectiveChanges">
            <summary>
            <b>Get</b>
            <para>Gets whether the property watcher will optimize out any attempts to set Value to its current value. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets whether the property watcher will optimize out any attempts to set Value to its current value. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Path property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfOptimizeIneffectiveChanges">SfOptimizeIneffectiveChanges</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.PropertyWatcher.Path">
            <summary>
            <b>Get</b>
            <para>Gets the path to the property or sub-property being watched. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets the path to the property or sub-property being watched. </para>
            </summary>
            <exception cref="T:Cognex.Vision.InvalidOperationException">
            <list type="bullet">
            <item>
            <description>If the state flag of a property cannot be found.</description>
            </item>
            <item>
            <description>A conversion from <see cref="T:Cognex.Vision.PropertyWatcher">PropertyWatcher</see> source to <see cref="T:Cognex.Vision.IChangedEvent">IChangedEvent</see> type fails. </description>
            </item>
            </list>
            </exception>
            <exception cref="T:Cognex.Vision.VisionException">
            <list type="bullet">
            <item>
            <description>Assigning a new source fails.</description>
            </item>
            <item>
            <description>If the source type or property name change and this function fails to get a new property meta. </description>
            </item>
            </list>
            </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method may change the Path, IsConnected, PropertyMeta, and Value properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfPath">SfPath</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfIsConnected">SfIsConnected</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfPropertyMeta">SfPropertyMeta</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfValue">SfValue</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.PropertyWatcher.PropertyMeta">
            <summary>
            <para>Gets a PropertyMeta instance for the property being watched by this <see cref="T:Cognex.Vision.PropertyWatcher">PropertyWatcher</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PropertyWatcher.Subject">
            <summary>
            <b>Get</b>
            <para>Gets the object whose property or sub-property is being watched. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets the object whose property or sub-property is being watched. </para>
            </summary>
            <exception cref="T:Cognex.Vision.InvalidOperationException">If the state flag of a property cannot be found OR a conversion from <see cref="T:Cognex.Vision.PropertyWatcher">PropertyWatcher</see> source to <see cref="T:Cognex.Vision.IChangedEvent">IChangedEvent </see> type fails. </exception>
            <exception cref="T:Cognex.Vision.VisionException">If the source type or property name change and this function fails to get a new property meta. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method may change the Subject, IsConnected, PropertyMeta, and Value properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfSubject">SfSubject</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfIsConnected">SfIsConnected</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfPropertyMeta">SfPropertyMeta</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfValue">SfValue</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.PropertyWatcher.Value">
            <summary>
            <b>Get</b>
            <para>Gets the value of the watched property. </para>
            </summary>
            <exception cref="T:Cognex.Vision.InvalidOperationException">
            <list type="bullet">
            <item>
            <description>If a property value cannot be accessed because no Path was supplied.</description>
            </item>
            <item>
            <description>If a property value cannot be accessed because no Subject was supplied.</description>
            </item>
            <item>
            <description>If source cannot be accessed because the source path is null.</description>
            </item>
            <item>
            <description>If a property meta cannot be accessed because the property name is invalid.</description>
            </item>
            </list>
            </exception>
            <exception cref="T:Cognex.Vision.CompositeException">If there is a cached source exception.</exception>
            <remarks>
            <para>This getter checks that the property watcher is in a valid state, and throws an exception if not valid. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets the value of the watched property. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method may change the Value property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfValue">SfValue</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.InvalidOperationException">
            <list type="bullet">
            <item>
            <description>If a property value cannot be accessed because no Path was supplied.</description>
            </item>
            <item>
            <description>If a property value cannot be accessed because no Subject was supplied.</description>
            </item>
            <item>
            <description>If source cannot be accessed because the source path is null.</description>
            </item>
            <item>
            <description>If a property meta cannot be accessed because the property name is invalid.</description>
            </item>
            </list>
            </exception>
            <exception cref="T:Cognex.Vision.CompositeException">If there is a cached source exception. </exception>
            <remarks>
            <para>This setter checks that the property watcher is in a valid state, and throws an exception if not valid. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.PropertyWatcher.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PropertyWatcher.Attach(System.Object,System.String)">
            <summary>
            <para>Attaches to a new subject and path. </para>
            </summary>
            <param name="subject">The object instance to monitor. </param>
            <param name="path">Path to property to monitor. </param>
            <exception cref="T:Cognex.Vision.InvalidOperationException">
            <list type="bullet">
            <item>
            <description>If the state flag of a property cannot be found.</description>
            </item>
            <item>
            <description>A conversion from <see cref="T:Cognex.Vision.PropertyWatcher">PropertyWatcher</see> source to <see cref="T:Cognex.Vision.IChangedEvent">IChangedEvent</see> type fails. </description>
            </item>
            </list>
            </exception>
            <exception cref="T:Cognex.Vision.VisionException">
            <list type="bullet">
            <item>
            <description>Assigning a new source fails.</description>
            </item>
            <item>
            <description>If the source type or property name change and this function fails to get a new property meta. </description>
            </item>
            </list>
            </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method may change the Path, Subject, IsConnected, PropertyMeta, and Value properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfPath">SfPath</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfSubject">SfSubject</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfIsConnected">SfIsConnected</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfPropertyMeta">SfPropertyMeta</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.PropertyWatcher.SfValue">SfValue</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PropertyWatcher.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PropertyWatcher.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PropertyWatcher.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PropertyWatcher.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PropertyWatcher.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.PropertyWatcher.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.PropertyWatcher.op_Equality(Cognex.Vision.PropertyWatcher,Cognex.Vision.PropertyWatcher)">
            <summary>Compares the equality of two PropertyWatcher objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.PropertyWatcher.op_Inequality(Cognex.Vision.PropertyWatcher,Cognex.Vision.PropertyWatcher)">
            <summary>Compares the inequality of two PropertyWatcher objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.IDiamondGraphicShape">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IDiamondGraphicShape.SelectedSpaceName">
            <summary>
            <b>Get</b>
            </summary>
            <summary>
            <b>Set</b>
            </summary>
        </member>
        <member name="T:Cognex.Vision.IGraphic">
            <summary>
            <para>Interface to make an object renderable in a CognexDisplay control. </para>
            </summary>
            <remarks>
            <para>Interface to make an object renderable in a CognexDisplay control. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IGraphic.Color">
            <summary>
            <b>Get</b>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets Color. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfColor">SfColor</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IGraphic.FillColor">
            <summary>
            <b>Get</b>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.FillColor">FillColor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfFillColor">SfFillColor</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IGraphic.LineStyle">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.LineStyle">LineStyle</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfLineStyle">SfLineStyle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IGraphic.LineWidthInScreenPixels">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.LineWidthInScreenPixels">LineWidthInScreenPixels</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedLineWidthInScreenPixels">SfSelectedLineWidthInScreenPixels</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is &lt; 1. </exception>
        </member>
        <member name="P:Cognex.Vision.IGraphic.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IGraphic.Visible">
            <summary>
            <b>Get</b>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.Visible">Visible</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfVisible">SfVisible</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IGraphic.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="T:Cognex.Vision.IGraphicInteractive">
            <summary>
            <para>Interface of an interactive graphic. </para>
            </summary>
            <remarks>
            <para>Interface of an interactive graphic. </para>
            </remarks>
        </member>
        <member name="E:Cognex.Vision.IGraphicInteractive.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IGraphicInteractive.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IGraphicInteractive.DragColor">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphicInteractive.DragColor">DragColor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfDragColor">SfDragColor</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IGraphicInteractive.DragLineStyle">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphicInteractive.DragLineStyle">DragLineStyle</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfDragLineStyle">SfDragLineStyle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IGraphicInteractive.DragLineWidthInScreenPixels">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphicInteractive.DragLineWidthInScreenPixels">DragLineWidthInScreenPixels</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfDragLineWidthInScreenPixels">SfDragLineWidthInScreenPixels</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is &lt; 1. </exception>
        </member>
        <member name="P:Cognex.Vision.IGraphicInteractive.GraphicDOFEnableBase">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphicInteractive.GraphicDOFEnableBase">GraphicDOFEnableBase</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfGraphicDOFEnableBase">SfGraphicDOFEnableBase</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IGraphicInteractive.Interactive">
            <summary>
            <b>Get</b>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.IGraphicInteractive.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphicInteractive.Interactive">Interactive</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfInteractive">SfInteractive</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IGraphicInteractive.MouseCursor">
            <summary>
            <b>Get</b>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphicInteractive.MouseCursor">MouseCursor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfMouseCursor">SfMouseCursor</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IGraphicInteractive.Selected">
            <summary>
            <b>Get</b>
            <para>True when the shape is selected in a display. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphicInteractive.Selected">Selected</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelected">SfSelected</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IGraphicInteractive.SelectedColor">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphicInteractive.SelectedColor">SelectedColor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedColor">SfSelectedColor</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IGraphicInteractive.SelectedLineStyle">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphicInteractive.SelectedLineStyle">SelectedLineStyle</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedLineStyle">SfSelectedLineStyle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IGraphicInteractive.SelectedLineWidthInScreenPixels">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphicInteractive.SelectedLineWidthInScreenPixels">SelectedLineWidthInScreenPixels</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedLineWidthInScreenPixels">SfSelectedLineWidthInScreenPixels</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is &lt; 1. </exception>
        </member>
        <member name="P:Cognex.Vision.IGraphicInteractive.TipText">
            <summary>
            <b>Get</b>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphicInteractive.TipText">TipText</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfTipText">SfTipText</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:Cognex.Vision.DraggingEventArgs">
            <summary>
            <para>This class provides data for the Dragging and DraggingStopped events of graphic shapes. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DraggingEventArgs.#ctor(Cognex.Vision.IGraphicInteractive)">
            <summary>
            <para>Constructor for these <see cref="T:Cognex.Vision.EventArgs">EventArgs</see>. You typically will not need to use this method. </para>
            </summary>
            <param name="dragGraphic">A reference to the graphic that is being dragged. </param>
        </member>
        <member name="P:Cognex.Vision.DraggingEventArgs.DragGraphic">
            <summary>
            <para>The graphic, as moved to the current drag location. Your handler is permitted to modify this graphic. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DraggingEventArgs.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DraggingEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.DraggingEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.DraggingEventArgs.op_Equality(Cognex.Vision.DraggingEventArgs,Cognex.Vision.DraggingEventArgs)">
            <summary>Compares the equality of two DraggingEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.DraggingEventArgs.op_Inequality(Cognex.Vision.DraggingEventArgs,Cognex.Vision.DraggingEventArgs)">
            <summary>Compares the inequality of two DraggingEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.IGraphicParentChild">
            <summary>
            <para>Interface implemented by any graphic that can be a parent and/or child. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IGraphicParentChild.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IGraphicParentChild.Parent">
            <summary>
            <b>Get</b>
            <para>Parent of this graphic. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphicParentChild.Parent">Parent</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IGraphicParentChild.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.GraphicChildren">
            <summary>
            <para>Collection of child graphics. </para>
            </summary>
            <remarks>
            <para>Class representing a collection of child graphics. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.#ctor(Cognex.Vision.IGraphicParentChild)">
            <summary>
            <para>Constructs a new instance of this class using an existing <see cref="T:Cognex.Vision.IGraphicParentChild">parent-child graphic</see>. </para>
            </summary>
            <param name="parent">The existing <see cref="T:Cognex.Vision.IGraphicParentChild">parent-child graphic</see>. </param>
        </member>
        <member name="E:Cognex.Vision.GraphicChildren.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicChildren.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicChildren.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicChildren.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicChildren.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicChildren.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicChildren.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicChildren.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicChildren.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicChildren.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicChildren.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicChildren.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicChildren.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicChildren.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.ContainsKey(System.String)">
            <summary>
            <para>Determines whether this dictionary contains the specified key. </para>
            </summary>
            <param name="key">The key to check. </param>
            <returns>
            <para>True if this dictionary contains <b>key</b>, otherwise False. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.Key(System.Int32)">
            <summary>
            <para>Get the key at the specified index. </para>
            </summary>
            <param name="index">The zero-based index to check. </param>
            <returns>
            <para>The key at the specified index. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.GetItemByKey(System.String)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>ByKey
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.TryGetValue(System.String,Cognex.Vision.IGraphicParentChild@)">
            <summary>
            <para>Get the item associated with the specified key. </para>
            </summary>
            <param name="key">The key of the item to retrieve. </param>
            <param name="value">If the key is found, this will be the value associated with that key when this method returns. If the key is NOT found, this will equal the input value. </param>
            <returns>
            <para>true if this dictionary contains an element with the specified key, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.TryGetByIndex(System.Int32,System.String@,Cognex.Vision.IGraphicParentChild@)">
            <summary>
            <para>Get the key and value associated with the specified index. </para>
            </summary>
            <param name="index">The index of the key and value to retrieve. </param>
            <param name="outKey">If the index is valid, this will be the key associated with that index when this method returns. If the index is invalid, this will equal the input key. </param>
            <param name="outValue">If the index is valid, this will be the value associated with that index when this method returns. If the index is invalid, this will equal the input value. </param>
            <returns>
            <para>true if this dictionary contains a key and value at the specified index, else false. </para>
            </returns>
            <remarks>
            <para>An index is invalid if it is less than zero or is greater than or equal to Count. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.Add(Cognex.Vision.IGraphicParentChild)">
            <summary>
            <para>Adds the given item to the end of this collection, with the specified key. </para>
            </summary>
            <param name="value">The item to be added. </param>
            <param name="key">The key of the added item. </param>
            <param name="Cognex.Vision.CollectionDuplicateKeyException.Vision.CollectionDuplicateKeyException">If <b>key</b> is not unique or empty. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicChildren.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.GraphicChildren.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicChildren.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.GraphicChildren.Cleared">Cleared</see> Raises after the collection is cleared. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.Contains(Cognex.Vision.IGraphicParentChild)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.IndexOf(Cognex.Vision.IGraphicParentChild)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.Insert(System.Int32,Cognex.Vision.IGraphicParentChild)">
            <summary>
            <para>Inserts the given item at the specified index, with the specified key. </para>
            </summary>
            <param name="index">The index at which to insert the item. </param>
            <param name="value">The item to be inserted. </param>
            <param name="key">The key of the inserted item. </param>
            <param name="Cognex.Vision.CollectionDuplicateKeyException.Vision.CollectionDuplicateKeyException">If <b>key</b> is not unique or empty. </param>
            <param name="Cognex.Vision.CollectionInvalidIndexException.Vision.CollectionInvalidIndexException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicChildren.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.GraphicChildren.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.setItem(System.Int32,Cognex.Vision.IGraphicParentChild)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicChildren.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.GraphicChildren.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicChildren.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.GraphicChildren.MovedItem">MovedItem</see> Raises after the item is moved. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.Remove(Cognex.Vision.IGraphicParentChild)">
            <summary>
            <para>Remove the item with the specified key from this dictionary. </para>
            </summary>
            <param name="key">The key of the item to remove from this dictionary. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicChildren.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.GraphicChildren.RemovedItem">RemovedItem</see> Raises after the item is removed. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicChildren.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.GraphicChildren.RemovedItem">RemovedItem</see> Raises after the item is removed. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.Add(Cognex.Vision.IGraphicParentChild,System.String)">
            <summary>
            <para>Inserts the given item at the specified index, with the specified key. </para>
            </summary>
            <param name="index">The index at which to insert the item. </param>
            <param name="value">The item to be inserted. </param>
            <param name="key">The key of the inserted item. </param>
            <param name="Cognex.Vision.CollectionDuplicateKeyException.Vision.CollectionDuplicateKeyException">If <b>key</b> is not unique or empty. </param>
            <param name="Cognex.Vision.CollectionInvalidIndexException.Vision.CollectionInvalidIndexException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicChildren.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.GraphicChildren.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.Insert(System.Int32,Cognex.Vision.IGraphicParentChild,System.String)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicChildren.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.GraphicChildren.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.setItem(System.String,Cognex.Vision.IGraphicParentChild)">
            <summary>
            <para>Replace the element with the specified key. If the key is not a member of this dictionary, insert the key/value pair. </para>
            </summary>
            <param name="key">The key of the item to replace. </param>
            <param name="value">The object that will replace the item at the specified key. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicChildren.ReplacingItem">ReplacingItem</see> If <b>key</b> exists, raises before the item is replaced. <see cref="E:Cognex.Vision.GraphicChildren.ReplacedItem">ReplacedItem</see> If <b>key</b> exists, raises after the item is replaced. <see cref="E:Cognex.Vision.GraphicChildren.InsertingItem">InsertingItem</see> If <b>key</b> does NOT exist, raises before the item is inserted. <see cref="E:Cognex.Vision.GraphicChildren.InsertedItem">InsertedItem</see> If <b>key</b> does NOT exist, raises after the item is inserted. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.SetKey(System.Int32,System.String)">
            <summary>
            <para>Sets the key of the item at the specified index. </para>
            </summary>
            <param name="index">The index of the item whose key will be set. </param>
            <param name="key">The key to set. </param>
            <remarks>
            <para>The supplied key must be unique, except if it is an empty string. Multiple empty-string-keyed entries are allowed. </para>
            </remarks>
            <param name="Cognex.Vision.CollectionDuplicateKeyException.Vision.CollectionDuplicateKeyException">If <b>key</b> is not unique or empty. </param>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.IndexOfKey(System.String)">
            <summary>
            <para>Gets the index of the item with the specified key. If the key cannot be found -1 is returned. </para>
            </summary>
            <param name="key">The key whose index is desired. </param>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.op_Equality(Cognex.Vision.GraphicChildren,Cognex.Vision.GraphicChildren)">
            <summary>Compares the equality of two GraphicChildren objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.op_Inequality(Cognex.Vision.GraphicChildren,Cognex.Vision.GraphicChildren)">
            <summary>Compares the inequality of two GraphicChildren objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.CopyTo(Cognex.Vision.IGraphicParentChild[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.IGraphicParentChild})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="M:Cognex.Vision.GraphicChildren.Contains(System.Collections.Generic.KeyValuePair{System.String,Cognex.Vision.IGraphicParentChild})">
            <summary>
            <para>Determines whether this dictionary contains the specified key. </para>
            </summary>
            <param name="key">The key to check. </param>
            <returns>
            <para>True if this dictionary contains <b>key</b>, otherwise False. </para>
            </returns>
        </member>
        <member name="T:Cognex.Vision.ITransform2D">
            <summary>
            <para>Common interface for all 2D transforms. </para>
            </summary>
            <remarks>
            <para>This interface provides a common interface for all two-dimensional transforms. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ITransform2D.Linear">
            <summary>
            <para>Returns true if this is a linear transform. </para>
            </summary>
            <remarks>
            <para>This function always returns True if the transform is of type <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>; it may return True for other types if they implement a transformation that is mathematically equivalent to a linear transformation. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ITransform2D.BestFitLinearTransform(Cognex.Vision.Vect2Collection,System.Double@)">
            <summary>
            <para>Returns a new linear transform which best describes this transform over the given set of points. The points must be expressed in 'from' coordinates. </para>
            </summary>
            <param name="fromPoints">A collection of points, expressed in From coordinates, for which to apply. </param>
            <param name="rmsError">Sets it to the RMS error of the points against the returned linear transformation. A value of 0 indicates that the returned transformation exactly maps the points. Note that the RMS error is measured in <b>To</b> space. <b>
            </b>. is the Root Mean Square (RMS) unweighted Euclidian error between two sets of corresponding points. Set A is composed of the given points (in <b>From</b> space) after they have been mapped through this transform into <b>To</b> space. Set B is the same points after they have been mapped to <b>To</b> space using the <b>linear</b> transform returned by this function. </param>
            <exception cref="T:Cognex.Vision.TransformException">Too few points were provided to compute a best fit linear transform. </exception>
            <remarks>
            <para>Returns a new linear transform that best describes this transform over the given set of points. These points must be expressed in <b>From</b> coordinates. The returned transform is called the "best-fit linear transform" because it is guaranteed to produce the smallest RMSError of any linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ITransform2D.ComposeBase(Cognex.Vision.ITransform2D)">
            <summary>
            <para>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side). </para>
            </summary>
            <param name="rightSide">The transform object to compose with this one. </param>
            <remarks>
            <para>Returns a new transform that is the composition of this transform and the specified transform. This function performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.Compose(Cognex.Vision.Transform2DLinear)">Compose</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. However, this method returns the transform of most suitable type based on the types of the transform objects being composed. For example, if you compose two linear transforms, the resulting transform is linear. The order in which you compose transformations is important. If you have a transform that maps AFromB and another that maps BFromC, you compose the two to get a single transform that maps AFromC as follows: AFromB.ComposeBase(BFromC). You do <b>not</b> use: BFromC.ComposeBase(AFromB). </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ITransform2D.CopyBase">
            <summary>
            <para>Returns a new copy of this transform. </para>
            </summary>
            <remarks>
            <para>Returns a copy of this transformation object. This function performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.Copy">Copy</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. The only difference is the type of the returned transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ITransform2D.InvertBase">
            <summary>
            <para>Returns a new transform which is the inverse of this one. </para>
            </summary>
            <remarks>
            <para>Returns a transform that is the inverse of this transform. If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A. <see cref="M:Cognex.Vision.ITransform2D.InvertBase">InvertBase</see> performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.Invert">Invert</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. The only difference is the type of the returned transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ITransform2D.LinearTransform(System.Double,System.Double)">
            <summary>
            <para>Returns a new linear transform which best describes this transform at the given point. The point must be expressed in 'from' coordinates. </para>
            </summary>
            <param name="x">The x-coordinate for the point, expressed in <b>Fromcoordinates</b>. </param>
            <param name="y">The y-coordinate for the point, expressed in <b>From</b> coordinates. </param>
        </member>
        <member name="M:Cognex.Vision.ITransform2D.MapPoint(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            <para>Maps the given x,y point through this transform, filling in the mapped x,y coordinates. </para>
            </summary>
            <param name="x">The x-coordinate of the original point in <b>From</b> space. </param>
            <param name="y">The y-coordinate of the original point in <b>From</b> space. </param>
            <param name="mappedX">The resulting mapped x-coordinate in <b>To</b> space. </param>
            <param name="mappedY">The resulting mapped y-coordinate in <b>To</b> space. </param>
            <remarks>
            <para>Maps the given <b>from</b> space point through this transform, filling in the mapped <b>to</b> space (x, y) coordinates. This method performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)">MapPoint</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. This method is provided on both interfaces as a convenience to users. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ITransform2D.MapPoints(Cognex.Vision.Vect2Collection)">
            <summary>
            <para>Map the supplied points through this transform. </para>
            </summary>
            <param name="coordinatesXY">A row-major two dimensional array of X,Y point coordinates to be mapped. These elements must be of type double. </param>
            <remarks>
            <para>A row-major two dimensional array of the mapped X,Y point coordinates. The size of this array is equal to the size of the input array </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">If coordinatesXY is not an array of doubles. </exception>
        </member>
        <member name="T:Cognex.Vision.Transform2DLinear">
            <summary>
            <para>Linear 2D coordinate transform. </para>
            </summary>
            <remarks>
            <para>
            <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> represents a two-dimensional linear transformation between two coordinate spaces. It enables you to map points from the <b>from</b> coordinate space to the <b>to</b> coordinate space. It defaults to the identity transform. <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> represents a linear <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-transformations-2D-transforms.htm">transformation</A> as a (2x2) matrix and a translation vector. There are three different <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-transformations-manipulating-matrix.htm">parameterization methods</A>for the matrix, each based on the following general 2-d linear transformation: Where (xA, yA) is the input point, (Tx, Ty) is the translation vector, and the rest is the (2x2) matrix that represents the scaling and rotation. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.Transform2DLinear.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinear.Aspect">
            <summary>
            <b>Get</b>
            <para>Returns the aspect of this transform. Aspect is the ratio of scaling along the y axis over scaling along the x axis. When aspect is set the rotation, skew, and scaling remain unchanged. </para>
            </summary>
            <remarks>
            <para>Aspect is the ratio of scaling along the y-axis over scaling along the x-axis. It is represented by the symbol A in the standard transformation matrix. When <see cref="P:Cognex.Vision.Transform2DLinear.Aspect">Aspect</see> is set, the <see cref="P:Cognex.Vision.Transform2DLinear.Rotation">Rotation</see>, <see cref="P:Cognex.Vision.Transform2DLinear.Skew">Skew</see>, and <see cref="P:Cognex.Vision.Transform2DLinear.Scaling">Scaling</see> remain unchanged. Notice that if the aspect equals one, then <see cref="P:Cognex.Vision.Transform2DLinear.Scaling">Scaling</see>, <see cref="P:Cognex.Vision.Transform2DLinear.ScalingX">ScalingX</see>, and <see cref="P:Cognex.Vision.Transform2DLinear.ScalingY">ScalingY</see> are equal.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Transform2DLinear.Aspect">Aspect</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScaling">SfScaling</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfGetMatrixElement">SfGetMatrixElement</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfMatrixDeterminant">SfMatrixDeterminant</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationX">SfRotationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationY">SfRotationY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingX">SfScalingX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingY">SfScalingY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationX">SfTranslationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationY">SfTranslationY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The new aspect value is zero. </exception>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinear.Linear">
            <summary>
            <para>Returns true if this is a linear transform. </para>
            </summary>
            <remarks>
            <para>This function always returns True if the transform is of type <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>; it may return True for other types if they implement a transformation that is mathematically equivalent to a linear transformation. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinear.MatrixDeterminant">
            <summary>
            <para>Returns the determinant of the 2-by-2 matrix in this transformation. </para>
            </summary>
            <remarks>
            <para>Returns the determinant of this transformation object's 2x2 matrix. You might use the <see cref="P:Cognex.Vision.Transform2DLinear.MatrixDeterminant">MatrixDeterminant</see> to test for a degenerate transform: for example, the <see cref="M:Cognex.Vision.Transform2DLinear.Singular(System.Double)">Singular</see> method is based on the determinant. You might also use the determinant to ascertain how a transform changes the handedness of the x- and y-axes: if the matrix determinant is negative, the transform swaps the handedness of the x- and y-axes. In other words, if the determinant is negative, the <see cref="P:Cognex.Vision.Transform2DLinear.Skew">Skew</see> is greater than +90 or less than -90 degrees; if the determinant is positive, the skew is between +90 and -90 degrees. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinear.Rotation">
            <summary>
            <b>Get</b>
            <para>Gets the rotation of this transform (in radians). When rotation is set the skew, scaling, and aspect remain unchanged. </para>
            </summary>
            <remarks>
            <para>When you set the rotation, the <see cref="P:Cognex.Vision.Transform2DLinear.Skew">Skew</see>, <see cref="P:Cognex.Vision.Transform2DLinear.Scaling">Scaling</see>, and <see cref="P:Cognex.Vision.Transform2DLinear.Aspect">Aspect</see> values remain unchanged. If <see cref="P:Cognex.Vision.Transform2DLinear.Skew">Skew</see> equals zero, then <see cref="P:Cognex.Vision.Transform2DLinear.Rotation">Rotation</see>, <see cref="P:Cognex.Vision.Transform2DLinear.RotationX">RotationX</see>, and <see cref="P:Cognex.Vision.Transform2DLinear.RotationY">RotationY</see> are equal. Otherwise, Rotation is equal to RotationX and Skew is equal to RotationY minus RotationX. Notice that changes to this property affect both RotationX and RotationY. In the standard transformation matrix, the symbol for <see cref="P:Cognex.Vision.Transform2DLinear.Rotation">Rotation</see> is θ.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Transform2DLinear.Rotation">Rotation</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScaling">SfScaling</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfGetMatrixElement">SfGetMatrixElement</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfMatrixDeterminant">SfMatrixDeterminant</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationX">SfRotationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationY">SfRotationY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingX">SfScalingX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingY">SfScalingY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationX">SfTranslationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationY">SfTranslationY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinear.RotationX">
            <summary>
            <para>Returns the x-axis rotation of this transform (in radians). When set, RotationY, ScalingX, and ScalingY remain unchanged. </para>
            </summary>
            <remarks>
            <para>Returns the x-axis of this transformation object in radians. <see cref="P:Cognex.Vision.Transform2DLinear.RotationX">RotationX</see> represents the angle measured from the x-axis of the <b>to</b> space to the x-axis of the <b>from</b> space. In the standard transformation matrix, the symbol θx stands for <see cref="P:Cognex.Vision.Transform2DLinear.RotationX">RotationX</see>. Notice that <see cref="P:Cognex.Vision.Transform2DLinear.RotationX">RotationX</see> has the same value as <see cref="P:Cognex.Vision.Transform2DLinear.RotationY">RotationY</see> if and only if <see cref="P:Cognex.Vision.Transform2DLinear.Skew">Skew</see> equals zero. <see cref="P:Cognex.Vision.Transform2DLinear.RotationX">RotationX</see> always has the same value as <see cref="P:Cognex.Vision.Transform2DLinear.Rotation">Rotation</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinear.RotationY">
            <summary>
            <para>Returns the y-axis rotation of this transform (in radians). When set, RotationX, ScalingX, and ScalingY remain unchanged. </para>
            </summary>
            <remarks>
            <para>Returns the y-axis of this transformation object in radians. <see cref="P:Cognex.Vision.Transform2DLinear.RotationY">RotationY</see> represents the angle measured from the y-axis of the <b>to</b> space to the y-axis of the <b>from</b> space. In the standard transformation matrix, the symbol θy stands for <see cref="P:Cognex.Vision.Transform2DLinear.RotationY">RotationY</see>. Notice that <see cref="P:Cognex.Vision.Transform2DLinear.RotationY">RotationY</see> has the same value as <see cref="P:Cognex.Vision.Transform2DLinear.RotationX">RotationX</see> if and only if the <see cref="P:Cognex.Vision.Transform2DLinear.Skew">Skew</see> equals zero. If <see cref="P:Cognex.Vision.Transform2DLinear.Skew">Skew</see> has a non-zero value, then <see cref="P:Cognex.Vision.Transform2DLinear.RotationY">RotationY</see> = <see cref="P:Cognex.Vision.Transform2DLinear.RotationX">RotationX</see> + <see cref="P:Cognex.Vision.Transform2DLinear.Skew">Skew</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinear.Scaling">
            <summary>
            <b>Get</b>
            <para>Returns/sets the scaling of this transform. When scaling is set the rotation, skew, and aspect remain unchanged. </para>
            </summary>
            <remarks>
            <para>Sets or gets the uniform scaling of this transformation object. When you set the scaling, the <see cref="P:Cognex.Vision.Transform2DLinear.Rotation">Rotation</see>, <see cref="P:Cognex.Vision.Transform2DLinear.Skew">Skew</see>, and <see cref="P:Cognex.Vision.Transform2DLinear.Aspect">Aspect</see> values remain unchanged. If <see cref="P:Cognex.Vision.Transform2DLinear.Aspect">Aspect</see> equals one, then <see cref="P:Cognex.Vision.Transform2DLinear.Scaling">Scaling</see>, <see cref="P:Cognex.Vision.Transform2DLinear.ScalingX">ScalingX</see>, and <see cref="P:Cognex.Vision.Transform2DLinear.ScalingY">ScalingY</see> are equal. Otherwise, <see cref="P:Cognex.Vision.Transform2DLinear.Scaling">Scaling</see> is equal to <see cref="P:Cognex.Vision.Transform2DLinear.ScalingX">ScalingX</see>, and <see cref="P:Cognex.Vision.Transform2DLinear.Aspect">Aspect</see> is equal to <see cref="P:Cognex.Vision.Transform2DLinear.ScalingY">ScalingY</see> divided by <see cref="P:Cognex.Vision.Transform2DLinear.ScalingX">ScalingX</see>. Notice that changes to this property affect both <see cref="P:Cognex.Vision.Transform2DLinear.ScalingX">ScalingX</see> and <see cref="P:Cognex.Vision.Transform2DLinear.ScalingY">ScalingY</see>. In the standard transformation matrix, scaling is represented by the symbol S.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Transform2DLinear.Scaling">Scaling</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScaling">SfScaling</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfGetMatrixElement">SfGetMatrixElement</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfMatrixDeterminant">SfMatrixDeterminant</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationX">SfRotationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationY">SfRotationY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingX">SfScalingX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingY">SfScalingY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationX">SfTranslationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationY">SfTranslationY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The new scaling value is zero. </exception>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinear.ScalingX">
            <summary>
            <para>Returns the x-axis scaling of this transform. When set, RotationX, RotationY, and ScalingY remain unchanged. </para>
            </summary>
            <remarks>
            <para>In the standard transformation matrix,<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScaling">SfScaling</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfGetMatrixElement">SfGetMatrixElement</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfMatrixDeterminant">SfMatrixDeterminant</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationX">SfRotationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationY">SfRotationY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingX">SfScalingX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingY">SfScalingY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationX">SfTranslationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationY">SfTranslationY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinear.ScalingY">
            <summary>
            <para>Returns the y-axis scaling of this transform. When set, RotationX, RotationY, and ScalingX remain unchanged. </para>
            </summary>
            <remarks>
            <para>In the standard transformation matrix, <see cref="P:Cognex.Vision.Transform2DLinear.ScalingY">ScalingY</see> is represented by the symbol Sy.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinear.Skew">
            <summary>
            <b>Get</b>
            <para>Gets the skew of this transform (in radians). When skew is set the rotation, scaling, and aspect remain unchanged. </para>
            </summary>
            <remarks>
            <para>Sets or gets the skew of this transformation object in radians. When you set the skew, the <see cref="P:Cognex.Vision.Transform2DLinear.Rotation">Rotation</see>, <see cref="P:Cognex.Vision.Transform2DLinear.Scaling">Scaling</see>, and <see cref="P:Cognex.Vision.Transform2DLinear.Aspect">Aspect</see> values remain unchanged. In the standard transformation matrix, skew is represented by the symbol Q, and is equal to<see cref="P:Cognex.Vision.Transform2DLinear.RotationY">RotationY</see> - <see cref="P:Cognex.Vision.Transform2DLinear.RotationX">RotationX</see>
            </para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Transform2DLinear.Skew">Skew</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScaling">SfScaling</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfGetMatrixElement">SfGetMatrixElement</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfMatrixDeterminant">SfMatrixDeterminant</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationX">SfRotationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationY">SfRotationY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingX">SfScalingX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingY">SfScalingY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationX">SfTranslationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationY">SfTranslationY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The new value is π/2 or −π/2 (when normalized to the range between π and −π). </exception>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinear.TranslationX">
            <summary>
            <b>Get</b>
            <para>Gets the x component of the translation vector. </para>
            </summary>
            <remarks>
            <para>In the standard transformation matrix, the x-component of the translation vector is represented by the symbol Tx.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Transform2DLinear.TranslationX">TranslationX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScaling">SfScaling</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfGetMatrixElement">SfGetMatrixElement</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfMatrixDeterminant">SfMatrixDeterminant</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationX">SfRotationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationY">SfRotationY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingX">SfScalingX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingY">SfScalingY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationX">SfTranslationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationY">SfTranslationY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinear.TranslationY">
            <summary>
            <b>Get</b>
            <para>Gets the y component of the translation vector. </para>
            </summary>
            <remarks>
            <para>In the standard transformation matrix, the y-component of the translation vector is represented by the symbol Ty.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Transform2DLinear.TranslationY">TranslationY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScaling">SfScaling</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfGetMatrixElement">SfGetMatrixElement</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfMatrixDeterminant">SfMatrixDeterminant</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationX">SfRotationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationY">SfRotationY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingX">SfScalingX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingY">SfScalingY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationX">SfTranslationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationY">SfTranslationY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinear.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.BestFitLinearTransform(Cognex.Vision.Vect2Collection,System.Double@)">
            <summary>
            <para>Returns a new linear transform which best describes this transform over the given set of points. The points must be expressed in 'from' coordinates. </para>
            </summary>
            <param name="fromPoints">A collection of points, expressed in From coordinates, for which to apply. </param>
            <param name="rmsError">Sets it to the RMS error of the points against the returned linear transformation. A value of 0 indicates that the returned transformation exactly maps the points. Note that the RMS error is measured in <b>To</b> space. <b>
            </b>. is the Root Mean Square (RMS) unweighted Euclidian error between two sets of corresponding points. Set A is composed of the given points (in <b>From</b> space) after they have been mapped through this transform into <b>To</b> space. Set B is the same points after they have been mapped to <b>To</b> space using the <b>linear</b> transform returned by this function. </param>
            <exception cref="T:Cognex.Vision.TransformException">Too few points were provided to compute a best fit linear transform. </exception>
            <remarks>
            <para>Returns a new linear transform that best describes this transform over the given set of points. These points must be expressed in <b>From</b> coordinates. The returned transform is called the "best-fit linear transform" because it is guaranteed to produce the smallest RMSError of any linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.Compose(Cognex.Vision.Transform2DLinear)">
            <summary>
            <para>Returns a new linear transform which is the composition of the given transform (on the right side) and this one (on the left side). </para>
            </summary>
            <param name="rightSide">The transformation to compose with this one. </param>
            <remarks>
            <para>Returns a new linear transformation object that is the composition of a given transformation object and this one. The order in which you compose transformations is important. If you have a transform that maps AFromB and another that maps BFromC, you compose the two to get a single transform that maps AFromC as follows: AFromB.Compose(BFromC). You do <b>not</b> use: BFromC.Compose(AFromB). <see cref="M:Cognex.Vision.Transform2DLinear.Compose(Cognex.Vision.Transform2DLinear)">Compose</see> performs the same operation as the <see cref="M:Cognex.Vision.ITransform2D.ComposeBase(Cognex.Vision.ITransform2D)">ComposeBase</see> method of <see cref="T:Cognex.Vision.ITransform2D">ITransform2D</see>. The only difference is the type of the returned object. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.ComposeBase(Cognex.Vision.ITransform2D)">
            <summary>
            <para>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side). </para>
            </summary>
            <param name="rightSide">The transform object to compose with this one. </param>
            <remarks>
            <para>Returns a new transform that is the composition of this transform and the specified transform. This function performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.Compose(Cognex.Vision.Transform2DLinear)">Compose</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. However, this method returns the transform of most suitable type based on the types of the transform objects being composed. For example, if you compose two linear transforms, the resulting transform is linear. The order in which you compose transformations is important. If you have a transform that maps AFromB and another that maps BFromC, you compose the two to get a single transform that maps AFromC as follows: AFromB.ComposeBase(BFromC). You do <b>not</b> use: BFromC.ComposeBase(AFromB). </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.Copy">
            <summary>
            <para>Returns a new copy of this transform. </para>
            </summary>
            <remarks>
            <para>Returns a copy of this transformation object. <see cref="M:Cognex.Vision.Transform2DLinear.Copy">Copy</see> performs the same operation as the <see cref="M:Cognex.Vision.ITransform2D.CopyBase">CopyBase</see> method of <see cref="T:Cognex.Vision.ITransform2D">ITransform2D</see>. The only difference is the type of the returned transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.CopyBase">
            <summary>
            <para>Returns a new copy of this transform. </para>
            </summary>
            <remarks>
            <para>Returns a copy of this transformation object. This function performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.Copy">Copy</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. The only difference is the type of the returned transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.GetMatrixElement(System.Int32,System.Int32)">
            <summary>
            <para>Access the selected element of the 2-by-2 matrix in this transform. </para>
            </summary>
            <param name="row">The row index of the element to set or get. Row numbering starts at zero. </param>
            <param name="column">The column index of the element to set or get. Column numbering starts at zero. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>row</b> or <b>column</b> is less than zero or greater than one. </exception>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.GetMatrixElementsTranslation(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Extract the named parameters from this transform. </para>
            </summary>
            <param name="elem00">Element (0,0) of the matrix component of the transformation object. </param>
            <param name="elem01">Element (0,1) of the matrix component of the transformation object. </param>
            <param name="elem10">Element (1,0) of the matrix component of the transformation object. </param>
            <param name="elem11">Element (1,1) of the matrix component of the transformation object. </param>
            <param name="translationX">The <see cref="P:Cognex.Vision.Transform2DLinear.TranslationX">TranslationX</see> along the x-axis. </param>
            <param name="translationY">The <see cref="P:Cognex.Vision.Transform2DLinear.TranslationY">TranslationY</see> along the y-axis. </param>
            <remarks>
            <para>Returns the requested <see cref="M:Cognex.Vision.Transform2DLinear.GetMatrixElement(System.Int32,System.Int32)">matrix elements</see> and translation of this transformation. Note that each <see cref="M:Cognex.Vision.Transform2DLinear.GetMatrixElementsTranslation(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">GetMatrixElementsTranslation</see> parameter is optional. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.GetScalingAspectRotationSkewTranslation(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Extract the named parameters from this transform. Rotation and Skew are in radians. </para>
            </summary>
            <param name="scaling">The <see cref="P:Cognex.Vision.Transform2DLinear.Scaling">Scaling</see> factor. </param>
            <param name="aspect">The <see cref="P:Cognex.Vision.Transform2DLinear.Aspect">aspect</see> ratio. </param>
            <param name="rotation">The angle of <see cref="P:Cognex.Vision.Transform2DLinear.Rotation">Rotation</see> in radians. </param>
            <param name="skew">The <see cref="P:Cognex.Vision.Transform2DLinear.Skew">skew</see> angle in radians. </param>
            <param name="translationX">The <see cref="P:Cognex.Vision.Transform2DLinear.TranslationX">translation</see> along the x-axis. </param>
            <param name="translationY">The <see cref="P:Cognex.Vision.Transform2DLinear.TranslationY">translation</see> along the y-axis. </param>
            <remarks>
            <para>Returns the scaling, aspect, rotation, skew, and/or translation of this transformation. Note that each <see cref="M:Cognex.Vision.Transform2DLinear.GetScalingAspectRotationSkewTranslation(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">GetScalingAspectRotationSkewTranslation</see> parameter is optional. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.GetScalingsRotationsTranslation(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Extract the named parameters from this transform. RotationX and RotationY are in radians. </para>
            </summary>
            <param name="scalingX">The <see cref="P:Cognex.Vision.Transform2DLinear.ScalingX">scaling</see> factor of the x-axis. </param>
            <param name="scalingY">The <see cref="P:Cognex.Vision.Transform2DLinear.ScalingY">scaling</see> factor of the y-axis. </param>
            <param name="rotationX">The <see cref="P:Cognex.Vision.Transform2DLinear.RotationX">rotation</see> of the x-axis in radians. </param>
            <param name="rotationY">The <see cref="P:Cognex.Vision.Transform2DLinear.RotationY">rotation</see> of the y-axis in radians. </param>
            <param name="translationX">The <see cref="P:Cognex.Vision.Transform2DLinear.TranslationX">translation</see> along the x-axis. </param>
            <param name="translationY">The <see cref="P:Cognex.Vision.Transform2DLinear.TranslationY">translation</see> along the y-axis. </param>
            <remarks>
            <para>Returns the x- and y-axis scaling, rotation, and/or translation</para>
            </remarks>
            <para>of this transformation. Note that each <see cref="M:Cognex.Vision.Transform2DLinear.GetScalingsRotationsTranslation(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">GetScalingsRotationsTranslation</see> parameter is optional. </para>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.Identity(System.Double)">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.Invert">
            <summary>
            <para>Returns a new linear transform which is the inverse of this one. </para>
            </summary>
            <remarks>
            <para>If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A. <see cref="M:Cognex.Vision.Transform2DLinear.Invert">Invert</see> performs the same operation as the <see cref="M:Cognex.Vision.ITransform2D.InvertBase">InvertBase</see> method of <see cref="T:Cognex.Vision.ITransform2D">ITransform2D</see>. The only difference is the type of the returned transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.InvertBase">
            <summary>
            <para>Returns a new transform which is the inverse of this one. </para>
            </summary>
            <remarks>
            <para>Returns a transform that is the inverse of this transform. If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A. <see cref="M:Cognex.Vision.ITransform2D.InvertBase">InvertBase</see> performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.Invert">Invert</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. The only difference is the type of the returned transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.LinearTransform(System.Double,System.Double)">
            <summary>
            <para>Returns a new linear transform which best describes this transform at the given point. The point must be expressed in 'from' coordinates. </para>
            </summary>
            <param name="x">The x-coordinate for the point, expressed in <b>Fromcoordinates</b>. </param>
            <param name="y">The y-coordinate for the point, expressed in <b>From</b> coordinates. </param>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.MapAngle(System.Double)">
            <summary>
            <para>Maps the given angle (in radians) through this transform and returns the result (in radians). </para>
            </summary>
            <param name="angle">The angle to map. </param>
            <remarks>
            <para>Maps the given angle in radians through this transformation. The operation of <see cref="M:Cognex.Vision.Transform2DLinear.MapAngle(System.Double)">MapAngle</see> is equivalent to creating a unit vector at the given angle, mapping the vector, and then computing the rotation angle of the mapped vector. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.MapArea(System.Double)">
            <summary>
            <para>Maps the given area through this transform and returns the result. </para>
            </summary>
            <param name="area">The area to map. </param>
            <remarks>
            <para>
            <see cref="M:Cognex.Vision.Transform2DLinear.MapArea(System.Double)">MapArea</see> computes the mapped area by first calculating the area of a unit square and then multiplying the given area by the result. The area formed by two vectors is the cross product of the vectors. <see cref="M:Cognex.Vision.Transform2DLinear.MapArea(System.Double)">MapArea</see> takes the vectors (1, 0) and (0, 1), maps these to the new coordinates, and then calculates the cross product. Given the following 2x2 matrix vector (1, 0) maps to (a, c) and vector (0,1) maps to (b, d). You calculate the cross product as: The cross product is also equivalent to the <see cref="P:Cognex.Vision.Transform2DLinear.MatrixDeterminant">determinant</see>. You may want to call <see cref="M:Cognex.Vision.Transform2DLinear.MapArea(System.Double)">MapArea</see> with an area of 1.0 to get a conversion constant, and then use this constant in calculations. This saves the overhead of invoking <see cref="M:Cognex.Vision.Transform2DLinear.MapArea(System.Double)">MapArea</see> multiple times. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            <para>Maps the given x,y point through this transform, filling in the mapped x,y coordinates. </para>
            </summary>
            <param name="x">The x-coordinate of the original point in <b>From</b> space. </param>
            <param name="y">The y-coordinate of the original point in <b>From</b> space. </param>
            <param name="mappedX">The resulting mapped x-coordinate in <b>To</b> space. </param>
            <param name="mappedY">The resulting mapped y-coordinate in <b>To</b> space. </param>
            <remarks>
            <para>Maps the given <b>from</b> space point through this transform, filling in the mapped <b>to</b> space (x, y) coordinates. This method performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)">MapPoint</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. This method is provided on both interfaces as a convenience to users. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.MapPoints(Cognex.Vision.Vect2Collection)">
            <summary>
            <para>Map the supplied points through this transform. </para>
            </summary>
            <param name="coordinatesXY">A row-major two dimensional array of X,Y point coordinates to be mapped. These elements must be of type double. </param>
            <remarks>
            <para>A row-major two dimensional array of the mapped X,Y point coordinates. The size of this array is equal to the size of the input array </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">If coordinatesXY is not an array of doubles. </exception>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.MapVector(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            <para>Maps the given x,y vector through this transform, filling in the mapped x,y vector components. </para>
            </summary>
            <param name="x">The x-component of the vector to map. </param>
            <param name="y">The y-component of the vector to map. </param>
            <param name="mappedX">The x-component of the mapped vector. </param>
            <param name="mappedY">The y-component of the mapped vector </param>
            <remarks>
            <para>Maps the given (x, y) vector through this transformation, returning the mapped (x,y) vector components as given by: Points and vectors are treated differently when transformed between coordinate spaces. A point represents a specific position in a coordinate space. A vector represents a length and direction in the same space but has no fixed location. The following figure shows the coordinates of P and the components of the vector v in two different coordinate spaces. In Space 1, the components of the vector and the coordinates of the point are the same: the vector's tail is at the origin and the tip is at point P. In Space 2, the vector components and the point coordinates are different. The point P has a fixed position in space, and the vector has a fixed length and direction. You use <see cref="M:Cognex.Vision.Transform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)">MapPoint</see> and <see cref="M:Cognex.Vision.Transform2DLinear.MapVector(System.Double,System.Double,System.Double@,System.Double@)">MapVector</see> to map point coordinates and vector components from one coordinate space to another. In the preceding figure, you would use <see cref="M:Cognex.Vision.Transform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)">MapPoint</see> to map (xP1, yP1) to (xP2, yP2). <see cref="M:Cognex.Vision.Transform2DLinear.MapVector(System.Double,System.Double,System.Double@,System.Double@)">MapVector</see> would map (xv1, yv1) to (xv2, yv2). </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.MatrixIdentity(System.Double)">
            <summary>
            <para>Returns true if the 2-by-2 matrix in this transform is an identity mapping within the given tolerance. The tolerance is applied to each matrix element. </para>
            </summary>
            <param name="tolerance">The tolerance to use against each matrix element. </param>
            <remarks>
            <para>Returns true if:<list type="bullet">
            <item>
            <description>MatrixElement(0, 0) = 1 +/- tolerance</description>
            </item>
            <item>
            <description>MatrixElement(0, 1) = 0 +/- tolerance</description>
            </item>
            <item>
            <description>MatrixElement(1, 0) = 0 +/- tolerance</description>
            </item>
            <item>
            <description>MatrixElement(1, 1) = 1 +/- tolerance </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.SetMatrixElement(System.Int32,System.Int32,System.Double)">
            <summary>
            <para>Access the selected element of the 2-by-2 matrix in this transform. </para>
            </summary>
            <param name="row">The row index of the element to set or get. Row numbering starts at zero. </param>
            <param name="column">The column index of the element to set or get. Column numbering starts at zero. </param>
            <param name="value">The value of the element to set or get.</param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the transform is changed.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScaling">SfScaling</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfGetMatrixElement">SfGetMatrixElement</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfMatrixDeterminant">SfMatrixDeterminant</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationX">SfRotationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationY">SfRotationY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingX">SfScalingX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingY">SfScalingY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationX">SfTranslationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationY">SfTranslationY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>row</b> or <b>column</b> is less than zero or greater than one.</exception>
            <remarks>
            <para>Sets or gets the selected element from this transformation object's <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-transformations.htm">(2x2) matrix</A>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.SetMatrixElementsTranslation(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Set this transform from the given parameters. </para>
            </summary>
            <param name="elem00">Element (0,0) of the matrix component of the transformation object. </param>
            <param name="elem01">Element (0,1) of the matrix component of the transformation object. </param>
            <param name="elem10">Element (1,0) of the matrix component of the transformation object. </param>
            <param name="elem11">Element (1,1) of the matrix component of the transformation object. </param>
            <param name="translationX">The <see cref="P:Cognex.Vision.Transform2DLinear.TranslationX">translation</see> along the x-axis. </param>
            <param name="translationY">The <see cref="P:Cognex.Vision.Transform2DLinear.TranslationY">translation</see> along the y-axis.</param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the transform is changed.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScaling">SfScaling</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfGetMatrixElement">SfGetMatrixElement</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfMatrixDeterminant">SfMatrixDeterminant</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationX">SfRotationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationY">SfRotationY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingX">SfScalingX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingY">SfScalingY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationX">SfTranslationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationY">SfTranslationY</see>
            </description>
            </item>
            </list>
            </para>
            <para>Sets the specified matrix and translation elements of this transformation object. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.SetScalingAspectRotationSkewTranslation(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Set this transform from the given parameters. Rotation and Skew are in radians. </para>
            </summary>
            <param name="scaling">The <see cref="P:Cognex.Vision.Transform2DLinear.Scaling">Scaling</see> factor. </param>
            <param name="aspect">The <see cref="P:Cognex.Vision.Transform2DLinear.Aspect">aspect</see> ratio. </param>
            <param name="rotation">The angle of <see cref="P:Cognex.Vision.Transform2DLinear.Rotation">Rotation</see> in radians. </param>
            <param name="skew">The <see cref="P:Cognex.Vision.Transform2DLinear.Skew">skew</see> angle in radians. </param>
            <param name="translationX">The <see cref="P:Cognex.Vision.Transform2DLinear.TranslationX">translation</see> along the x-axis. </param>
            <param name="translationY">The <see cref="P:Cognex.Vision.Transform2DLinear.TranslationY">translation</see> along the y-axis. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the transform is changed.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScaling">SfScaling</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfGetMatrixElement">SfGetMatrixElement</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfMatrixDeterminant">SfMatrixDeterminant</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationX">SfRotationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationY">SfRotationY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingX">SfScalingX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingY">SfScalingY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationX">SfTranslationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationY">SfTranslationY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>scaling</b> is zero. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>aspect</b> is zero. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>skew</b> is π/2 or −π/2 (when normalized to the range between π and −π). </exception>
            <remarks>
            <para>Sets the scaling, aspect, rotation, skew, and/or translation of this transformation object. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.SetScalingsRotationsTranslation(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Set this transform from the given parameters. RotationX and RotationY are in radians. </para>
            </summary>
            <param name="scalingX">The <see cref="P:Cognex.Vision.Transform2DLinear.ScalingX">scaling</see> factor of the x-axis. </param>
            <param name="scalingY">The <see cref="P:Cognex.Vision.Transform2DLinear.ScalingY">scaling</see> factor of the y-axis. </param>
            <param name="rotationX">The <see cref="P:Cognex.Vision.Transform2DLinear.RotationX">rotation</see> of the x-axis in radians. </param>
            <param name="rotationY">The <see cref="P:Cognex.Vision.Transform2DLinear.RotationY">rotation</see>&gt; of the y-axis in radians. </param>
            <param name="translationX">The <see cref="P:Cognex.Vision.Transform2DLinear.TranslationX">translation</see> along the x-axis. </param>
            <param name="translationY">The <see cref="P:Cognex.Vision.Transform2DLinear.TranslationY">translation</see> along the y-axis. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the transform is changed.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScaling">SfScaling</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfGetMatrixElement">SfGetMatrixElement</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfMatrixDeterminant">SfMatrixDeterminant</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationX">SfRotationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfRotationY">SfRotationY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingX">SfScalingX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfScalingY">SfScalingY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationX">SfTranslationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DLinear.SfTranslationY">SfTranslationY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>scalingX</b> is zero. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>scalingY</b> is zero. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>rotationY</b> is ( <b>rotationX</b> ± π/2) when normalized to the range between π and −π. </exception>
            <remarks>
            <para>Sets the x- and y-axis scaling, rotation, and/or translation of this transformation object. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.Singular(System.Double)">
            <summary>
            <para>Returns true if this transform is singular. A transform is singular if the matrix determinant equals zero within the given tolerance. </para>
            </summary>
            <param name="tolerance">The tolerance against which to test the determinant of the transformation object's matrix. </param>
            <returns>
            <para>True if the transformation object is singular within the specified tolerance; False if it is not. </para>
            </returns>
            <remarks>
            <para>Returns True if this transformation is singular within the given tolerance. A transformation is singular if the <see cref="P:Cognex.Vision.Transform2DLinear.MatrixDeterminant">&gt;matrix determinant</see> is zero within the given tolerance. A singular transformation cannot be inverted. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.op_Equality(Cognex.Vision.Transform2DLinear,Cognex.Vision.Transform2DLinear)">
            <summary>Compares the equality of two Transform2DLinear objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinear.op_Inequality(Cognex.Vision.Transform2DLinear,Cognex.Vision.Transform2DLinear)">
            <summary>Compares the inequality of two Transform2DLinear objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Vect2">
            <summary>
            <para>This value class encapsulates a two dimensional point or vector. Note that this class is immutable - it may not be changed once it has been constructed. The default values for properties X and Y are 0.0. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2.#ctor(System.Double,System.Double)">
            <summary>
            <para>Construct the <see cref="T:Cognex.Vision.Vect2">Vect2</see> with the supplied x-coordinate and y-coordinate. </para>
            </summary>
            <param name="initialX">The initial X value. </param>
            <param name="initialY">The initial Y value. </param>
        </member>
        <member name="P:Cognex.Vision.Vect2.Length">
            <summary>
            <para>Gets the length of this vector. </para>
            </summary>
            <returns>
            <para>The length of this vector. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Vect2.X">
            <summary>
            <para>Gets the X coordinate value. </para>
            </summary>
            <returns>
            <para>The X coordinate value. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Vect2.Y">
            <summary>
            <para>Gets the Y coordinate value. </para>
            </summary>
            <returns>
            <para>The Y coordinate value. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Vect2.ComputeCrossProduct(Cognex.Vision.Vect2)">
            <summary>
            <para>Compute the cross product of this <see cref="T:Cognex.Vision.Vect2">Vect2</see> with the supplied <b>other</b>. </para>
            </summary>
            <param name="other">The other vector. </param>
            <returns>
            <para>The computed cross product vector. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Vect2.ComputeDistance(Cognex.Vision.Vect2)">
            <summary>
            <para>Compute the distance of this <see cref="T:Cognex.Vision.Vect2">Vect2</see> from the supplied <b>other</b>. </para>
            </summary>
            <param name="other">The other vector. </param>
            <returns>
            <para>The computed distance. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Vect2.ComputeDotProduct(Cognex.Vision.Vect2)">
            <summary>
            <para>Compute the dot product of this <see cref="T:Cognex.Vision.Vect2">Vect2</see> with the supplied <b>other</b>. </para>
            </summary>
            <param name="other">The other vector. </param>
            <returns>
            <para>The computed dot product. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Vect2.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2.RealEqual(Cognex.Vision.Vect2,Cognex.Vision.Vect2,System.Double)">
            <summary>
            <para>Checks the values of the supplied vectors are equal within the <b>epsilon</b> tolerance. </para>
            </summary>
            <param name="a">The first <see cref="T:Cognex.Vision.Vect2">Vect2</see>. </param>
            <param name="b">The second <see cref="T:Cognex.Vision.Vect2">Vect2</see>. </param>
            <param name="epsilon">The tolerance a coordinate should fall within in order to be considered equal. </param>
            <returns>
            <para>True if the x and y coordinates of both vectors are equal within the supplied tolerance. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Vect2.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Vect2.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Vect2Collection">
            <summary>
            <para>Class which holds a collection of <see cref="T:Cognex.Vision.Vect2">Vect2</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.Vect2Collection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2Collection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2Collection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2Collection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2Collection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2Collection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2Collection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2Collection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2Collection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2Collection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2Collection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Vect2Collection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Vect2Collection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Vect2Collection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Vect2Collection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.Add(Cognex.Vision.Vect2)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Vect2Collection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Vect2Collection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Vect2Collection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Vect2Collection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.Contains(Cognex.Vision.Vect2)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.IndexOf(Cognex.Vision.Vect2)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.Insert(System.Int32,Cognex.Vision.Vect2)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Vect2Collection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Vect2Collection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.setItem(System.Int32,Cognex.Vision.Vect2)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Vect2Collection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Vect2Collection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Vect2Collection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Vect2Collection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.Remove(Cognex.Vision.Vect2)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Vect2Collection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Vect2Collection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Vect2Collection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Vect2Collection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.op_Equality(Cognex.Vision.Vect2Collection,Cognex.Vision.Vect2Collection)">
            <summary>Compares the equality of two Vect2Collection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.op_Inequality(Cognex.Vision.Vect2Collection,Cognex.Vision.Vect2Collection)">
            <summary>Compares the inequality of two Vect2Collection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.CopyTo(Cognex.Vision.Vect2[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2Collection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Vect2})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.GraphicInteractiveBase">
            <summary>
            <para>Base implementation class that represents an interactive graphic. </para>
            </summary>
            <remarks>
            <para>The base implementation class of an interactive graphic. For example, <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>. </para>
            </remarks>
        </member>
        <member name="E:Cognex.Vision.GraphicInteractiveBase.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicInteractiveBase.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.Color">
            <summary>
            <b>Get</b>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets Color. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfColor">SfColor</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.FillColor">
            <summary>
            <b>Get</b>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.FillColor">FillColor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfFillColor">SfFillColor</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.DragColor">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.DragColor">DragColor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfDragColor">SfDragColor</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.DragLineStyle">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.DragLineStyle">DragLineStyle</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfDragLineStyle">SfDragLineStyle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.DragLineWidthInScreenPixels">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.DragLineWidthInScreenPixels">DragLineWidthInScreenPixels</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfDragLineWidthInScreenPixels">SfDragLineWidthInScreenPixels</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is &lt; 1. </exception>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfGraphicDOFEnableBase">SfGraphicDOFEnableBase</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.Interactive">
            <summary>
            <b>Get</b>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.Interactive">Interactive</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfInteractive">SfInteractive</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.LineStyle">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.LineStyle">LineStyle</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfLineStyle">SfLineStyle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.LineWidthInScreenPixels">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.LineWidthInScreenPixels">LineWidthInScreenPixels</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedLineWidthInScreenPixels">SfSelectedLineWidthInScreenPixels</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is &lt; 1. </exception>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.MouseCursor">
            <summary>
            <b>Get</b>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.MouseCursor">MouseCursor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfMouseCursor">SfMouseCursor</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.Parent">
            <summary>
            <b>Get</b>
            <para>Parent of this graphic. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.Parent">Parent</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.Selected">
            <summary>
            <b>Get</b>
            <para>True when the shape is selected in a display. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.Selected">Selected</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelected">SfSelected</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.SelectedColor">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.SelectedColor">SelectedColor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedColor">SfSelectedColor</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.SelectedLineStyle">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.SelectedLineStyle">SelectedLineStyle</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedLineStyle">SfSelectedLineStyle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.SelectedLineWidthInScreenPixels">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.SelectedLineWidthInScreenPixels">SelectedLineWidthInScreenPixels</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedLineWidthInScreenPixels">SfSelectedLineWidthInScreenPixels</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is &lt; 1. </exception>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.TipText">
            <summary>
            <b>Get</b>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.TipText">TipText</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfTipText">SfTipText</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveBase.Visible">
            <summary>
            <b>Get</b>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicInteractiveBase.Visible">Visible</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfVisible">SfVisible</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveBase.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveBase.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveBase.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveBase.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveBase.op_Equality(Cognex.Vision.GraphicInteractiveBase,Cognex.Vision.GraphicInteractiveBase)">
            <summary>Compares the equality of two GraphicInteractiveBase objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveBase.op_Inequality(Cognex.Vision.GraphicInteractiveBase,Cognex.Vision.GraphicInteractiveBase)">
            <summary>Compares the inequality of two GraphicInteractiveBase objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.IShape">
            <summary>
            <para>Base interface for all shapes. </para>
            </summary>
            <remarks>
            <para>Base interface for all closed shapes. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IShape.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IShape.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IShape.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IShape.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="T:Cognex.Vision.IRegion">
            <summary>
            <para>Base interface for all closed shapes. </para>
            </summary>
            <remarks>
            <para>Base interface for all closed shapes. </para>
            </remarks>
        </member>
        <member name="T:Cognex.Vision.Rectangle">
            <summary>
            <para>Class that represents a rectangle. </para>
            </summary>
            <remarks>
            <para>Interface that describes a rectangle shape. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <remarks>
            <para>The default-constructed rectangle has its (x,y) coordinates set to (20,20) and its height and width each set to 100, </para>
            </remarks>
        </member>
        <member name="E:Cognex.Vision.Rectangle.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Rectangle.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Rectangle.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Rectangle.Area">
            <summary>
            <para>Area of this <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>. </para>
            </summary>
            <remarks>
            <para>Returns the area of this <see cref="T:Cognex.Vision.Rectangle">Rectangle</see> in units specified by the <see cref="P:Cognex.Vision.Rectangle.SelectedSpaceName">selected coordinate space</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Rectangle.CenterX">
            <summary>
            <para>Center X coordinate of this rectangle. </para>
            </summary>
            <remarks>
            <para>Gets the x-coordinate of the center of this rectangle. To set the center of the rectangle use <see cref="M:Cognex.Vision.Rectangle.SetCenterWidthHeight(System.Double,System.Double,System.Double,System.Double)">SetCenterWidthHeight()</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Rectangle.CenterY">
            <summary>
            <para>Center Y coordinate of this rectangle. </para>
            </summary>
            <remarks>
            <para>Gets the y-coordinate of the center of this rectangle. To set the center of the rectangle use <see cref="M:Cognex.Vision.Rectangle.SetCenterWidthHeight(System.Double,System.Double,System.Double,System.Double)">SetCenterWidthHeight()</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Rectangle.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.RectangleDOFConstants">interactive degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Rectangle.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Rectangle.Height">
            <summary>
            <b>Get</b>
            <para>Height of this rectangle. </para>
            </summary>
            <value>
            <b>Default Value: </b> 100</value>
            <remarks>
            <para>The height of this rectangle. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Rectangle.Height">Height</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">New height is &lt;= 0. </exception>
        </member>
        <member name="P:Cognex.Vision.Rectangle.Perimeter">
            <summary>
            <para>Perimeter length of this CogRectangle. </para>
            </summary>
            <remarks>
            <para>Returns the perimeter of this <see cref="T:Cognex.Vision.Rectangle">Rectangle</see> in units specified by the <see cref="P:Cognex.Vision.Rectangle.SelectedSpaceName">selected coordinate space</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Rectangle.Width">
            <summary>
            <b>Get</b>
            <para>Width of this rectangle. </para>
            </summary>
            <value>
            <b>Default Value: </b> 100</value>
            <remarks>
            <para>The width of this rectangle. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Rectangle.Width">Width</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">New width is &lt;= 0. </exception>
        </member>
        <member name="P:Cognex.Vision.Rectangle.X">
            <summary>
            <b>Get</b>
            <para>Minimum X coordinate of this rectangle. </para>
            </summary>
            <value>
            <b>Default Value: </b> 20</value>
            <remarks>
            <para>Returns the smallest x-coordinate of this rectangle. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Rectangle.X">X</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Rectangle.Y">
            <summary>
            <b>Get</b>
            <para>Minimum Y coordinate of this rectangle. </para>
            </summary>
            <value>
            <b>Default Value: </b> 20</value>
            <remarks>
            <para>Returns the smallest y-coordinate of this rectangle. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Rectangle.Y">Y</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Rectangle.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Rectangle.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Rectangle.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Rectangle.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Rectangle.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Rectangle.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Rectangle.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Rectangle.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Rectangle.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Rectangle.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.Rectangle.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Rectangle.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Rectangle.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Rectangle.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Rectangle.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Rectangle.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Rectangle.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Rectangle.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.Rectangle.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Rectangle.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new shape that copies specified parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.Rectangle">Rectangle</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.Rectangle">Rectangle</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.Dilate(Cognex.Vision.Rectangle,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates a new rectangle which is the dilation of this by <b>other</b>. </para>
            </summary>
            <param name="other">The rectangle used to dilate this rectangle. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The dilated rectangle. </para>
            </returns>
            <remarks>
            <para>Creates a new rectangle that is the result of dilating this rectangle with another rectangle. The dilated rectangle is the area occupied by <b>other</b> as its origin traces the perimeter of this rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.Erode(Cognex.Vision.Rectangle,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates a new rectangle which is the erosion of this by Other. </para>
            </summary>
            <param name="other">The rectangle used to erode this rectangle. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The eroded rectangle. </para>
            </returns>
            <remarks>
            <para>Creates a new rectangle that is the result of eroding this rectangle with another rectangle. The eroded rectangle is the result of tracing <b>other</b> 's origin point as it occupies every possible point within this rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.GetCenterWidthHeight(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Retrieve CenterX,CenterY,Width,Height parameterization. </para>
            </summary>
            <param name="centerX">The x-coordinate of the center of the rectangle. </param>
            <param name="centerY">The y-coordinate of the center of the rectangle </param>
            <param name="width">The width of the rectangle. </param>
            <param name="height">The height of the rectangle. </param>
            <remarks>
            <para>Returns the x- and y-coordinates of the center and the width and height of this rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Rectangle.GetXYWidthHeight(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Retrieve X,Y,Width,Height parameterization. </para>
            </summary>
            <param name="x">The x-coordinate of the top left corner of the rectangle. </param>
            <param name="y">The y-coordinate of the top left corner of the rectangle </param>
            <param name="width">The width of the rectangle. </param>
            <param name="height">The height of the rectangle. </param>
            <remarks>
            <para>Returns the x- and y-coordinates and the width and height of this rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.Intersect(Cognex.Vision.Rectangle,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Compute the intersection with Other. </para>
            </summary>
            <param name="other">The intersecting rectangle. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The intersection of this rectangle with <b>other</b> This rectangle and <b>other</b> do not intersect. </para>
            </returns>
            <remarks>
            <para>Return a rectangle that is the intersection of this rectangle with another. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Map through a linear transform. </para>
            </summary>
            <param name="transform">The <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> used to map this <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>. </para>
            </returns>
            <remarks>
            <para>Create a new rectangle that is the result of mapping this rectangle using a linear transformation. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.SetCenterWidthHeight(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Initialize from CenterX,CenterY,Width,Height. </para>
            </summary>
            <param name="centerX">The x-coordinate of the center of the rectangle </param>
            <param name="centerY">The y-coordinate of the center of the rectangle </param>
            <param name="width">The width of the rectangle. </param>
            <param name="height">The height of the rectangle. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the rectangle geometry changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>width</b> is &lt;= 0 or <b>height</b> is &lt;= 0. </exception>
            <remarks>
            <para>Sets the x- and y-coordinates of the center and the width and height of this rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.SetXYWidthHeight(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Initialize from X,Y,Width,Height. </para>
            </summary>
            <param name="x">The x-coordinate of the top left corner of the rectangle </param>
            <param name="y">The y-coordinate of the top left corner of the rectangle </param>
            <param name="width">The width of the rectangle. </param>
            <param name="height">The height of the rectangle. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the rectangle geometry changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>width</b> is &lt;= 0 or <b>height</b> is &lt;= 0. </exception>
            <remarks>
            <para>Returns the x- and y-coordinates and the width and height of this rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.Union(Cognex.Vision.Rectangle,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates a new rectangle which is the union of this by Other. </para>
            </summary>
            <param name="other">The other rectangle. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of this rectangle to copy to the new rectangle. </param>
            <returns>
            <para>The union of this rectangle with <b>other</b>. </para>
            </returns>
            <remarks>
            <para>Creates a new rectangle which is the union of this by Other. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Rectangle.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Rectangle.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Rectangle.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Rectangle.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Rectangle.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Rectangle.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Rectangle.op_Equality(Cognex.Vision.Rectangle,Cognex.Vision.Rectangle)">
            <summary>Compares the equality of two Rectangle objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Rectangle.op_Inequality(Cognex.Vision.Rectangle,Cognex.Vision.Rectangle)">
            <summary>Compares the inequality of two Rectangle objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.IImage">
            <summary>
            <para>Interface that describes a rectangular array of pixels. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IImage.Allocated">
            <summary>
            <para>Whether there is pixel data associated with this image. </para>
            </summary>
            <returns>
            <para>True if pixel data is associated with this image, false otherwise. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.IImage.CoordinateSpaceTree">
            <summary>
            <b>Get</b>
            <para>Returns the tree of all named coordinate spaces for this image. The tree provides advanced functions for managing coordinate spaces. </para>
            </summary>
            <returns>
            <para> The <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> for a particular image. You can use this tree to create a transformation that maps points between coordinate spaces. To ensure that all acquired images have the same coordinate space tree, use your <see cref="!:Cognex.Vision.Acquisition.IAcqFifo">AcqFifo's</see>
            <see cref="!:Cognex.Vision.Acquisition.IAcqFifo.CoordinateSpaceTree">CoordinateSpaceTree</see> property instead. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets this image's <see cref="P:Cognex.Vision.IImage.CoordinateSpaceTree">CoordinateSpaceTree</see>. </para>
            </summary>
            <param name="newVal">The new <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> to use. </param>
        </member>
        <member name="P:Cognex.Vision.IImage.Height">
            <summary>
            <para>Height of the image. </para>
            </summary>
            <returns>
            <para>The height of this image in pixels. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.IImage.PixelFromRootTransform">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.ITransform2D">Transformation</see> that maps points into pixel space ("#") from the root space ("@"). </para>
            </summary>
            <returns>
            <para>The <see cref="T:Cognex.Vision.ITransform2D">transformation</see> that maps points into pixel space ("#") from the root space ("@"). </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IImage.PixelFromRootTransform">PixelFromRootTransform</see>. </para>
            </summary>
            <param name="newVal">The new <see cref="T:Cognex.Vision.ITransform2D">transformation</see> to be used. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">The transformation is NULL. </exception>
        </member>
        <member name="P:Cognex.Vision.IImage.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>The name of the default coordinate space to be used by tools which process this image. </para>
            </summary>
            <returns>
            <para>The name of the space in this image's <see cref="P:Cognex.Vision.IImage.CoordinateSpaceTree">CoordinateSpaceTree</see> to be used by tools that process this image. Vision defines <A href="../UsersGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-space-names-symbols.htm">special space names</A> for the root coordinate space ("@"), the pixel coordinate space ("#"), the screen coordinate space ("*"), as well as others. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets this image's <see cref="T:Cognex.Vision.IImage">SelectedSpaceName</see>. </para>
            </summary>
            <param name="newVal">The new <see cref="T:Cognex.Vision.IImage">SelectedSpaceName</see> to be used.</param>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>value</b> is not a valid space name. </exception>
        </member>
        <member name="P:Cognex.Vision.IImage.Width">
            <summary>
            <para>Width of the image. </para>
            </summary>
            <returns>
            <para>The width of this image in pixels. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.IImage.Allocate(System.Int32,System.Int32)">
            <summary>
            <para>Initialize the image with (undefined) pixel data of the given <b>width</b> and <b>height</b>. This method may not be called more than once. </para>
            </summary>
            <param name="width">The desired width of the image in pixels. </param>
            <param name="height">The desired height of the image in pixels. </param>
            <exception cref="T:Cognex.Vision.ImageException">The image is already allocated to a different size. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>width</b> or <b>height</b> is less than or equal to 0. </exception>
        </member>
        <member name="M:Cognex.Vision.IImage.CopyBase(Cognex.Vision.ImageCopyModeConstants)">
            <summary>
            <para>Create a copy of this image in a new image. Pixels may be shared between images by specifying <b>copyMode</b> as <see cref="T:Cognex.Vision.ImageCopyModeConstants">SharePixels</see>. </para>
            </summary>
            <param name="copyMode">The desired <see cref="T:Cognex.Vision.ImageCopyModeConstants">copy mode</see>. </param>
            <returns>
            <para>The new <see cref="T:Cognex.Vision.IImage">image</see>. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.IImage.GetTransform(System.String,System.String)">
            <summary>
            <para>Returns a transformation that maps points from the 'From' coordinate space to the 'To' space. </para>
            </summary>
            <param name="toSpaceName">The name of the coordinate space to transform the point to. The special string "." is accepted as an alias for the <see cref="P:Cognex.Vision.IImage.SelectedSpaceName">SelectedSpaceName</see> of this image. </param>
            <param name="fromSpaceName">The name of the coordinate space to transform the point from. The special string "." is accepted as an alias for the <see cref="P:Cognex.Vision.IImage.SelectedSpaceName">SelectedSpaceName</see> of this image. </param>
            <returns>
            <para>The <see cref="T:Cognex.Vision.ITransform2D">transformation</see> that maps a point from the <b>fromSpaceName</b> to the <b>toSpaceName</b>. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ImageException">The coordinate space tree is missing. </exception>
        </member>
        <member name="T:Cognex.Vision.CoordinateSpaceTree">
            <summary>
            <para>Tree of user coordinate spaces and the mappings between them. </para>
            </summary>
            <remarks>
            <para>
            <para>
            </para>
            <para>
            <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see>, the primary interface for a <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> object, implements functionality related to the <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-trees.htm">coordinate space tree</A> associated with each Vision image. In Vision, you can define and name your own coordinate spaces. Each time you calibrate an image or create a fixture, Vision creates a new, named <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-user-spaces.htm">user spaces</A>. Each user space is defined, relative to an existing space, by a two-dimensional transform. The coordinate space tree contains a node for each coordinate space associated with an image, and maintains information about the transform that produced it. Vision also maintains a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-root-space.htm">root space</A> based on the pixels in the acquired image. The methods and properties in this interface let you obtain the <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-transformations.htm">transformations</A> that map points between any pair of coordinate spaces in the space tree. They also allow you to examine, add to, or rearrange the space tree. Many of the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> methods use a client-specified coordinate space name to find a coordinate space within the tree. You can supply any valid <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-space-names-nq-space-names.htm">nonqualified (NQ)</A> or <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-space-names-fq-space-names.htm">fully-qualified (FQ)</A> pathname. If you supply a NQ name, the method searches the coordinate space tree for instances of that name. The NQ name must occur exactly once within the tree. In addition, several methods return one or more coordinate space names. You can control the format (nonqualified, partially-qualified, or fully-qualified) of the returned names by supplying a <see cref="T:Cognex.Vision.SpaceTreePathnameConstants">SpaceTreePathnameConstants</see> value. If a partially-qualified (PQ) name is returned, it begins with either "." or "..", and specifies a space relative to the given space name. </para>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.CoordinateSpaceTree.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.CoordinateSpaceTree.NameChanged">
            <summary>
            <para>Occurs after a space name is changed in this tree. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.CoordinateSpaceTree.SpaceAdded">
            <summary>
            <para>Occurs after a new space is added to this tree. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.CoordinateSpaceTree.SubtreeDeleted">
            <summary>
            <para>Occurs after a subtree is deleted from this tree. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.CoordinateSpaceTree.SubtreeMoved">
            <summary>
            <para>Occurs after a subtree is moved within this tree. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.CoordinateSpaceTree.TransformChanged">
            <summary>
            <para>Occurs after a transform is changed in this tree. Note that the meaning of any spaces descending from the changed transform will also be altered. This event can be raised in a variety of ways. For example: (1) by a call to <see cref="M:Cognex.Vision.CoordinateSpaceTree.ChangeTransform(System.String,Cognex.Vision.ITransform2D,System.Boolean)">ChangeTransform</see>, (2) by a call to the <see cref="M:Cognex.Vision.CoordinateSpaceTree.AddSpace(System.String,System.String,Cognex.Vision.ITransform2D,System.Boolean,Cognex.Vision.AddSpaceConstants)">AddSpace</see> method that replaces an existing transform, (3) by modifying a transform that was added to the tree by reference (not copied). </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.CoordinateSpaceTree.TreeAdded">
            <summary>
            <para>Occurs after a new tree is added to this tree. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateSpaceTree.RootName">
            <summary>
            <b>Get</b>
            <para>Returns/sets the name of the root coordinate space in this tree. </para>
            </summary>
            <remarks>
            <para>
            </para>
            </remarks> Returns or sets the root coordinate space name for this tree. The new space name must meet the syntactic requirements of a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">nonqualified coordinate space name</A> , with the exception that you may begin the name with any non-slash punctuation character. <b>Note</b>
            <para>
            <para>Do <b>not</b> change the root name of a tree attached to an image. Any tree that is or will be attached to an image must have a <see cref="P:Cognex.Vision.CoordinateSpaceTree.RootName">RootName</see> value of "@" for Vision to function properly.</para>
            </para>
            <value>
            <b>Default Value: </b> @ (root space) </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateSpaceTree.RootName">RootName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="!:Cognex.Vision.CoordinateSpaceTree.NameChangedEvent">NameChangedEvent</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.SpaceTreeException">The new name is not a valid root space name. </exception>
        </member>
        <member name="P:Cognex.Vision.CoordinateSpaceTree.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.AddSpace(System.String,System.String,Cognex.Vision.ITransform2D,System.Boolean,Cognex.Vision.AddSpaceConstants)">
            <summary>
            <para>Add a new coordinate space, with the given name and transform, to this tree. Attach it to the specified pre-existing parent space. </para>
            </summary>
            <param name="parentSpaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> that indicates the parent space. </param>
            <param name="newSpaceName">A valid nonqualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> for the user coordinate space to add. </param>
            <param name="parentFromNew">A <see cref="T:Cognex.Vision.ITransform2D">transform</see> that maps points from the space you are adding to the parent user space. </param>
            <param name="copyTransform">If True, <see cref="M:Cognex.Vision.CoordinateSpaceTree.AddSpace(System.String,System.String,Cognex.Vision.ITransform2D,System.Boolean,Cognex.Vision.AddSpaceConstants)">AddSpace</see> adds a copy of the transform to the tree; if False, a reference to the transform is added. <b>
            </b>. defaults to True. </param>
            <param name="duplicateHandling">An <see cref="T:Cognex.Vision.AddSpaceConstants">AddSpaceConstants</see> value that specifies what do if the parent coordinate space already contains an immediate child with the same name as <b>newSpaceName</b>. The options are to return an error, replace the transform of the named child, or do nothing. <b>
            </b>. defaults to <see cref="T:Cognex.Vision.AddSpaceConstants">DuplicateIsError</see> : it treats a duplicate as an error. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.CoordinateSpaceTree.SpaceAdded">SpaceAdded</see> Raised when a space is added to the tree.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>newSpaceName</b> is not a valid nonqualified name. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>parentFromNew</b> is NULL. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>duplicateHandling</b> value is not a member of <see cref="T:Cognex.Vision.AddSpaceConstants">AddSpaceConstants</see>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">Both <b>newSpaceName</b> is a child of the parent space and <b>duplicateHandling</b> is set to <see cref="T:Cognex.Vision.AddSpaceConstants">DuplicateIsError</see>.</exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>parentSpaceName</b> value is not a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">legal space name</A>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>parentSpaceName</b> is a nonqualified space name and more than one instance of it exists in this tree. </exception>
            <remarks>
            <para>Adds a new user coordinate space to a <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> object. You must specify the name of the parent space for the newly added space, and supply a transformation that defines the relationship between the parent space and the new space. To indicate that the parent space is the root space, use the name syntax "@"; to indicate that the current selected space is the parent space, use "." as the name syntax. By default, <see cref="M:Cognex.Vision.CoordinateSpaceTree.AddSpace(System.String,System.String,Cognex.Vision.ITransform2D,System.Boolean,Cognex.Vision.AddSpaceConstants)">AddSpace</see> saves a copy of the supplied transform. You can also add the transform by-reference. Although this is more efficient, it may result in errors for users who unknowingly continue to modify the original transform object. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.AddTree(System.String,Cognex.Vision.CoordinateSpaceTree,Cognex.Vision.ITransform2D,System.Boolean,Cognex.Vision.AddSpaceConstants)">
            <summary>
            <para>Add a tree of coordinate spaces to the given ParentSpaceName of this tree using the supplied ParentFromTreeRoot transform. The tree is added by reference, so any changes to it will be visible to clients of both trees. </para>
            </summary>
            <param name="parentSpaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> that indicates the parent space. </param>
            <param name="treeToAdd">The coordinate space tree to add to the given <b>parentSpaceName</b>. </param>
            <param name="parentFromTreeRoot">An <see cref="T:Cognex.Vision.ITransform2D">ITransform2D</see> that transforms points from the root of the space tree you are adding to the parent space. </param>
            <param name="copyTransform">If True, <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> adds a copy of the transform to the tree; if False, a reference to the transform is added. <b>
            </b>. defaults to True. </param>
            <param name="duplicateHandling">A <see cref="T:Cognex.Vision.AddSpaceConstants">AddSpaceConstants</see> value that specifies what do if the parent coordinate space already contains an immediate child with the same name as the root of <b>treeToAdd</b>. The options are to return an error, replace the named child with the given tree, or do nothing. <b>
            </b>. defaults to <see cref="T:Cognex.Vision.AddSpaceConstants">DuplicateIsError</see> : it treats a duplicate as an error. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.CoordinateSpaceTree.TreeAdded">TreeAdded</see> Raised when a tree is added to this tree.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>treeToAdd</b> or <b>parentFromTreeRoot</b> is NULL. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>duplicateHandling</b> value is not a member of <see cref="T:Cognex.Vision.AddSpaceConstants">AddSpaceConstants</see>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>NewSpaceName</b> is a child of the parent space <b>and</b>
            <b>duplicateHandling</b> is set to <see cref="T:Cognex.Vision.AddSpaceConstants">DuplicateIsError</see>.</exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>parentSpaceName</b> value is not a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">legal space name</A>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>parentSpaceName</b> is a nonqualified space name and more than one instance of it exists in this tree. </exception>
            <remarks>
            <para>Adds a tree of coordinate spaces to the given parent space name of this tree. You must also supply a transformation that defines the relationship between the parent space and the root of the new spaces. By default, <see cref="M:Cognex.Vision.CoordinateSpaceTree.AddTree(System.String,Cognex.Vision.CoordinateSpaceTree,Cognex.Vision.ITransform2D,System.Boolean,Cognex.Vision.AddSpaceConstants)">AddTree</see> saves a copy of the supplied transform. You can also add the transform by-reference. Although this is more efficient, it may result in errors for users who unknowingly continue to modify the original transform object. Trees are added by-reference. If you copy the parent tree, the copy contains an additional reference to the supplied tree. You must avoid creating new trees that contain circular references to other coordinate space trees. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.AllChildNames(System.String,Cognex.Vision.SpaceTreePathnameConstants,System.Boolean)">
            <summary>
            <para>Returns a collection of names that recursively includes all the children, grandchildren, great-grandchildren, etc. of the given space. If there are no children, the collection will hold zero items. </para>
            </summary>
            <param name="spaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> to find in this coordinate space tree. </param>
            <param name="pathnameFormat">A <see cref="T:Cognex.Vision.SpaceTreePathnameConstants">SpaceTreePathnameConstants</see> value that indicates how the returned name should be formatted. </param>
            <param name="childrenOnly">If False, the supplied space name is included as a separate item in the returned collection of space names. If True, does not appear as a collection item. </param>
            <returns>
            <para>A collection that contains a recursive listing of the child coordinate space names of the given space name. If no children exist, the collection has no items. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>pathnameFormat</b> value is not a member of <see cref="T:Cognex.Vision.SpaceTreePathnameConstants">SpaceTreePathnameConstants</see>.</exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> value is not a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">legal space name</A>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> is a nonqualified space name and more than one instance of it exists in this tree. </exception>
            <remarks>
            <para>Returns a collection of names that includes all the descendants of the given space. If no children exist and <b>childrenOnly</b> is true, the collection has no items. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.ChangeName(System.String,System.String)">
            <summary>
            <para>Change the given space name to NewSpaceName. </para>
            </summary>
            <param name="spaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> to change. This space must exist in this <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see>. </param>
            <param name="newSpaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> for the new coordinate space.</param>
            <remarks>
            <para>
            <see cref="!:Cognex.Vision.CoordinateSpaceTree.NameChangedEvent">NameChangedEvent</see> Raised when a space name changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>newSpaceName</b> or <b>spaceName</b> is not a [valid space name]. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>newSpaceName</b> is already the name of a child of <b>spaceName</b> 's parent space. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> is a nonqualified space name and more than one instance of it exists in this tree.</exception>
            <remarks>
            <para>
            <para>Change the <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">name</A> of a space in this tree. If the given space name is a fully-qualified pathname, <see cref="M:Cognex.Vision.CoordinateSpaceTree.ChangeName(System.String,System.String)">ChangeName</see> modifies only the trailing nonqualified name. The new space name must meet the syntactical requirements of nonqualified or fully-qualified space names.</para>
            <para>If you want to modify the root name, the <see cref="P:Cognex.Vision.CoordinateSpaceTree.RootName">RootName</see> property permits less restrictive space names. </para>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.ChangeTransform(System.String,Cognex.Vision.ITransform2D,System.Boolean)">
            <summary>
            <para>Change the transform which maps points from the given child space into its parent space. The new transform is given by NewParentFromChild. </para>
            </summary>
            <param name="childSpaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> that indicates the coordinate space to modify. </param>
            <param name="newParentFromChild">An <see cref="T:Cognex.Vision.ITransform2D">ITransform2D</see> that maps points from the space you are changing to its parent user space. </param>
            <param name="copyTransform">If True, <see cref="M:Cognex.Vision.CoordinateSpaceTree.ChangeTransform(System.String,Cognex.Vision.ITransform2D,System.Boolean)">ChangeTransform</see> saves a copy of the supplied transform. Otherwise, the transform is added by-reference. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.CoordinateSpaceTree.TransformChanged">TransformChanged</see> Raised when a transform in this tree changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>newParentFromChild</b> is NULL. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>childSpaceName</b> is the root space.</exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>childSpaceName</b> value is not a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">legal space name</A>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>childSpaceName</b> is a nonqualified space name and more than one instance of it exists in this tree. </exception>
            <remarks>
            <para>Changes the transform that maps points from the given child space name into its parent space. By default, <see cref="M:Cognex.Vision.CoordinateSpaceTree.ChangeTransform(System.String,Cognex.Vision.ITransform2D,System.Boolean)">ChangeTransform</see> saves a copy of the supplied transform. You can also add the transform by-reference. Although this is more efficient, it may result in errors for users who unknowingly continue to modify the original transform object. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.ChildNames(System.String,Cognex.Vision.SpaceTreePathnameConstants)">
            <summary>
            <para>Returns a collection of names containing the given space's immediate children. If there are no children, the collection will hold zero items. </para>
            </summary>
            <param name="spaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> to find in this coordinate space tree. </param>
            <param name="pathnameFormat">A <see cref="T:Cognex.Vision.SpaceTreePathnameConstants">SpaceTreePathnameConstants</see> value that indicates how the returned name should be formatted.</param>
            <returns>
            <para>A collection of child space names, or an empty collection if no child spaces exist for the given coordinate space name.</para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>pathnameFormat</b> value is not a member of <see cref="T:Cognex.Vision.SpaceTreePathnameConstants">SpaceTreePathnameConstants</see>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">[legal space name]:../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm <b>spaceName</b> value is not a [legal space name]. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> is a nonqualified space name and more than one instance of it exists in this tree.</exception>
            <remarks>
            <para>Returns a collection of names containing the given space's immediate children. If no children exist, the collection will hold zero items. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.CopySubtree(System.String)">
            <summary>
            <para>Return a copy of the subtree rooted at SpaceName. </para>
            </summary>
            <param name="spaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> that indicates the root space of the subtree to copy. </param>
            <returns>
            <para>The copied coordinate space subtree.</para>
            </returns>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> value is not a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">legal space name</A>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> is a nonqualified space name and more than one instance of it exists in this tree. </exception>
            <remarks>
            <para>Returns a copy of the subtree rooted at the given space name. <see cref="M:Cognex.Vision.CoordinateSpaceTree.CopySubtree(System.String)">CopySubtree</see> does not perform a deep copy of trees embedded using the <see cref="M:Cognex.Vision.CoordinateSpaceTree.AddTree(System.String,Cognex.Vision.CoordinateSpaceTree,Cognex.Vision.ITransform2D,System.Boolean,Cognex.Vision.AddSpaceConstants)">AddTree</see> method. Instead, it creates an additional reference. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.CopyTree">
            <summary>
            <para>Return a copy of this entire tree. </para>
            </summary>
            <returns>
            <para>A copy of this tree. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.DeleteSubtree(System.String)">
            <summary>
            <para>Delete the subtree rooted at SpaceName. SpaceName and all of its children will be recursively removed from tree. </para>
            </summary>
            <param name="spaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> that indicates the root space of the tree to delete. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.CoordinateSpaceTree.SubtreeDeleted">SubtreeDeleted</see> Raised when a subtree is deleted from this tree.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>spaceName</b> cannot be the root space.</exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> value is not a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">legal space name</A>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> is a nonqualified space name and more than one instance of it exists in this tree. </exception>
            <remarks>
            <para>Deletes the subtree rooted at the given space name. All children of the space are recursively removed from the tree. If <see cref="M:Cognex.Vision.CoordinateSpaceTree.DeleteSubtree(System.String)">DeleteSubtree</see> encounters the root node of a tree embedded using the <see cref="M:Cognex.Vision.CoordinateSpaceTree.AddTree(System.String,Cognex.Vision.CoordinateSpaceTree,Cognex.Vision.ITransform2D,System.Boolean,Cognex.Vision.AddSpaceConstants)">AddTree</see> method, it unlinks the embedded tree, and other clients of that tree can continue to use it. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.FindNames(System.String)">
            <summary>
            <para>Find the given SpaceName in this tree and return a collection containing the fully-qualified pathname(s) that are found. The collection may contain zero, one, or more items. </para>
            </summary>
            <param name="spaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> to find. </param>
            <returns>
            <para>A collection of space names; or an empty collection if the given name does not exist in the tree.</para>
            </returns>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> value is not a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">legal space name</A>. </exception>
            <remarks>
            <para>Finds the given coordinate space name in this tree and returns a collection containing zero or more fully-qualified pathnames that are found. The returned collection contains more than one space name only if the given <b>spaceName</b> is nonqualified and exists at multiple locations within the coordinate space tree. You can use <see cref="M:Cognex.Vision.CoordinateSpaceTree.FindNames(System.String)">FindNames</see> to determine if a space name is valid and exists in this tree, or to convert a nonqualified space name to one or more fully-qualified space names. <see cref="M:Cognex.Vision.CoordinateSpaceTree.FindNames(System.String)">FindNames</see> is similar to <see cref="M:Cognex.Vision.CoordinateSpaceTree.LookUpName(System.String,Cognex.Vision.SpaceTreePathnameConstants)">LookUpName</see>, but it does not generate an error if the given space name exists more than once in the tree or does not exist. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.GetTransform(System.String,System.String)">
            <summary>
            <para>Return a composed transform which can map points from the 'From' coordinate space to the 'To' space. </para>
            </summary>
            <param name="toSpaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> that indicates the coordinate space to which to map points.</param>
            <param name="fromSpaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A>. This name indicates the coordinate space from which to map points into the <b>toSpaceName</b>. </param>
            <returns>
            <para>The resulting <see cref="T:Cognex.Vision.ITransform2D">ITransform2D</see>.</para>
            </returns>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>toSpaceName</b> or <b>fromSpaceName</b> value is not a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">legal space name</A>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>toSpaceName</b> or <b>fromSpaceName</b> is a nonqualified space name and more than one instance of it exists in this tree. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">The space name does not exist in this tree. </exception>
            <remarks>
            <para>Returns a composed <see cref="T:Cognex.Vision.ITransform2D">ITransform2D</see> that maps points from one coordinate space to another. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.LookUpName(System.String,Cognex.Vision.SpaceTreePathnameConstants)">
            <summary>
            <para>Look up the given SpaceName in this tree and, if found, returns an appropriately formatted copy of the name. </para>
            </summary>
            <param name="spaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> to find in this coordinate space tree. </param>
            <param name="pathnameFormat">A <see cref="T:Cognex.Vision.SpaceTreePathnameConstants">SpaceTreePathnameConstants</see> value that indicates how the returned name should be formatted. </param>
            <returns>
            <para>The formatted space name. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>pathnameFormat</b> value is not a member of <see cref="T:Cognex.Vision.SpaceTreePathnameConstants">SpaceTreePathnameConstants</see>.</exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> value is not a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">legal space name</A>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> is a nonqualified space name and more than one instance of it exists in this tree. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> does not exist in this tree. </exception>
            <remarks>
            <para>Looks up the given coordinate space name in this tree and, if found, returns an appropriately formatted copy of the name. You can use <see cref="M:Cognex.Vision.CoordinateSpaceTree.LookUpName(System.String,Cognex.Vision.SpaceTreePathnameConstants)">LookUpName</see> to verify that a given space name is valid and exists in the tree. This method is similar to <see cref="M:Cognex.Vision.CoordinateSpaceTree.FindNames(System.String)">FindNames</see>, except that it requires that only one instance of the name exist in the tree. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.MoveSubtree(System.String,System.String,Cognex.Vision.AddSpaceConstants)">
            <summary>
            <para>Move the subtree rooted at SpaceName and attach it to the NewParentSpaceName, using SpaceName's existing parent transform. </para>
            </summary>
            <param name="spaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> that indicates the root space of the subtree to move. </param>
            <param name="newParentSpaceName">The valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> of the parent space to which to append the subtree. </param>
            <param name="duplicateHandling">A <see cref="T:Cognex.Vision.AddSpaceConstants">AddSpaceConstants</see> value that specifies what do if the parent coordinate space contains an immediate child with the same name as <b>spaceName</b>. The options are to return an error, replace the named child with the copied subtree, or do nothing. <b>duplicateHandling</b> defaults to <see cref="T:Cognex.Vision.AddSpaceConstants">DuplicateIsError</see> : it treats a duplicate as an error. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.CoordinateSpaceTree.SubtreeMoved">SubtreeMoved</see> Raised when a subtree is moved within this tree.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>spaceName</b> cannot be the root space. <b>NewSpaceName</b> cannot be a descendant of <b>spaceName</b>. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The <b>duplicateHandling</b> value is not a member of <see cref="T:Cognex.Vision.AddSpaceConstants">AddSpaceConstants</see>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> is already a child of the <b>NewParentSpace</b>
            <b>and</b> the <b>duplicateHandling</b> argument is <see cref="T:Cognex.Vision.AddSpaceConstants">DuplicateIsError</see>.</exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> or <b>NewSpaceName</b> value is not a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">legal space name</A>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> or <b>NewSpaceName</b> is a nonqualified space name and more than one instance of it exists in this tree. </exception>
            <remarks>
            <para>Moves the subtree rooted at the given space name to the new parent space name. Attaches the given space name using its existing parent transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.ParentName(System.String,Cognex.Vision.SpaceTreePathnameConstants)">
            <summary>
            <para>Returns the name of the given space's parent. The parent name for the root space is the empty name ("") because the root space has no parent. </para>
            </summary>
            <param name="spaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> to find in this coordinate space tree. </param>
            <param name="pathnameFormat">A <see cref="T:Cognex.Vision.SpaceTreePathnameConstants">SpaceTreePathnameConstants</see> value that indicates how the returned name should be formatted. </param>
            <returns>
            <para>The parent space name. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>pathnameFormat</b> value is not a member of <see cref="T:Cognex.Vision.SpaceTreePathnameConstants">SpaceTreePathnameConstants</see>.</exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> value is not a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">legal space name</A>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> is a nonqualified space name and more than one instance of it exists in this tree. </exception>
            <remarks>
            <para>Returns the name of the given space's parent. Because the root space has no parent, its parent space name is the empty name string "". </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.ResolvePartialName(System.String,System.String)">
            <summary>
            <para>Use the given StartingSpaceName to resolve any ambiguity in NameToResolve, and return a name suitable for lookup in this tree. Note that a partial name, like ".", is ambiguous without a specified starting space. </para>
            </summary>
            <param name="startingSpaceName">The starting space name used to resolve <b>nameToResolve</b> , if it is a partially-qualified coordinate space name. </param>
            <param name="nameToResolve">The coordinate space name to resolve. If <b>
            </b>. is a partially-qualified name, <see cref="M:Cognex.Vision.CoordinateSpaceTree.ResolvePartialName(System.String,System.String)">ResolvePartialName</see> resolves it by using the <b>startingSpaceName</b> value. Otherwise, <see cref="M:Cognex.Vision.CoordinateSpaceTree.ResolvePartialName(System.String,System.String)">ResolvePartialName</see> ignores <b>startingSpaceName</b> and returns a copy of the original name.</param>
            <returns>
            <para>
            <b>nameToResolve</b> as a nonqualified or fully-qualified pathname.</para>
            </returns>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>startingSpaceName</b> value is not a [legal space name]. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>startingSpaceName</b> is a nonqualified space name and more than one instance of it exists in this tree.</exception>
            <remarks>
            <para>
            <para>Uses the given <b>startingSpaceName</b> to resolve any ambiguity in</para>
            <para>
            <b>nameToResolve</b> , and returns a name suitable for lookup in this tree. Note that a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-space-names-pq-space-names.htm">partial name</A> , such as ".", is ambiguous without a specified starting space name. This is the only method that can accept partially-qualified space names. </para>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.VerifyChild(System.String,System.String,Cognex.Vision.SpaceTreePathnameConstants,System.Boolean,System.String@)">
            <summary>
            <para>Return true if the given ChildSpaceName is a direct or indirect child of ParentSpaceName. Otherwise, return false. The formatted child name, or "", can be obtained through the optional FoundChildName argument. </para>
            </summary>
            <param name="parentSpaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">name</A> that indicates the parent space. </param>
            <param name="childSpaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">name</A> that indicates the child space to verify. </param>
            <param name="pathnameFormat">A <see cref="T:Cognex.Vision.SpaceTreePathnameConstants">SpaceTreePathnameConstants</see> value that indicates how the returned name should be formatted. </param>
            <param name="childrenOnly">If False, the parent space is considered a valid descendant of itself, which allows you to find space names that are at or descended from the given parent space name. If True, the parent space is not a valid descendant of itself. </param>
            <param name="foundChildName">If <see cref="M:Cognex.Vision.CoordinateSpaceTree.VerifyChild(System.String,System.String,Cognex.Vision.SpaceTreePathnameConstants,System.Boolean,System.String@)">VerifyChild</see> returns True, <b>foundChildName</b> contains the formatted child space name. Otherwise, it contains "". </param>
            <returns>
            <para>True if the given <b>childSpaceName</b> is a descendant of <b>parentSpaceName</b> ; otherwise, False. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>pathnameFormat</b> value is not a member of <see cref="T:Cognex.Vision.SpaceTreePathnameConstants">SpaceTreePathnameConstants</see>.</exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>parentSpaceName</b> or <b>childSpaceName</b> value is not a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">legal space name</A>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>parentSpaceName</b> or <b>childSpaceName</b> is a nonqualified space name and more than one instance of it exists in this tree. </exception>
            <remarks>
            <para>Returns True if the given <b>childSpaceName</b> is a descendant of <b>parentSpaceName</b>. Otherwise, returns False. Both spaces must exist in the tree. By default, a coordinate space is considered to be a child only if it is a descendant of the given parent space. In some applications, however, you may need to test whether a space is a descendant of the given parent <b>or</b> is the parent space itself. To do this, set the optional <b>childrenOnly</b> parameter to False. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.VerifyName(System.String,Cognex.Vision.SpaceTreePathnameConstants,System.String@)">
            <summary>
            <para>Return true if the given SpaceName is a unique name in this tree. Return false if SpaceName cannot be found. The formatted name, or "", can be obtained through the optional FoundName argument. </para>
            </summary>
            <param name="spaceName">A valid nonqualified or fully-qualified <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">space name</A> to find in this coordinate space tree. </param>
            <param name="pathnameFormat">A <see cref="T:Cognex.Vision.SpaceTreePathnameConstants">SpaceTreePathnameConstants</see> value that indicates how the returned name should be formatted. </param>
            <param name="foundName">An optional parameter through which you can obtain the space name, formatted according to the <b>pathnameFormat</b> setting. If <see cref="M:Cognex.Vision.CoordinateSpaceTree.VerifyName(System.String,Cognex.Vision.SpaceTreePathnameConstants,System.String@)">VerifyName</see> returns False, <b>foundName</b> contains "". </param>
            <returns>
            <para>True if the given <b>spaceName</b> is unique. False if the name is not found in the tree. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>pathnameFormat</b> value is not a member of <see cref="T:Cognex.Vision.SpaceTreePathnameConstants">SpaceTreePathnameConstants</see>.</exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> value is not a <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-names.htm">legal space name</A>. </exception>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>spaceName</b> is a nonqualified space name and more than one instance of it exists in this tree. </exception>
            <remarks>
            <para>You can use <see cref="M:Cognex.Vision.CoordinateSpaceTree.VerifyName(System.String,Cognex.Vision.SpaceTreePathnameConstants,System.String@)">VerifyName</see> to verify that a given space name is legal and exists in the coordinate space tree. It returns true if the given <b>spaceName</b> is a unique name in this tree; false if <b>spaceName</b> cannot be found. <see cref="M:Cognex.Vision.CoordinateSpaceTree.VerifyName(System.String,Cognex.Vision.SpaceTreePathnameConstants,System.String@)">VerifyName</see> is similar to <see cref="M:Cognex.Vision.CoordinateSpaceTree.LookUpName(System.String,Cognex.Vision.SpaceTreePathnameConstants)">LookUpName</see>, however it does not generate an error if the specified <b>spaceName</b> does not exist in the tree. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.op_Equality(Cognex.Vision.CoordinateSpaceTree,Cognex.Vision.CoordinateSpaceTree)">
            <summary>Compares the equality of two CoordinateSpaceTree objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceTree.op_Inequality(Cognex.Vision.CoordinateSpaceTree,Cognex.Vision.CoordinateSpaceTree)">
            <summary>Compares the inequality of two CoordinateSpaceTree objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.NameChangeEventArgs">
            <summary>
            <para>This class provides data for the NameChanged event of a <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.NameChangeEventArgs.#ctor(System.String,System.String)">
            <summary>
            <para>Constructor for these <see cref="T:Cognex.Vision.EventArgs">EventArgs</see>. You typically will not need to use this method. </para>
            </summary>
            <param name="oldSpaceName">The old space name. </param>
            <param name="newSpaceName">The new space name. </param>
        </member>
        <member name="P:Cognex.Vision.NameChangeEventArgs.NewSpaceName">
            <summary>
            <para>The new, fully-qualified pathname of the coordinate space. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.NameChangeEventArgs.OldSpaceName">
            <summary>
            <para>The old, fully-qualified pathname of the coordinate space. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.NameChangeEventArgs.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.NameChangeEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.NameChangeEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.NameChangeEventArgs.op_Equality(Cognex.Vision.NameChangeEventArgs,Cognex.Vision.NameChangeEventArgs)">
            <summary>Compares the equality of two NameChangeEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.NameChangeEventArgs.op_Inequality(Cognex.Vision.NameChangeEventArgs,Cognex.Vision.NameChangeEventArgs)">
            <summary>Compares the inequality of two NameChangeEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.SpaceAddEventArgs">
            <summary>
            <para>This class provides data for the <see cref="E:Cognex.Vision.CoordinateSpaceTree.SpaceAdded">SpaceAdded</see> of a <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SpaceAddEventArgs.#ctor(System.String)">
            <summary>
            <para>Constructor for these <see cref="T:Cognex.Vision.EventArgs">EventArgs</see>. You typically will not need to use this method. </para>
            </summary>
            <param name="newSpaceName">The fully qualified pathname of the added coordinate space. </param>
        </member>
        <member name="P:Cognex.Vision.SpaceAddEventArgs.NewSpaceName">
            <summary>
            <para>The fully qualified pathname of the added coordinate space. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SpaceAddEventArgs.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SpaceAddEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.SpaceAddEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.SpaceAddEventArgs.op_Equality(Cognex.Vision.SpaceAddEventArgs,Cognex.Vision.SpaceAddEventArgs)">
            <summary>Compares the equality of two SpaceAddEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.SpaceAddEventArgs.op_Inequality(Cognex.Vision.SpaceAddEventArgs,Cognex.Vision.SpaceAddEventArgs)">
            <summary>Compares the inequality of two SpaceAddEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.SubtreeDeleteEventArgs">
            <summary>
            <para>This class provides data for the <see cref="E:Cognex.Vision.CoordinateSpaceTree.SubtreeDeleted">SubtreeDeleted</see> of a <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SubtreeDeleteEventArgs.#ctor(System.String)">
            <summary>
            <para>Constructor for these <see cref="T:Cognex.Vision.EventArgs">EventArgs</see>. You typically will not need to use this method. </para>
            </summary>
            <param name="oldSpaceName">The fully qualified pathname of the deleted subtree's root space. </param>
        </member>
        <member name="P:Cognex.Vision.SubtreeDeleteEventArgs.OldSpaceName">
            <summary>
            <para>The fully qualified pathname of the deleted subtree's root space. This space no longer exists in the coordinate space tree. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SubtreeDeleteEventArgs.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SubtreeDeleteEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.SubtreeDeleteEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.SubtreeDeleteEventArgs.op_Equality(Cognex.Vision.SubtreeDeleteEventArgs,Cognex.Vision.SubtreeDeleteEventArgs)">
            <summary>Compares the equality of two SubtreeDeleteEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.SubtreeDeleteEventArgs.op_Inequality(Cognex.Vision.SubtreeDeleteEventArgs,Cognex.Vision.SubtreeDeleteEventArgs)">
            <summary>Compares the inequality of two SubtreeDeleteEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.SubtreeMoveEventArgs">
            <summary>
            <para>This class provides data for the <see cref="E:Cognex.Vision.CoordinateSpaceTree.SubtreeMoved">SubtreeMoved</see> of a <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SubtreeMoveEventArgs.#ctor(System.String,System.String)">
            <summary>
            <para>Constructor for these <see cref="T:Cognex.Vision.EventArgs">EventArgs</see>. You typically will not need to use this method. </para>
            </summary>
            <param name="oldSpaceName">The old, fully qualified pathname of the subtree's root space </param>
            <param name="newSpaceName">The new, fully qualified pathname of the subtree's root space. </param>
        </member>
        <member name="P:Cognex.Vision.SubtreeMoveEventArgs.NewSpaceName">
            <summary>
            <para>The new, fullyqualified pathname of the subtree's root space. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.SubtreeMoveEventArgs.OldSpaceName">
            <summary>
            <para>The old, fully-qualified pathname of the subtree's root space. This space no longer exists in the coordinate space tree. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SubtreeMoveEventArgs.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SubtreeMoveEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.SubtreeMoveEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.SubtreeMoveEventArgs.op_Equality(Cognex.Vision.SubtreeMoveEventArgs,Cognex.Vision.SubtreeMoveEventArgs)">
            <summary>Compares the equality of two SubtreeMoveEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.SubtreeMoveEventArgs.op_Inequality(Cognex.Vision.SubtreeMoveEventArgs,Cognex.Vision.SubtreeMoveEventArgs)">
            <summary>Compares the inequality of two SubtreeMoveEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.TransformChangeEventArgs">
            <summary>
            <para>This class provides data for the <see cref="E:Cognex.Vision.CoordinateSpaceTree.TransformChanged">TransformChanged</see> of a <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.TransformChangeEventArgs.#ctor(System.String)">
            <summary>
            <para>Constructor for these <see cref="T:Cognex.Vision.EventArgs">EventArgs</see>. You typically will not need to use this method. </para>
            </summary>
            <param name="spaceName">The fully qualified pathname of the child space whose transform has changed. </param>
        </member>
        <member name="P:Cognex.Vision.TransformChangeEventArgs.SpaceName">
            <summary>
            <para>The fully qualified pathname of the child space whose transform has changed. The new transform describes the mapping between this space and its parent space. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.TransformChangeEventArgs.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.TransformChangeEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.TransformChangeEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.TransformChangeEventArgs.op_Equality(Cognex.Vision.TransformChangeEventArgs,Cognex.Vision.TransformChangeEventArgs)">
            <summary>Compares the equality of two TransformChangeEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.TransformChangeEventArgs.op_Inequality(Cognex.Vision.TransformChangeEventArgs,Cognex.Vision.TransformChangeEventArgs)">
            <summary>Compares the inequality of two TransformChangeEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.TreeAddEventArgs">
            <summary>
            <para>This class provides data for the <see cref="E:Cognex.Vision.CoordinateSpaceTree.TreeAdded">TreeAdded</see> of a <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.TreeAddEventArgs.#ctor(System.String)">
            <summary>
            <para>Constructor for these <see cref="T:Cognex.Vision.EventArgs">EventArgs</see>. You typically will not need to use this method. </para>
            </summary>
            <param name="newSpaceName">The fully qualified pathname of the added tree's root space. </param>
        </member>
        <member name="P:Cognex.Vision.TreeAddEventArgs.NewSpaceName">
            <summary>
            <para>The fully qualified pathname of the added tree's root space. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.TreeAddEventArgs.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.TreeAddEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.TreeAddEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.TreeAddEventArgs.op_Equality(Cognex.Vision.TreeAddEventArgs,Cognex.Vision.TreeAddEventArgs)">
            <summary>Compares the equality of two TreeAddEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.TreeAddEventArgs.op_Inequality(Cognex.Vision.TreeAddEventArgs,Cognex.Vision.TreeAddEventArgs)">
            <summary>Compares the inequality of two TreeAddEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.RectangleAffine">
            <summary>
            <para>Class that represents an affine rectangle. </para>
            </summary>
            <remarks>
            <para>Interface that describes an affine rectangle. An affine rectangle is a quadrilateral where the opposite sides are parallel. An affine rectangle can be specified by the locations of three of its vertices; by its center point, width, height, rotation, and skew angle; or by its origin point, width, height, rotation, and skew angle. The vertices of an affine rectangle are labeled as shown in the following figure:<pre> Py Popp ---------------- / / / / ---------------- Po Px </pre>
            <b>Po</b> is at the Corner point origin.<b>Popp</b> is the Corner point opposite.<b>Px</b> is the Corner point X.<b>Py</b> is the Corner point Y. Note that the corner points Px and Py denote the points that lie along the x- and y-axes. Each of these points has its own x- and y-coordinates. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.RectangleAffine.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleAffine.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleAffine.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.Area">
            <summary>
            <para>Area of this <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>. </para>
            </summary>
            <remarks>
            <para>Returns the area of this <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see> in units specified by the <see cref="P:Cognex.Vision.RectangleAffine.SelectedSpaceName">selected coordinate space</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.CenterX">
            <summary>
            <b>Get</b>
            <para>Center point (X coordinate) of this affine rectangle. </para>
            </summary>
            <remarks>
            <para>Gets the x-coordinate of the center point of this affine rectangle.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 70 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.RectangleAffine.CenterX">CenterX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.CenterY">
            <summary>
            <b>Get</b>
            <para>Center point (Y coordinate) of this affine rectangle. </para>
            </summary>
            <remarks>
            <para>Gets the y-coordinate of the center point of this affine rectangle.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 70 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.RectangleAffine.CenterY">CenterY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.CornerOppositeX">
            <summary>
            <para>Corner point Opposite (X coordinate) of this affine rectangle. </para>
            </summary>
            <remarks>
            <para>Gets the x-coordinate of the corner point opposite (Popp). To set this property, use <see cref="M:Cognex.Vision.RectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">SetOriginCornerXCornerY()</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.CornerOppositeY">
            <summary>
            <para>Corner point Opposite (Y coordinate) of this affine rectangle. </para>
            </summary>
            <remarks>
            <para>Gets the y-coordinate of the corner point opposite (Popp). To set this property, use <see cref="M:Cognex.Vision.RectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">SetOriginCornerXCornerY()</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.CornerOriginX">
            <summary>
            <para>Corner point origin (X coordinate) of this affine rectangle. </para>
            </summary>
            <remarks>
            <para>Gets the x-coordinate of the corner point origin (Po). To set this property, use <see cref="M:Cognex.Vision.RectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">SetOriginCornerXCornerY()</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.CornerOriginY">
            <summary>
            <para>Corner point origin (Y coordinate) of this affine rectangle. </para>
            </summary>
            <remarks>
            <para>Gets the y-coordinate of the corner point origin (Po). To set this property, use <see cref="M:Cognex.Vision.RectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">SetOriginCornerXCornerY()</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.CornerXX">
            <summary>
            <para>Corner point X (X coordinate) of this affine rectangle. </para>
            </summary>
            <remarks>
            <para>Gets the x-coordinate of the corner point x (Px). To set this property, use <see cref="M:Cognex.Vision.RectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">SetOriginCornerXCornerY()</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.CornerXY">
            <summary>
            <para>Corner point X (Y coordinate) of this affine rectangle. </para>
            </summary>
            <remarks>
            <para>Gets the y-coordinate of the corner point x (Px). To set this property, use <see cref="M:Cognex.Vision.RectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">SetOriginCornerXCornerY()</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.CornerYX">
            <summary>
            <para>Corner point Y (X coordinate) of this affine rectangle. </para>
            </summary>
            <remarks>
            <para>Gets the x-coordinate of the corner point y (Py). To set this property, use <see cref="M:Cognex.Vision.RectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">SetOriginCornerXCornerY()</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.CornerYY">
            <summary>
            <para>Corner point Y (Y coordinate) of this affine rectangle. </para>
            </summary>
            <remarks>
            <para>Gets the y-coordinate of the corner point y. To set this property, use <see cref="M:Cognex.Vision.RectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">SetOriginCornerXCornerY()</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.RectangleAffineDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.RectangleAffine.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.Perimeter">
            <summary>
            <para>Perimeter length of this CogRectangleAffine. </para>
            </summary>
            <remarks>
            <para>Returns the perimeter of this <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see> in units specified by the <see cref="P:Cognex.Vision.RectangleAffine.SelectedSpaceName">selected coordinate space</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.Rotation">
            <summary>
            <b>Get</b>
            <para>The angle (in radians, from the x-axis) of the directed vector which starts at CornerOrigin and ends at CornerX. </para>
            </summary>
            <remarks>
            <para>Gets the rotation angle in radians. This is the angle, measured from the x-axis, of the directed vector that starts at the corner origin (Po) and ends at corner point x (Px).</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.RectangleAffine.Rotation">Rotation</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.SideXLength">
            <summary>
            <b>Get</b>
            <para>The Length of this affine rectangle from CornerOrigin to CornerX. </para>
            </summary>
            <remarks>
            <para>Gets the side x length of this affine rectangle. This is the length from the origin point (Po) to corner point x (Px).</para>
            </remarks>
            <value>
            <b>Default Value: </b> 100 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.RectangleAffine.SideXLength">SideXLength</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The length is &lt;= 0. </exception>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.SideYLength">
            <summary>
            <b>Get</b>
            <para>The Length of this affine rectangle from CornerOrigin to CornerY. </para>
            </summary>
            <remarks>
            <para>Gets the side x length of this affine rectangle. This is the length from the origin point (Po) to corner point y (Py).</para>
            </remarks>
            <value>
            <b>Default Value: </b> 100 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.RectangleAffine.SideYLength">SideYLength</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The length is &lt;= 0. </exception>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.Skew">
            <summary>
            <b>Get</b>
            <para>The skew (in radians) of this affine rectangle. </para>
            </summary>
            <remarks>
            <para>Gets the skew angle of this affine rectangle in radians. </para>
            </remarks>
            <b>Note</b>
            <para>
            <para>To prevent degenerate affine rectangles, setting <see cref="P:Cognex.Vision.RectangleAffine.Skew">Skew</see> to within +/- 0.002 of +/-(π/2) causes the value to be set to either (-π/2 - 0.002) or (π/2 + 0.002) for negative and positive values of <see cref="P:Cognex.Vision.RectangleAffine.Skew">Skew</see>, respectively.</para>
            </para>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.RectangleAffine.Skew">Skew</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.XDirectionAdornment">
            <summary>
            <b>Get</b>
            <para>The X direction adornment of this affine rectangle. </para>
            </summary>
            <remarks>
            <para>The X direction adornment of this affine rectangle.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.RectangleAffineDirectionAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.RectangleAffine.XDirectionAdornment">XDirectionAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The adornment is not in <see cref="T:Cognex.Vision.RectangleAffineDirectionAdornmentConstants">RectangleAffineDirectionAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.YDirectionAdornment">
            <summary>
            <b>Get</b>
            <para>The Y direction adornment of this affine rectangle. </para>
            </summary>
            <remarks>
            <para>The Y direction adornment of this affine rectangle.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.RectangleAffineDirectionAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.RectangleAffine.YDirectionAdornment">YDirectionAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The adornment is not in <see cref="T:Cognex.Vision.RectangleAffineDirectionAdornmentConstants">RectangleAffineDirectionAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffine.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new shape that copies specified parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.GetCenterLengthsRotationSkew(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Query this affine rectangle for its center, length, rotation and skew parameterization. All angles are in radians. </para>
            </summary>
            <param name="centerX">The x-coordinate of the center point. </param>
            <param name="centerY">The y-coordinate of the center point. </param>
            <param name="sideXLength">The length of side x (the side along the x-axis). </param>
            <param name="sideYLength">The length of side y (the side along the y-axis). </param>
            <param name="rotation">The rotation angle in radians. </param>
            <param name="skew">The skew angle in radians. </param>
            <remarks>
            <para>Gets the center point, side x length, side y length, rotation angle, and skew angle of this affine rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.GetOriginCornerXCornerY(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Query the parameterization of this affine rectangle with respect to the three corner points: Origin, CornerX, and CornerY. </para>
            </summary>
            <param name="originX">The x-coordinate of corner point origin (Po). </param>
            <param name="originY">The y-coordinate of corner point origin (Po). </param>
            <param name="cornerXX">The x-coordinate of corner point x (Px). </param>
            <param name="cornerXY">The y-coordinate of corner point x (Px). </param>
            <param name="cornerYX">The x-coordinate of corner point y (Py). </param>
            <param name="cornerYY">The y-coordinate of corner point y (Py). </param>
            <remarks>
            <para>Gets the values of three corner points of this affine rectangle: origin (Po), corner point x (Px), and corner point y (Py). </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.GetOriginLengthsRotationSkew(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Query this affine rectangle for its origin, length, rotation and skew parameterization. All angles are in radians. </para>
            </summary>
            <param name="originX">The x-coordinate of the origin point (Po). </param>
            <param name="originY">The y-coordinate of the origin point (Po). </param>
            <param name="sideXLength">The length of side x (the side along the x-axis). </param>
            <param name="sideYLength">The length of side y (the side along the y-axis). </param>
            <param name="rotation">The rotation angle in radians. </param>
            <param name="skew">The skew angle in radians. </param>
            <remarks>
            <para>Gets the specified origin point (Po), side x length, side y length, rotation angle, and skew angle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new affine rectangle by mapping this one through the given transform. </para>
            </summary>
            <param name="transform">The <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> used to map this <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>. </para>
            </returns>
            <remarks>
            <para>Creates a new affine rectangle by mapping this one through the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.SetCenterLengthsRotationSkew(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Initialize this affine rectangle from its center point, SideXLength, SideYLength, Rotation (in radians) and Skew. </para>
            </summary>
            <param name="centerX">The x-coordinate of the center point. </param>
            <param name="centerY">The y-coordinate of the center point. </param>
            <param name="sideXLength">The length of side x (the side along the x-axis). </param>
            <param name="sideYLength">The length of side y (the side along the y-axis). </param>
            <param name="rotation">The rotation angle in radians. </param>
            <param name="skew">The skew angle in radians.</param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>sideXLength</b> is &lt;= 0 or <b>sideYLength</b> is &lt;= 0.</exception>
            <remarks>
            <para>
            <para>Sets this affine rectangle from the specified center point, side x length, side y length, rotation angle, and skew angle.</para>
            <para>To prevent degenerate affine rectangles, setting <b>skew</b> to within +/- 0.002 of +/-(π/2) causes the value to be set to either (-π/2 - 0.002) or (π/2 + 0.002) for negative and positive values of <b>skew</b> , respectively. </para>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.SetFromRectangle(Cognex.Vision.Rectangle,Cognex.Vision.Transform2DLinear)">
            <summary>
            <para>Set parameters of this affine rectangle from the given rectangle and transformation. </para>
            </summary>
            <param name="rectangle">The rectangle to use as the basis for this affine rectangle. This is often a unit square.. </param>
            <param name="newTransform">The transformation object to apply to <b>rectangle</b> set this affine rectangle. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            <para>Sets parameters of this affine rectangle from the given rectangle and transformation. This does not modify the selected space name of this affine rectangle. That must be set separately. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Initialize this affine rectangle from the three corner points: Origin, CornerX, and CornerY. </para>
            </summary>
            <param name="originX">The x-coordinate of corner point origin (Po). </param>
            <param name="originY">The y-coordinate of corner point origin (Po). </param>
            <param name="cornerXX">The x-coordinate of corner point x (Px). </param>
            <param name="cornerXY">The y-coordinate of corner point x (Px). </param>
            <param name="cornerYX">The x-coordinate of corner point y (Py). </param>
            <param name="cornerYY">The y-coordinate of corner point y (Py). </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ShapeException">The three points are not unique. </exception>
            <remarks>
            <para>Sets this affine rectangle from the specified origin point (Po), corner point x (Px), and corner point y (Py). </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.SetOriginLengthsRotationSkew(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Initialize this affine rectangle from its origin point, SideXLength, SideYLength, Rotation and Skew. All angles are in radians. </para>
            </summary>
            <param name="originX">The x-coordinate of the origin point (Po). </param>
            <param name="originY">The y-coordinate of the origin point (Po). </param>
            <param name="sideXLength">The length of side x (the side along the x-axis). </param>
            <param name="sideYLength">The length of side y (the side along the y-axis). </param>
            <param name="rotation">The rotation angle in radians. </param>
            <param name="skew">The skew angle in radians.</param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>sideXLength</b> is &lt;= 0 or <b>sideYLength</b> is &lt;= 0.</exception>
            <remarks>
            <para>
            <para>Sets this affine rectangle from the specified origin point (Po), side x length, side y length, rotation angle, and skew angle.</para>
            <para>To prevent degenerate affine rectangles, setting <b>skew</b> to within +/- 0.002 of +/-(π/2) causes the value to be set to either (-π/2 - 0.002) or (π/2 + 0.002) for negative and positive values of <b>skew</b> , respectively. </para>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.op_Equality(Cognex.Vision.RectangleAffine,Cognex.Vision.RectangleAffine)">
            <summary>Compares the equality of two RectangleAffine objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RectangleAffine.op_Inequality(Cognex.Vision.RectangleAffine,Cognex.Vision.RectangleAffine)">
            <summary>Compares the inequality of two RectangleAffine objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.IGraphicHighlight">
            <summary>
            <para>Interface of a highlight capable graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IGraphicHighlight.HighlightColor">
            <summary>
            <b>Get</b>
            <para>Get the <see cref="T:Cognex.Vision.Color32">color</see> of the highlighted feature. </para>
            </summary>
            <returns>
            <para>The color of the highlighted feature. If set to <see cref="P:Cognex.Vision.ColorConstants.None">None</see>, no highlighting will occur. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphicHighlight.HighlightColor">HighlightColor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>SfHighlightColor </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IGraphicHighlight.HighlightIndex">
            <summary>
            <b>Get</b>
            <para>Get the index of the feature to be highlighted. If set to -1, no highlighting will occur. </para>
            </summary>
            <returns>
            <para>The index of the feature to be highlighted. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphicHighlight.HighlightIndex">HighlightIndex</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>SfHighlightIndex</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">If you attempt to set HighlightIndex to a value less than -1. </exception>
        </member>
        <member name="P:Cognex.Vision.IGraphicHighlight.HighlightRequested">
            <summary>
            <para>If greater than zero, highlighting is enabled. </para>
            </summary>
            <returns>
            <para>The number of outstanding requests for highlighting. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.IGraphicHighlight.HighlightRelinquish">
            <summary>
            <para>Decrement the HighlightRequested reference count, unless it is already zero. If HighlightRequested reaches zero, highlighting is disabled. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of HighlightRequested has changed. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IGraphicHighlight.HighlightRequest">
            <summary>
            <para>Enables highlighting by incrementing HighlightRequested. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of HighlightRequested has changed. </para>
            </remarks>
        </member>
        <member name="T:Cognex.Vision.IGraphicMultiPen">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.IGraphicMultiPen">IGraphicMultiPen</see> defines an object that can hold pens used to draw graphics that may have many multi-colored sub-parts. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IGraphicMultiPen.PenCount">
            <summary>
            <para>Returns the number of custom pens that have been defined. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IGraphicMultiPen.AddInteractivePen(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Creates an interactive pen based on the specified simple pens and returns the key. The specified simple pen keys must already exist, and zero is a valid key meaning 'use the pen properties of the graphic for the given state'. </para>
            </summary>
            <param name="simplePenKeyWhenNormal">The pen to use to draw the graphic in its normal state. </param>
            <param name="simplePenKeyWhenSelected">The pen to use when the graphic is selected. </param>
            <param name="simplePenKeyWhenDragged">The pen to use when the graphic is dragged. </param>
            <returns>
            <para>The returned pen key. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the specified pen is added.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The key value for one of the simple pens is unknown, or one of the pens is not a <see cref="T:Cognex.Vision.GraphicMultiPenPenTypeConstants">simple pen</see>
            </exception>
            <remarks>
            <para>Creates an interactive pen based on the specified simple pens and returns the key. The specified simple pen keys must already exist, or you can specify 0 to use the contour's default for a particular state.  For example, the following line uses custom pens for the normal and dragged state and the contour's default <see cref="P:Cognex.Vision.IGraphicInteractive.SelectedColor">SelectedColor</see>, <see cref="P:Cognex.Vision.IGraphicInteractive.SelectedLineStyle">SelectedLineStyle</see>, and <see cref="P:Cognex.Vision.IGraphicInteractive.SelectedLineWidthInScreenPixels">SelectedLineWidthInScreenPixels</see> for the selected state. <see cref="M:Cognex.Vision.IGraphicMultiPen.AddInteractivePen(System.Int32,System.Int32,System.Int32)">AddInteractivePen</see> never returns the special key value 0. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IGraphicMultiPen.AddSimplePen(Cognex.Vision.Color32,System.Int32,Cognex.Vision.GraphicLineStyleConstants)">
            <summary>
            <para>Creates a simple pen with the specified attributes and returns the key. </para>
            </summary>
            <param name="color">The pen color. </param>
            <param name="lineWidth">The line width in pixels. </param>
            <param name="lineStyle">The line style. </param>
            <returns>
            <para>The returned pen key. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the specified pen is added.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>lineWidth</b> is &lt; 1, or <b>lineStyle</b> is not in <see cref="T:Cognex.Vision.GraphicLineStyleConstants">GraphicLineStyleConstants</see>. </exception>
            <remarks>
            <para>
            <para>Creates a simple pen with the specified attributes and returns the key.</para>
            <para>
            <see cref="M:Cognex.Vision.IGraphicMultiPen.AddSimplePen(Cognex.Vision.Color32,System.Int32,Cognex.Vision.GraphicLineStyleConstants)">AddSimplePen</see> never returns the special key value 0 which means to use the default pen properties of the graphic. </para>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IGraphicMultiPen.GetInteractivePenAttributes(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Returns the attributes of the interactive pen with the given Key. </para>
            </summary>
            <param name="interactivePenKey">The pen key. </param>
            <param name="simplePenKeyWhenNormal">The pen to use to draw the graphic in its normal state. </param>
            <param name="simplePenKeyWhenSelected">The pen to use when the graphic is selected. </param>
            <param name="simplePenKeyWhenDragged">The pen to use when the graphic is dragged. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>interactivePenKey</b> is not a known interactive pen key. </exception>
            <remarks>
            <para>Returns the attributes of the interactive pen with the given <b>interactivePenKey</b>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IGraphicMultiPen.GetPenKey(System.Int32)">
            <summary>
            <para>Returns the key for the pen at the given Index. Index must be in the range from 0 to PenCount-1 (inclusive). </para>
            </summary>
            <param name="index">The index. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> is &lt; 0 or &gt; ( <see cref="P:Cognex.Vision.IGraphicMultiPen.PenCount">PenCount</see> -1). </exception>
        </member>
        <member name="M:Cognex.Vision.IGraphicMultiPen.GetPenType(System.Int32)">
            <summary>
            <para>//! Returns the type ( <see cref="T:Cognex.Vision.GraphicMultiPenPenTypeConstants">Simple</see> or <see cref="T:Cognex.Vision.GraphicMultiPenPenTypeConstants">Interactive</see> ) of the pen with the given <b>key</b>. </para>
            </summary>
            <param name="key">The pen key. </param>
        </member>
        <member name="M:Cognex.Vision.IGraphicMultiPen.GetSimplePenAttributes(System.Int32,Cognex.Vision.Color32@,System.Int32@,Cognex.Vision.GraphicLineStyleConstants@)">
            <summary>
            <para>Returns the attributes of the simple pen with the given Key. </para>
            </summary>
            <param name="simplePenKey">The pen key. </param>
            <param name="color">The pen color. </param>
            <param name="lineWidth">The line width. </param>
            <param name="lineStyle">The line style. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>simplePenKey</b> is not a known simple pen key. </exception>
            <remarks>
            <para>Returns the attributes of the simple pen with the given <b>simplePenKey</b>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IGraphicMultiPen.RemovePen(System.Int32)">
            <summary>
            <para>Removes the custom pen with the specified <b>key</b>. The <b>key</b> must be an existing <see cref="M:Cognex.Vision.IGraphicMultiPen.GetPenKey(System.Int32)">simple or interactive</see> pen key that is not in use. </para>
            </summary>
            <param name="key">The pen key of the pen to remove. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the pen is removed.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ShapeException">The pen with the specified <b>key</b> is in use. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>key</b> is not a known pen key. </exception>
            <remarks>
            <para>A pen key is considered in use if either of the following statements is true:<list type="bullet">
            <item>
            <description>A simple pen key is referenced by an interactive pen, even if the interactive key is not in use.</description>
            </item>
            <item>
            <description>The pen key is referenced in any part of the shape that can hold a pen key. Specifically, a pen key is in use if it is a segment's CustomPen, StartAdornmentCustomPen, EndAdornmentCustomPen. </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IGraphicMultiPen.SetInteractivePenAttributes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the attributes of the interactive pen with the given Key. </para>
            </summary>
            <param name="interactivePenKey">The pen key. </param>
            <param name="simplePenKeyWhenNormal">The pen to use to draw the graphic in its normal state. </param>
            <param name="simplePenKeyWhenSelected">The pen to use when the graphic is selected. </param>
            <param name="simplePenKeyWhenDragged">The pen to use when the graphic is dragged. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the pen is changed.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>interactivePenKey</b> is not a known interactive pen key. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The key value for one of the simple pens is unknown, or one of the pens is not a <see cref="T:Cognex.Vision.GraphicMultiPenPenTypeConstants">simple pen</see>. </exception>
            <remarks>
            <para>Sets the attributes of the interactive pen with the given <b>interactivePenKey</b>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IGraphicMultiPen.SetSimplePenAttributes(System.Int32,Cognex.Vision.Color32,System.Int32,Cognex.Vision.GraphicLineStyleConstants)">
            <summary>
            <para>Sets the attributes of the simple pen with the given <b>simplePenKey</b>. </para>
            </summary>
            <param name="simplePenKey">The pen key. </param>
            <param name="color">The pen color. </param>
            <param name="lineWidth">The line width. </param>
            <param name="lineStyle">The line style. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the pen is changed.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>simplePenKey</b> is not a known simple pen key. </exception>
        </member>
        <member name="T:Cognex.Vision.EllipticalArc">
            <summary>
            <para>An elliptical arc is a portion of an ellipse. You specify this shape using the usual ellipse parameters and two more: AngleStart and AngleSpan. AngleStart defines the angle at which the arc begins and AngleSpan defines the angular extent of the arc. </para>
            </summary>
            <remarks>
            <para>An elliptical arc is a portion of an ellipse. You specify this shape using the usual ellipse parameters and two more: <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see>, the angle at which the arc begins, and <see cref="P:Cognex.Vision.EllipticalArc.AngleSpan">AngleSpan</see>, the angular extent of the arc. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.EllipticalArc.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.EllipticalArc.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.EllipticalArc.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.AngleSpan">
            <summary>
            <b>Get</b>
            <para>Returns/sets the angular extent (in radians) and direction of the arc. For example, a value of Pi specifies an arc that is one half of the full ellipse. A value of -Pi specifies the other half. </para>
            </summary>
            <remarks>
            <para>Sets or gets the angle span of this elliptical arc in radians. The angle can be any positive or negative value, but not exactly 0; the sign determines the direction of the arc. If the absolute value of the angle span is greater than 2π, the arc wraps around on itself. It is not normalized to the range −2π to 2π For example, an <see cref="P:Cognex.Vision.EllipticalArc.AngleSpan">AngleSpan</see> of +π is an arc that describes half of a full ellipse, and a span of −π describes the other half in the opposite direction. To simply reverse the direction of an arc, you can use the following:</para>
            </remarks>
            <value>
            <b>Default Value: </b> π/2 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalArc.AngleSpan">AngleSpan</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is zero. </exception>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.AngleStart">
            <summary>
            <b>Get</b>
            <para>Returns/sets the angle (in radians) that specifies the start of the arc. It is measured from the x-axis of the underlying ellipse. </para>
            </summary>
            <remarks>
            <para>Sets or gets the start angle of the arc. The angle is measured in radians from the x-axis of the underlying ellipse. <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see> is normalized to a value between +π and −π.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.ArcLength">
            <summary>
            <para>Returns the total length of this arc. </para>
            </summary>
            <remarks>
            <para>Returns the length of this arc. As <see cref="P:Cognex.Vision.EllipticalArc.AngleSpan">AngleSpan</see> becomes greater than 2π, the length continues to increase. This value is always positive. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.CenterX">
            <summary>
            <b>Get</b>
            <para>Returns/sets the x coordinate of the ellipse center. </para>
            </summary>
            <remarks>
            <para>Sets or gets the x-coordinate of the center of the underlying ellipse.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 70 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalArc.CenterX">CenterX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.CenterY">
            <summary>
            <b>Get</b>
            <para>Returns/sets the y coordinate of the ellipse center. </para>
            </summary>
            <remarks>
            <para>Sets or gets the y-coordinate of the center of the underlying ellipse.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 70 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalArc.CenterY">CenterY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.DirectionAdornment">
            <summary>
            <b>Get</b>
            <para>Returns/sets the direction adornment of this elliptical arc. These adornments indicate the direction from the start point to the end point. </para>
            </summary>
            <remarks>
            <para>Sets or gets the direction adornment of this elliptical arc which indicates the direction from the start point to the end point.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.EllipticalArcDirectionAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalArc.DirectionAdornment">DirectionAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.EllipticalArcDirectionAdornmentConstants">EllipticalArcDirectionAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.EndPointAdornment">
            <summary>
            <b>Get</b>
            <para>Returns/sets the end point adornment of this elliptical arc. The end point occurs at the angle given by AngleStart + AngleSpan. </para>
            </summary>
            <remarks>
            <para>Sets or gets the endpoint adornment of this elliptical arc.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.EllipticalArcAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalArc.EndPointAdornment">EndPointAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.EllipticalArcAdornmentConstants">EllipticalArcAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.EndX">
            <summary>
            <para>Returns the x coordinate of the arc's end point. The end point occurs at the angle given by AngleStart + AngleSpan. </para>
            </summary>
            <remarks>
            <para>Returns the x-coordinate of the arc end point. This is the point at the <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see> + <see cref="P:Cognex.Vision.EllipticalArc.AngleSpan">AngleSpan</see> end of the arc. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.EndY">
            <summary>
            <para>Returns the y coordinate of the arc's end point. The end point occurs at the angle given by AngleStart + AngleSpan. </para>
            </summary>
            <remarks>
            <para>Returns the y-coordinate of the arc end point. This is the point at the <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see> + <see cref="P:Cognex.Vision.EllipticalArc.AngleSpan">AngleSpan</see> end of the arc. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Sets or gets which interactive <see cref="T:Cognex.Vision.EllipticalArcDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalArc.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.RadiusX">
            <summary>
            <b>Get</b>
            <para>Returns/sets the distance from the center of the ellipse to its boundary (along the ellipse's x-axis). </para>
            </summary>
            <remarks>
            <para>Sets or gets the distance from the center of the underlying ellipse to its boundary along the x-axis. The x-axis may be <see cref="P:Cognex.Vision.EllipticalArc.Rotation">rotated</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 50 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalArc.RadiusX">RadiusX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> &lt;= 0.0 </exception>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.RadiusY">
            <summary>
            <b>Get</b>
            <para>Returns/sets the distance from the center of the ellipse to its boundary (along the ellipse's y-axis). </para>
            </summary>
            <remarks>
            <para>Sets or gets the distance from the center of the underlying ellipse to its boundary along the y-axis. The y-axis may be <see cref="P:Cognex.Vision.EllipticalArc.Rotation">rotated</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 50 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalArc.RadiusY">RadiusY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> &lt;= 0.0 </exception>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.Rotation">
            <summary>
            <b>Get</b>
            <para>Returns/sets the rotation angle (in radians) from the x-axis of the selected coordinate space to the x-axis of the ellipse. </para>
            </summary>
            <remarks>
            <para>Sets or gets the rotation angle, in radians, of the underlying ellipse. The angle is measured from the x-axis of the <see cref="P:Cognex.Vision.EllipticalArc.SelectedSpaceName">selected coordinate space</see> to the rotated x-axis of the ellipse. To find the rotation from the x-axis of the selected space name to the y-axis of the ellipse, add π/2 to this property. Rotation values are normalized to be between −π and +π.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalArc.Rotation">Rotation</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.StartPointAdornment">
            <summary>
            <b>Get</b>
            <para>Returns the start point adornment of this elliptical arc. The start point occurs at the angle given by AngleStart. </para>
            </summary>
            <remarks>
            <para>Sets or gets the start point adornment of this elliptical arc.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.EllipticalArcAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalArc.StartPointAdornment">StartPointAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.EllipticalArcAdornmentConstants">EllipticalArcAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.StartX">
            <summary>
            <para>Returns the x coordinate of the arc's start point. The start point occurs at the angle given by AngleStart. </para>
            </summary>
            <remarks>
            <para>Returns the x-coordinate of the arc start point. The start point occurs at the angle given by <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.StartY">
            <summary>
            <para>Returns the y coordinate of the arc's start point. The start point occurs at the angle given by AngleStart. </para>
            </summary>
            <remarks>
            <para>Returns the y-coordinate of the arc start point. The start point occurs at the angle given by <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalArc.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new elliptical arc, copying the specified parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>
            </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see> that copies the specified attributes from this <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.CreateEllipse(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new ellipse shape. The returned ellipse will have the same center, radii, rotation, and unit circle transform as this elliptical arc. Use the CopyFlags to specify what other parts of this shape should be copied into the new one. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The new ellipse. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.Ellipse">Ellipse</see> based on the underlying ellipse of this arc. The new ellipse has the same <see cref="P:Cognex.Vision.EllipticalArc.CenterX">CenterX</see>, <see cref="P:Cognex.Vision.EllipticalArc.CenterY">CenterY</see>, <see cref="P:Cognex.Vision.EllipticalArc.RadiusX">RadiusX</see>, <see cref="P:Cognex.Vision.EllipticalArc.RadiusY">RadiusY</see>, <see cref="P:Cognex.Vision.EllipticalArc.Rotation">Rotation</see>, and <see cref="M:Cognex.Vision.EllipticalArc.GetUnitCircleParams(System.Double@,System.Double@,Cognex.Vision.Transform2DLinear@)">unit circle transform</see> as this elliptical arc. <b>copyFlags</b> specifies which aspects of the arc are copied to the ellipse. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.GetCenterRadiusXYRotationAngleStartAngleSpan(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Gets CenterX, CenterY, RadiusX, RadiusY, Rotation, AngleStart, and AngleSpan of this elliptical arc. All angles are in radians. </para>
            </summary>
            <param name="centerX">The x-coordinate of the center of the arc. </param>
            <param name="centerY">The y-coordinate of the center of the arc. </param>
            <param name="radiusX">The distance from the center of the underlying ellipse to its boundary along the x-axis. </param>
            <param name="radiusY">The distance from the center of the underlying ellipse to its boundary along the y-axis. </param>
            <param name="rotation">The <see cref="P:Cognex.Vision.EllipticalArc.Rotation">Rotation</see> of the arc. </param>
            <param name="angleStart">The <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see> of the arc. </param>
            <param name="angleSpan">The <see cref="P:Cognex.Vision.EllipticalArc.AngleSpan">AngleSpan</see> of the arc. </param>
            <remarks>
            <para>Gets the <see cref="P:Cognex.Vision.EllipticalArc.CenterX">CenterX</see>, <see cref="P:Cognex.Vision.EllipticalArc.CenterY">CenterY</see>, <see cref="P:Cognex.Vision.EllipticalArc.RadiusX">RadiusX</see>, <see cref="P:Cognex.Vision.EllipticalArc.RadiusY">RadiusY</see>, <see cref="P:Cognex.Vision.EllipticalArc.Rotation">Rotation</see>, <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see>, and <see cref="P:Cognex.Vision.EllipticalArc.AngleSpan">AngleSpan</see> of this elliptical arc. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.GetStartEnd(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Gets the start and end point coordinates of this elliptical arc. The start point occurs at the angle given by AngleStart. The end point occurs at the angle given by AngleStart + AngleSpan. </para>
            </summary>
            <param name="startX">The x-coordinate of the start point. </param>
            <param name="startY">The y-coordinate of the start point. </param>
            <param name="endX">The x-coordinate of the endpoint. </param>
            <param name="endY">The y-coordinate of the endpoint. </param>
            <remarks>
            <para>Gets the coordinates of the start and endpoints of the elliptical arc. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.GetUnitCircleParams(System.Double@,System.Double@,Cognex.Vision.Transform2DLinear@)">
            <summary>
            <para>Get a description of this elliptical arc as a unit circular arc and a linear transform that maps it to an elliptical arc. The unit circle arc is centered at (0,0), has a radius of one, and has the provided start angle and span (in radians). </para>
            </summary>
            <param name="unitCircleAngleStart">The start angle of the unit circle arc in radians. </param>
            <param name="unitCircleAngleSpan">The span of the unit circle arc in radians. </param>
            <param name="ellipseFromUnitCircle">The transform that maps the unit circle arc to this elliptical arc. </param>
            <remarks>
            <para>Gets a description of this elliptical arc as a unit circular arc and a linear transform that maps it to an elliptical arc. The unit circle arc is centered at (0,0), has a radius of one, and has the provided start angle and span measured in radians. Typically, the <b>unitCircleAngleStart</b> value is not the same as <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see>, and the <b>unitCircleAngleSpan</b> is not the same as <see cref="P:Cognex.Vision.EllipticalArc.AngleSpan">AngleSpan</see>. The returned <b>unitCircleAngleStart</b> is normalized to be between +π and −π, but <b>unitCircleAngleSpan</b> is not. The child space of this shape is unit circle space. In the unit circle child space, you can pick (x,y) positions along the arc using standard parametric equations for x and y: x = cos(t) and y = sin(t) where the angle <b>t</b> varies from <b>unitCircleAngleStart</b> and ( <b>unitCircleAngleStart</b> + <b>unitCircleAngleSpan</b> ). You can map positions and angles in child space to the parent space using the <b>ellipseFromUnitCircle</b> transform. You can map from parent space to child space using the inverse transform. Remember that <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see> is measured from the x-axis of the ellipse. You must add <see cref="P:Cognex.Vision.EllipticalArc.Rotation">Rotation</see> to <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see> to get the correct angle in parent space. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new elliptical arc by mapping this one through the given linear transform. Use the CopyFlags to specify what other parts of this shape should be copied into the new one. </para>
            </summary>
            <param name="transform">The <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> used to map this <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>. </para>
            </returns>
            <remarks>
            <para>Creates a new elliptical arc by mapping this elliptical arc through a linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.SetCenterRadiusXYRotationAngleStartAngleSpan(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets CenterX, CenterY, RadiusX, RadiusY, Rotation, AngleStart, and AngleSpan of this elliptical arc. All angles are in radians. </para>
            </summary>
            <param name="centerX">The x-coordinate of the center of the arc. </param>
            <param name="centerY">The y-coordinate of the center of the arc. </param>
            <param name="radiusX">The distance from the center of the underlying ellipse to its boundary along the x-axis. </param>
            <param name="radiusY">The distance from the center of the underlying ellipse to its boundary along the y-axis. </param>
            <param name="rotation">The <see cref="P:Cognex.Vision.EllipticalArc.Rotation">Rotation</see> of the arc. </param>
            <param name="angleStart">The <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see> of the arc. </param>
            <param name="angleSpan">The <see cref="P:Cognex.Vision.EllipticalArc.AngleSpan">AngleSpan</see> of the arc. (The default value for this parameter is actually π/2.) </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when one or more properties change.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>radiusX</b> &lt;= 0.0 or <b>radiusY</b> &lt;= 0.0 </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>angleSpan</b> = 0.0 </exception>
            <remarks>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalArc.CenterX">CenterX</see>, <see cref="P:Cognex.Vision.EllipticalArc.CenterY">CenterY</see>, <see cref="P:Cognex.Vision.EllipticalArc.RadiusX">RadiusX</see>, <see cref="P:Cognex.Vision.EllipticalArc.RadiusY">RadiusY</see>, <see cref="P:Cognex.Vision.EllipticalArc.Rotation">Rotation</see>, <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see>, and <see cref="P:Cognex.Vision.EllipticalArc.AngleSpan">AngleSpan</see> of this elliptical arc. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.SetFromUnitCircleParams(System.Double,System.Double,Cognex.Vision.Transform2DLinear)">
            <summary>
            <para>Set the geometry of this elliptical arc from the given description of a unit circular arc and the linear transform that maps it to an elliptical arc. The unit circle arc is centered at (0,0), has a radius of one, and has the given start angle (in radians) and span (in radians). </para>
            </summary>
            <param name="unitCircleAngleStart">The start angle of the unit circle arc in radians. </param>
            <param name="unitCircleAngleSpan">The span of the unit circle arc in radians. </param>
            <param name="ellipseFromUnitCircle">The transform that maps the unit circle arc to this elliptical arc. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when one or more properties change.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>unitCircleAngleSpan</b> = 0.0. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>RadialScale</b> &lt;= 0.0 or <b>RadialScale</b> = 1.0. </exception>
            <remarks>
            <para>Sets the geometry of this elliptical arc from the given description of a unit circular arc and the linear transform that maps it to an elliptical arc. The unit circle arc is centered at (0,0), has a radius of one, and has the specified start angle and span measured in radians. Typically, the <b>unitCircleAngleStart</b> value is not the same as <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see>, and the <b>unitCircleAngleSpan</b> is not the same as <see cref="P:Cognex.Vision.EllipticalArc.AngleSpan">AngleSpan</see>. The returned <b>unitCircleAngleStart</b> is normalized to be between +π and −π, but <b>unitCircleAngleSpan</b> is not. The child space of this shape is unit circle space. In the unit circle child space, you can pick (x,y) positions along the arc using standard parametric equations for x and y: x = cos(t) and y = sin(t) where the angle <b>t</b> varies from <b>unitCircleAngleStart</b> and ( <b>unitCircleAngleStart</b> + <b>unitCircleAngleSpan</b> ). You can map positions and angles in child space to the parent space using the <b>ellipseFromUnitCircle</b> transform. You can map from parent space to child space using the inverse transform. Remember that <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see> is measured from the x-axis of the ellipse. You must add <see cref="P:Cognex.Vision.EllipticalArc.Rotation">Rotation</see> to <see cref="P:Cognex.Vision.EllipticalArc.AngleStart">AngleStart</see> to get the correct angle in parent space. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.op_Equality(Cognex.Vision.EllipticalArc,Cognex.Vision.EllipticalArc)">
            <summary>Compares the equality of two EllipticalArc objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.EllipticalArc.op_Inequality(Cognex.Vision.EllipticalArc,Cognex.Vision.EllipticalArc)">
            <summary>Compares the inequality of two EllipticalArc objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Ellipse">
            <summary>
            <para>Class that represents an ellipse. </para>
            </summary>
            <remarks>
            <para>Class that describes an ellipse shape. You specify an ellipse with a center point, a <see cref="P:Cognex.Vision.Ellipse.Rotation">rotation</see> from the shape's x-axis that establishes the ellipse's x- and y-axes, a <see cref="P:Cognex.Vision.Ellipse.RadiusX">radius along the x-axis</see>, and a <see cref="P:Cognex.Vision.Ellipse.RadiusY">radius along the y-axis</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.Ellipse.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Ellipse.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Ellipse.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Ellipse.Area">
            <summary>
            <para>Area of this ellipse. </para>
            </summary>
            <remarks>
            <para>Returns the area of this <see cref="T:Cognex.Vision.Ellipse">Ellipse</see> in units specified by the <see cref="P:Cognex.Vision.Ellipse.SelectedSpaceName">selected coordinate space</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Ellipse.CenterX">
            <summary>
            <b>Get</b>
            <para>Returns the x coordinate of the ellipse center. </para>
            </summary>
            <remarks>
            <para>Gets the x-coordinate of the center of this ellipse.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 70 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Ellipse.CenterX">CenterX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Ellipse.CenterY">
            <summary>
            <b>Get</b>
            <para>Returns the y coordinate of the ellipse center. </para>
            </summary>
            <remarks>
            <para>Gets the y-coordinate of the center of this ellipse.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 70 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Ellipse.CenterY">CenterY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Ellipse.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.EllipseDOFConstants">interactive degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Ellipse.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfGraphicDOFEnableBase">SfGraphicDOFEnableBase</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Ellipse.Perimeter">
            <summary>
            <para>Perimeter length of this ellipse. </para>
            </summary>
            <remarks>
            <para>Returns the perimeter of this <see cref="T:Cognex.Vision.Ellipse">Ellipse</see> in units specified by the <see cref="P:Cognex.Vision.Ellipse.SelectedSpaceName">selected coordinate space</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Ellipse.RadiusX">
            <summary>
            <b>Get</b>
            <para>Returns the distance from the center of the ellipse to its boundary (measured along the rotated x-axis). </para>
            </summary>
            <remarks>
            <para>Gets the distance from the center of this ellipse to its boundary along the x-axis. The x-axis may be <see cref="P:Cognex.Vision.Ellipse.Rotation">rotated</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 50 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Ellipse.RadiusX">RadiusX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The new radius is &lt;=0. </exception>
        </member>
        <member name="P:Cognex.Vision.Ellipse.RadiusY">
            <summary>
            <b>Get</b>
            <para>Returns the distance from the center of the ellipse to its boundary (measured along the rotated y-axis). </para>
            </summary>
            <remarks>
            <para>Gets the distance from the center of this ellipse to its boundary along the y-axis. The y-axis may be <see cref="P:Cognex.Vision.Ellipse.Rotation">rotated</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 50 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Ellipse.RadiusY">RadiusY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The new radius is &lt;=0. </exception>
        </member>
        <member name="P:Cognex.Vision.Ellipse.Rotation">
            <summary>
            <b>Get</b>
            <para>Returns the rotation angle (in radians) from the x-axis of the selected coordinate space to the rotated x-axis of the ellipse. </para>
            </summary>
            <remarks>
            <para>Gets the rotation angle, in radians, of this ellipse. The angle is measured from the x-axis of the <see cref="P:Cognex.Vision.Ellipse.SelectedSpaceName">selected coordinate space</see> to the rotated x-axis of the ellipse. To find the rotation from the x-axis of the selected space name to the y-axis of the ellipse, add π/2 to this property. Rotation values are normalized to be between −π and +π.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Ellipse.Rotation">Rotation</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Ellipse.XDirectionAdornment">
            <summary>
            <b>Get</b>
            <para>The X direction adornment of this ellipse. </para>
            </summary>
            <remarks>
            <para>The x-direction adornment of this ellipse.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.EllipseDirectionAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Ellipse.XDirectionAdornment">XDirectionAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfXDirectionAdornment">SfXDirectionAdornment</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.EllipseDirectionAdornmentConstants">EllipseDirectionAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.Ellipse.YDirectionAdornment">
            <summary>
            <b>Get</b>
            <para>The Y direction adornment of this ellipse. </para>
            </summary>
            <remarks>
            <para>The y-direction adornment of this ellipse.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.EllipseDirectionAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Ellipse.YDirectionAdornment">YDirectionAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfYDirectionAdornment">SfYDirectionAdornment</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.EllipseDirectionAdornmentConstants">EllipseDirectionAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.Ellipse.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Ellipse.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Ellipse.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Ellipse.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Ellipse.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Ellipse.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Ellipse.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Ellipse.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Ellipse.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Ellipse.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.Ellipse.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Ellipse.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Ellipse.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Ellipse.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Ellipse.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Ellipse.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Ellipse.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Ellipse.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.Ellipse.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Ellipse.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new shape that copies specified parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.Ellipse">Ellipse</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.Ellipse">Ellipse</see> that copies the specified parameters from this <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.GetBoundingRectangleAffine(System.Boolean)">
            <summary>
            <para>Extracts an affine rectangle which bounds this ellipse. If DeSkew is TRUE, the rectangle will have zero skew and will be aligned with the principal axes of the ellipse. If DeSkew is false, the rectangle may contain skew. </para>
            </summary>
            <param name="deSkew">Set to True to return a rectangle with no skew. Set to False to return a rectangle that may contain skew. </param>
            <returns>
            <para>The returned <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>. </para>
            </returns>
            <remarks>
            <para>Returns an <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see> that bounds this ellipse. If <b>deSkew</b> is True, the rectangle will have zero skew and will be aligned with the principal axes of the ellipse. If <b>deSkew</b> is False, the rectangle may contain skew. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.GetCenterXYRadiusXYRotation(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Gets the named properties in a single method call. </para>
            </summary>
            <param name="centerX">The x-coordinate of the center of this ellipse. </param>
            <param name="centerY">The y-coordinate of the center of this ellipse. </param>
            <param name="radiusX">The x-radius of this ellipse. </param>
            <param name="radiusY">The x-radius of this ellipse. </param>
            <param name="rotation">The rotation angle of this ellipse. </param>
            <remarks>
            <para>Returns the x- and y-coordinates of the center, the x- and y-radii, and the rotation of this ellipse. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Ellipse.GetUnitCircleTransform">
            <summary>
            <para>Get a linear transform that maps the unit circle to this ellipse. The unit circle is a circle centered at (0,0) with a radius of one. </para>
            </summary>
            <returns>
            <para>The transform that maps the unit circle arc to this ellipse. </para>
            </returns>
            <remarks>
            <para>Gets a linear transform that maps the unit circle to this ellipse. The unit circle is a circle centered at (0,0) with a radius of one. The unit circle space is a child space of this shape. You can map positions in child space to the parent space using the returned transform. You can map from parent space to child space using the inverse transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new ellipse by mapping this one through the given linear transform. </para>
            </summary>
            <param name="transform">The <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> used to map this <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>. </para>
            </returns>
            <remarks>
            <para>Create a new ellipse that is the result of mapping this ellipse using a linear transformation. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.SetCenterXYRadiusXYRotation(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the named properties in a single method call. </para>
            </summary>
            <param name="centerX">The x-coordinate of the ellipse. </param>
            <param name="centerY">The y-coordinate of the ellipse </param>
            <param name="radiusX">The x-radius of this ellipse </param>
            <param name="radiusY">The y-radius of this ellipse </param>
            <param name="rotation">The rotation angle of this ellipse. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>radiusX</b> is &lt;= 0 or <b>radiusY</b> is &lt;= 0. </exception>
            <remarks>
            <para>Sets the x- and y-coordinates of the center, the x- and y-radii, and the rotation of this ellipse. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.SetFromBoundingRectangleAffine(Cognex.Vision.RectangleAffine)">
            <summary>
            <para>Sets the properties of this ellipse from the given bounding affine rectangle. </para>
            </summary>
            <param name="newBoundingRect">The bounding <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            <para>Sets the properties of this ellipse from the given bounding <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.SetFromUnitCircleTransform(Cognex.Vision.Transform2DLinear)">
            <summary>
            <para>Set the geometry of this ellipse from the given linear transform that maps the unit circle to an ellipse. The unit circle is a circle centered at (0,0) with a radius of one. </para>
            </summary>
            <param name="ellipseFromUnitCircle">The transform that maps the unit circle arc to this ellipse. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Ellipse.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            <para>Sets the geometry of this ellipse from the given linear transform that maps the unit circle to an ellipse. The unit circle is a circle centered at (0,0) with a radius of one. The unit circle space is a child space of this shape. You can map positions in child space to the parent space using the <b>ellipseFromUnitCircle</b> transform. You can map from parent space to child space using the inverse transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Ellipse.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Ellipse.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Ellipse.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Ellipse.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Ellipse.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Ellipse.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Ellipse.op_Equality(Cognex.Vision.Ellipse,Cognex.Vision.Ellipse)">
            <summary>Compares the equality of two Ellipse objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Ellipse.op_Inequality(Cognex.Vision.Ellipse,Cognex.Vision.Ellipse)">
            <summary>Compares the inequality of two Ellipse objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.LineSegment">
            <summary>
            <para>Class that represents a line segment. </para>
            </summary>
            <remarks>
            <para>Primary interface of a CogLineSegment. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.LineSegment.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.LineSegment.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.LineSegment.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.LineSegment.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.LineSegment.EndPointAdornment">
            <summary>
            <b>Get</b>
            <para>The end point adornment of this line segment. </para>
            </summary>
            <remarks>
            <para>The end point <see cref="T:Cognex.Vision.LineSegmentAdornmentConstants">adornment</see> of this line segment.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.LineSegmentAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.LineSegment.EndPointAdornment">EndPointAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.LineSegmentAdornmentConstants">LineSegmentAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.LineSegment.EndX">
            <summary>
            <b>Get</b>
            <para>The X coordinate of the end point for the line segment. </para>
            </summary>
            <remarks>
            <para>The x-coordinate of the line segment's ending point.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 120 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.LineSegment.EndX">EndX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ShapeException">Start and endpoint coordinates must be different. </exception>
        </member>
        <member name="P:Cognex.Vision.LineSegment.EndY">
            <summary>
            <b>Get</b>
            <para>The Y coordinate of the end point for the line segment. </para>
            </summary>
            <remarks>
            <para>The y-coordinate of the line segment's ending point.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 120 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.LineSegment.EndY">EndY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ShapeException">Start and endpoint coordinates must be different. </exception>
        </member>
        <member name="P:Cognex.Vision.LineSegment.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.LineSegmentDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.LineSegment.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.LineSegment.Length">
            <summary>
            <para>The length of the line segment. </para>
            </summary>
            <remarks>
            <para>The length of the line segment. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.LineSegment.MidpointX">
            <summary>
            <para>The X coordinate halfway between StartX and EndX. </para>
            </summary>
            <remarks>
            <para>The x-coordinate that is halfway between <see cref="P:Cognex.Vision.LineSegment.StartX">StartX</see> and <see cref="P:Cognex.Vision.LineSegment.EndX">EndX</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.LineSegment.MidpointY">
            <summary>
            <para>The Y coordinate halfway between StartY and EndY. </para>
            </summary>
            <remarks>
            <para>The y-coordinate that is halfway between <see cref="P:Cognex.Vision.LineSegment.StartY">StartY</see> and <see cref="P:Cognex.Vision.LineSegment.EndY">EndY</see>. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.LineSegment.Rotation">
            <summary>
            <para>The angle (in radians, from the x-axis) of the line segment. The line segment must not be degenerate (i.e. the end points must differ). </para>
            </summary>
            <remarks>
            <para>The angle (in radians, from the x-axis) of the line segment. The rotation is normalized to the range -π to π. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.LineSegment.StartPointAdornment">
            <summary>
            <b>Get</b>
            <para>The start point adornment of this line segment. </para>
            </summary>
            <remarks>
            <para>The start point <see cref="T:Cognex.Vision.LineSegmentAdornmentConstants">adornment</see> of this line segment.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.LineSegmentAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.LineSegment.StartPointAdornment">StartPointAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.LineSegmentAdornmentConstants">LineSegmentAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.LineSegment.StartX">
            <summary>
            <b>Get</b>
            <para>The X coordinate of the start point for the line segment. </para>
            </summary>
            <remarks>
            <para>The x-coordinate of the line segment's starting point.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 20 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.LineSegment.StartX">StartX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ShapeException">Start and endpoint coordinates must be different. </exception>
        </member>
        <member name="P:Cognex.Vision.LineSegment.StartY">
            <summary>
            <b>Get</b>
            <para>The Y coordinate of the start point for the line segment. </para>
            </summary>
            <remarks>
            <para>The y-coordinate of the line segment's starting point.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 20 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.LineSegment.StartY">StartY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ShapeException">Start and endpoint coordinates must be different. </exception>
        </member>
        <member name="P:Cognex.Vision.LineSegment.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.LineSegment.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.LineSegment.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.LineSegment.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.LineSegment.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.LineSegment.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.LineSegment.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.LineSegment.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.LineSegment.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.LineSegment.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.LineSegment.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.LineSegment.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.LineSegment.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.LineSegment.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.LineSegment.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.LineSegment.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.LineSegment.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.LineSegment.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.LineSegment.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.LineSegment.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.LineSegment.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new shape that copies specified parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.LineSegment">LineSegment</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.LineSegment">LineSegment</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.LineSegment.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.LineSegment.CreateLine">
            <summary>
            <para>Creates a new <see cref="T:Cognex.Vision.Line">Line</see> for this line segment. The reference point on the line will be the midpoint of the segment. The line segment must not be degenerate (i.e. the end points must differ). </para>
            </summary>
            <returns>
            <para>The newly created <see cref="T:Cognex.Vision.Line">Line</see>. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.Line">Line</see> for this line segment. The reference point on the new line is the midpoint ( <see cref="P:Cognex.Vision.LineSegment.MidpointX">MidpointX</see>, <see cref="P:Cognex.Vision.LineSegment.MidpointY">MidpointY</see> ) of the segment. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.LineSegment.CreateLine(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates a new <see cref="T:Cognex.Vision.Line">Line</see> for this line segment. The reference point on the line will be the midpoint of the segment. The line segment must not be degenerate (i.e. the end points must differ). </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the line segment to copy to the new line. </param>
            <returns>
            <para>The newly created <see cref="T:Cognex.Vision.Line">Line</see>. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.Line">Line</see> for this line segment. The reference point on the new line is the midpoint ( <see cref="P:Cognex.Vision.LineSegment.MidpointX">MidpointX</see>, <see cref="P:Cognex.Vision.LineSegment.MidpointY">MidpointY</see> ) of the segment. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.LineSegment.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.LineSegment.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.LineSegment.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.LineSegment.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.LineSegment.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.LineSegment.GetStartEnd(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Gets coordinates StartX, EndX, StartY, EndY for the line segment. </para>
            </summary>
            <param name="startX">X-coordinate of the start point. </param>
            <param name="startY">Y-coordinate of the start point. </param>
            <param name="endX">X-coordinate of the end point. </param>
            <param name="endY">Y-coordinate of the end point. </param>
        </member>
        <member name="M:Cognex.Vision.LineSegment.GetStartLengthRotation(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Gets StartX, StartY, Length and Rotation (in radians from the x-axis) for the line segment. </para>
            </summary>
            <param name="startX">X-coordinate of the start point. </param>
            <param name="startY">Y-coordinate of the start point. </param>
            <param name="length">Length of the line segment. </param>
            <param name="rotation">Rotation of the line segment. </param>
        </member>
        <member name="M:Cognex.Vision.LineSegment.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.LineSegment.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates a new line segment by mapping this line segment through a linear transform. </para>
            </summary>
            <param name="transform">The <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> used to map this <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>. </para>
            </returns>
            <remarks>
            <para>Creates a new line segment by mapping this line segment through a linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.LineSegment.SetStartEnd(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets coordinates StartX, StartY, EndX, EndY for the line segment. </para>
            </summary>
            <param name="startX">X-coordinate of the start point. </param>
            <param name="startY">Y-coordinate of the start point. </param>
            <param name="endX">X-coordinate of the end point. </param>
            <param name="endY">Y-coordinate of the end point. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ShapeException">Start and endpoint coordinates must be different. </exception>
        </member>
        <member name="M:Cognex.Vision.LineSegment.SetStartLengthRotation(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets StartX, StartY, Length and Rotation (in radians, from the x-axis) for the line segment. </para>
            </summary>
            <param name="startX">X-coordinate of the start point. </param>
            <param name="startY">Y-coordinate of the start point. </param>
            <param name="length">Length of the line segment. </param>
            <param name="rotation">Rotation of the line segment. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.LineSegment.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.LineSegment.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.LineSegment.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.LineSegment.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.LineSegment.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.LineSegment.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.LineSegment.op_Equality(Cognex.Vision.LineSegment,Cognex.Vision.LineSegment)">
            <summary>Compares the equality of two LineSegment objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.LineSegment.op_Inequality(Cognex.Vision.LineSegment,Cognex.Vision.LineSegment)">
            <summary>Compares the inequality of two LineSegment objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Line">
            <summary>
            <para>Class that represents a line. </para>
            </summary>
            <remarks>
            <para>Primary interface of a <see cref="T:Cognex.Vision.Line">Line</see>. A CogLine is a line of infinite length specified by a reference point and a rotation. The rotation is specified from the x-axis. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Line.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.Line.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Line.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Line.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Line.Adornment">
            <summary>
            <b>Get</b>
            <para>The reference point adornment for the line. </para>
            </summary>
            <remarks>
            <para>The <see cref="T:Cognex.Vision.LineAdornmentConstants">adornment</see> for the line.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.LineAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Line.Adornment">Adornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.LineAdornmentConstants">LineAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.Line.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.LineDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.Vision.Line">Line</see>. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Line.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Line.Rotation">
            <summary>
            <b>Get</b>
            <para>The angle (in radians, from the x-axis) of this directed line. The Rotation is normalized to the range -π to π. </para>
            </summary>
            <value>
            <b>Default Value: </b> 0.0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Line.Rotation">Rotation</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Line.X">
            <summary>
            <b>Get</b>
            <para>The X coordinate of the reference point on the line. </para>
            </summary>
            <remarks>
            <para>The x-coordinate of the reference point on the line.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 10 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Line.X">X</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Line.Y">
            <summary>
            <b>Get</b>
            <para>The Y coordinate of the reference point on the line. </para>
            </summary>
            <remarks>
            <para>The y-coordinate of the reference point on the line.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 10 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Line.Y">Y</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Line.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Line.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Line.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Line.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Line.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Line.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Line.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Line.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Line.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Line.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.Line.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Line.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Line.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Line.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Line.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Line.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Line.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Line.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.Line.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Line.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Line.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new shape that copies specified parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.Line">Line</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.Line">Line</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.Line">Line</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Line.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Line.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Line.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Line.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Line.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Line.GetDistanceRotation(System.Double@,System.Double@)">
            <summary>
            <para>Gets the line's Distance from the origin and its Rotation in radians from the x-axis. The Distance will be negative if the direction from the origin is reversed. </para>
            </summary>
            <param name="distance">The distance from the origin to the line. </param>
            <param name="rotation">The line's rotation, measured in radians from the x-axis. </param>
            <remarks>
            <para>Gets the line's distance from the origin and its rotation in radians from the x-axis. The distance is negative if the direction from the origin is reversed. See <see cref="M:Cognex.Vision.Line.SetDistanceRotation(System.Double,System.Double)">SetDistanceRotation()</see> for additional information and illustrations. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Line.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Line.GetXYRotation(System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Gets the line's <see cref="P:Cognex.Vision.Line.X">X</see> and <see cref="P:Cognex.Vision.Line.Y">Y</see> coordinate of the reference point and its <see cref="P:Cognex.Vision.Line.Rotation">Rotation</see>. The Rotation is measured in radians from the x-axis. </para>
            </summary>
            <param name="x">The x-coordinate of the line's reference point. </param>
            <param name="y">The y-coordinate of the line's reference point. </param>
            <param name="rotation">The line's rotation, measured in radians from the x-axis. </param>
        </member>
        <member name="M:Cognex.Vision.Line.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Line.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates a new line by mapping the line through a linear transform. </para>
            </summary>
            <param name="transform">The <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> used to map this <see cref="T:Cognex.Vision.Line">Line</see>. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped <see cref="T:Cognex.Vision.Line">Line</see>. </para>
            </returns>
            <remarks>
            <para>Creates a new line by mapping the line through a linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Line.SetDistanceRotation(System.Double,System.Double)">
            <summary>
            <para>Sets the X and Y properties of this line to the end of the vector (Distance, Rotation + 90 deg.) or (-Distance, Rotation - 90 deg.) for negative Distance. Sets the Rotation property to the specified Rotation. </para>
            </summary>
            <param name="distance">The distance from the origin to the line. </param>
            <param name="rotation">The line's rotation, measured in radians from the x-axis. </param>
            <remarks>
            <para>Sets the reference point and rotation of the line based on a vector.  The reference point of the line is the end of the vector ( <b>distance</b> , <b>rotation</b> + 90°). If <b>distance</b> is negative, the reference point is the end of the vector (- <b>distance</b> , <b>rotation</b> - 90°). <b>rotation</b> is specified in radians and normalized to the range -π to π.  You can also interpret the line as if it were parallel to the x-axis of a coordinate frame that is rotated <b>rotation</b> radians, and translated along the rotated y-axis by <b>distance</b>.  In the following figure, <b>distance</b> is 3 and <b>rotation</b> is 45° (π/2 radians).  And in the following figure, <b>distance</b> is -3 and <b>rotation</b> is 45° (π/2 radians). </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Line.SetFromLineSegment(Cognex.Vision.LineSegment)">
            <summary>
            <para>Sets the line parameters from the specified CogLineSegment. StartX, StartY will be used as the reference point. The direction of the line is from the segment's StartX, StartY to the EndX, EndY. </para>
            </summary>
            <param name="lineSegment">The line segment used to specify the line. </param>
            <exception cref="T:Cognex.Vision.ShapeException">The points designated by the line segment are not unique </exception>
            <remarks>
            <para>Sets the line parameters from the specified <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>. The line segment's <see cref="P:Cognex.Vision.LineSegment.StartX">StartX</see> and <see cref="P:Cognex.Vision.LineSegment.StartY">StartY</see> coordinates are used as the line's reference point. The direction of the line is from the line segment's ( <see cref="P:Cognex.Vision.LineSegment.StartX">StartX</see>, <see cref="P:Cognex.Vision.LineSegment.StartY">StartY</see> ) point to its ( <see cref="P:Cognex.Vision.LineSegment.EndX">EndX</see>, <see cref="P:Cognex.Vision.LineSegment.EndY">EndY</see> ) point. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Line.SetFromStartXYEndXY(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the line parameters from a pair of X and Y coordinates that are unique points on the line. The first coordinate pair will be used as the reference point on the line. The direction of the line is from the first point to the second. </para>
            </summary>
            <param name="x0">The x-coordinate of the first point. This is the x-coordinate of the line's reference point. </param>
            <param name="y0">The y-coordinate of the first point. This is the y-coordinate of the line's reference point. </param>
            <param name="x1">The x-coordinate of the second point. </param>
            <param name="y1">The y-coordinate of the second point. </param>
            <exception cref="T:Cognex.Vision.ShapeException">The points specified are not unique </exception>
            <remarks>
            <para>Sets the line properties from a pair of x-, y-coordinates that are unique points on the line. The first coordinate pair is the reference point of the line. The direction of the line is from the first point to the second. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Line.SetXYRotation(System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the line's <see cref="P:Cognex.Vision.Line.X">X</see> and <see cref="P:Cognex.Vision.Line.Y">Y</see> reference point and its Rotation in radians from the x-axis. The <see cref="P:Cognex.Vision.Line.Rotation">Rotation</see> is normalized to the range -π to π. </para>
            </summary>
            <param name="x">The x-coordinate of the line's reference point. </param>
            <param name="y">The y-coordinate of the line's reference point. </param>
            <param name="rotation">The line's rotation, measured in radians from the x-axis. </param>
        </member>
        <member name="M:Cognex.Vision.Line.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Line.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Line.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Line.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Line.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Line.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Line.op_Equality(Cognex.Vision.Line,Cognex.Vision.Line)">
            <summary>Compares the equality of two Line objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Line.op_Inequality(Cognex.Vision.Line,Cognex.Vision.Line)">
            <summary>Compares the inequality of two Line objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.IImage16PixelMemory">
            <summary>
            <para>Interface to an object that provides direct pointer access to 8-bit image pixel memory. </para>
            </summary>
            <remarks>
            <para>Use <see cref="M:Cognex.Vision.IImage16GreyData.Get16GreyPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)">Get8GreyPixelMemory</see> to get an <see cref="T:Cognex.Vision.IImage16PixelMemory">IImage16PixelMemory</see> object. <see cref="T:Cognex.Vision.IImage16PixelMemory">IImage16PixelMemory</see> objects are intended for temporary use within functions that read or write pixel data. Caching an <see cref="T:Cognex.Vision.IImage8PixelMemory">IImage16PixelMemory</see> object for long periods of time could lead to memory congestion. If you request <see cref="T:Cognex.Vision.ImageDataModeConstants">read/write</see> or <see cref="T:Cognex.Vision.ImageDataModeConstants">write-only</see> access to the pixel memory when you call <see cref="M:Cognex.Vision.IImage16GreyData.Get16GreyPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)">Get8GreyPixelMemory</see>, the pixel memory may be copied internally. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IImage16PixelMemory.Height">
            <summary>
            <para>Returns the height of the pixel data. </para>
            </summary>
            <returns>
            <para>The height of the pixel data. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.IImage16PixelMemory.Scan0">
            <summary>
            <para>Returns the address of the upper-left pixel. </para>
            </summary>
            <returns>
            <para>The address of the upper-left pixel. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.IImage16PixelMemory.Stride">
            <summary>
            <para>Returns the offset in pixels from one row to the next. May be positive or negative. </para>
            </summary>
            <returns>
            <para>The offset in pixels from one row to the next. May be positive or negative. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.IImage16PixelMemory.Width">
            <summary>
            <para>Returns the width of the pixel data. </para>
            </summary>
            <returns>
            <para>The width of the pixel data. </para>
            </returns>
        </member>
        <member name="T:Cognex.Vision.IImage8PixelMemory">
            <summary>
            <para>Interface to an object that provides direct pointer access to 8-bit image pixel memory. </para>
            </summary>
            <remarks>
            <para>Use <see cref="M:Cognex.Vision.IImage8GreyData.Get8GreyPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)">Get8GreyPixelMemory</see> to get an <see cref="T:Cognex.Vision.IImage8PixelMemory">IImage8PixelMemory</see> object. <see cref="T:Cognex.Vision.IImage8PixelMemory">IImage8PixelMemory</see> objects are intended for temporary use within functions that read or write pixel data. Caching an <see cref="T:Cognex.Vision.IImage8PixelMemory">IImage8PixelMemory</see> object for long periods of time could lead to memory congestion. If you request <see cref="T:Cognex.Vision.ImageDataModeConstants">read/write</see> or <see cref="T:Cognex.Vision.ImageDataModeConstants">write-only</see> access to the pixel memory when you call <see cref="M:Cognex.Vision.IImage8GreyData.Get8GreyPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)">Get8GreyPixelMemory</see>, the pixel memory may be copied internally. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.IImage8PixelMemory.Height">
            <summary>
            <para>Returns the height of the pixel data. </para>
            </summary>
            <returns>
            <para>The height of the pixel data. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.IImage8PixelMemory.Scan0">
            <summary>
            <para>Returns the address of the upper-left pixel. </para>
            </summary>
            <returns>
            <para>The address of the upper-left pixel. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.IImage8PixelMemory.Stride">
            <summary>
            <para>Returns the offset in pixels from one row to the next. May be positive or negative. </para>
            </summary>
            <returns>
            <para>The offset in pixels from one row to the next. May be positive or negative. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.IImage8PixelMemory.Width">
            <summary>
            <para>Returns the width of the pixel data. </para>
            </summary>
            <returns>
            <para>The width of the pixel data. </para>
            </returns>
        </member>
        <member name="T:Cognex.Vision.Circle">
            <summary>
            <para>Class that represents a circle. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Circle.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.Circle.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Circle.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Circle.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Circle.Area">
            <summary>
            <para>Area of this circle. </para>
            </summary>
            <returns>
            <para>Returns the area of this circle in units specified by the <see cref="P:Cognex.Vision.Circle.SelectedSpaceName">selected coordinate space</see>. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Circle.CenterX">
            <summary>
            <b>Get</b>
            <para>X coordinate of the center of this circle. </para>
            </summary>
            <value>
            <b>Default Value: </b> 70 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Circle.CenterX">CenterX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Circle.CenterY">
            <summary>
            <b>Get</b>
            <para>Y coordinate of the center of this circle. </para>
            </summary>
            <value>
            <b>Default Value: </b> 70 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Circle.CenterY">CenterY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Circle.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which interactive <see cref="T:Cognex.Vision.CircleDOFConstants">degrees of freedom</see> (DOF) are enabled for this circle. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Circle.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfGraphicDOFEnableBase">SfGraphicDOFEnableBase</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Circle.Perimeter">
            <summary>
            <para>Perimeter length of this circle. </para>
            </summary>
            <returns>
            <para>Returns the perimeter of this circle in units specified by the <see cref="P:Cognex.Vision.Circle.SelectedSpaceName">selected coordinate space</see>. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Circle.Radius">
            <summary>
            <b>Get</b>
            <para>Radius of this circle. </para>
            </summary>
            <value>
            <b>Default Value: </b> 50 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Circle.Radius">Radius</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The new radius is &lt;=0. </exception>
        </member>
        <member name="P:Cognex.Vision.Circle.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Circle.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Circle.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Circle.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Circle.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Circle.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Circle.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Circle.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Circle.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Circle.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.Circle.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Circle.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Circle.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Circle.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Circle.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Circle.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Circle.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Circle.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.Circle.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Circle.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Circle.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates a new circle that copies the specified attributes from this circle. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied circle </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Circle.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Circle.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Circle.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Circle.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Circle.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Circle.GetCenterRadius(System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Retrieve CenterX, CenterY, Radius of the circle. </para>
            </summary>
            <param name="centerX">X-coordinate of the center of the circle. </param>
            <param name="centerY">Y-coordinate of the center of the circle </param>
            <param name="radius">Radius of the circle. </param>
            <remarks>
            <para>Retrieve CenterX, CenterY, Radius of the circle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Circle.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Circle.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Circle.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates a new ellipse by mapping this circle through a linear transform. </para>
            </summary>
            <param name="transform">The <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> used to map this <see cref="T:Cognex.Vision.Circle">Circle</see>. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped <see cref="T:Cognex.Vision.Circle">Circle</see>.</para>
            </returns>
            <remarks>
            <para>Creates a new circle by mapping this circle through a linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Circle.SetCenterRadius(System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets CenterX, CenterY, Radius of the circle. </para>
            </summary>
            <param name="centerX">X-coordinate of the center of the circle. </param>
            <param name="centerY">Y-coordinate of the center of the circle </param>
            <param name="radius">Radius of the circle. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Circle.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The new <b>radius</b> is &lt;=0. </exception>
            <remarks>
            <para>Sets the <see cref="P:Cognex.Vision.Circle.CenterX">CenterX</see>, <see cref="P:Cognex.Vision.Circle.CenterY">CenterY</see>, and <see cref="P:Cognex.Vision.Circle.Radius">Radius</see> of the circle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Circle.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Circle.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Circle.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Circle.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Circle.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Circle.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Circle.op_Equality(Cognex.Vision.Circle,Cognex.Vision.Circle)">
            <summary>Compares the equality of two Circle objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Circle.op_Inequality(Cognex.Vision.Circle,Cognex.Vision.Circle)">
            <summary>Compares the inequality of two Circle objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.CircularArc">
            <summary>
            <para>A circular arc is a portion of a circle. You specify this shape using the usual circle parameters and two more: AngleStart and AngleSpan. AngleStart defines the angle at which the arc begins and AngleSpan defines the angular extent of the arc. </para>
            </summary>
            <remarks>
            <para>A circular arc is a portion of a circle. You specify this shape using the usual circle parameters and two additional ones: <see cref="P:Cognex.Vision.CircularArc.AngleStart">AngleStart</see>, the angle at which the arc begins, and <see cref="P:Cognex.Vision.CircularArc.AngleSpan">AngleSpan</see>, the angular extent of the arc. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularArc.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.CircularArc.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.CircularArc.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.CircularArc.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularArc.AngleSpan">
            <summary>
            <b>Get</b>
            <para>Gets the angle span (in radians) of this circular arc. Note that this can be positive or negative (but not exactly 0), and implies an arc direction. </para>
            </summary>
            <remarks>
            <para>Gets the angle span of this circular arc in radians. The angle can be any positive or negative value, but not exactly 0; the sign determines the direction of the arc. If the absolute value of the angle span is greater than 2π, the arc wraps around on itself. It is not normalized to the range −2π to 2π. For example, <b>AngleSpan</b> of +π is an arc that describes half of a full circle, and a span of −π describes the other half in the opposite direction.  To simply reverse the direction of an arc, you can use the following: AngleStart = AngleStart + AngleSpan AngleSpan = −AngleSpan</para>
            </remarks>
            <value>
            <b>Default Value: </b> π/2 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularArc.AngleSpan">AngleSpan</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfArcLength">SfArcLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfStartX">SfStartX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfStartY">SfStartY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfEndX">SfEndX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfEndY">SfEndY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfMidpointX">SfMidpointX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfMidpointY">SfMidpointY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is zero. </exception>
        </member>
        <member name="P:Cognex.Vision.CircularArc.AngleStart">
            <summary>
            <b>Get</b>
            <para>Gets the start angle (in radians) of this circular arc. </para>
            </summary>
            <remarks>
            <para>Gets the start angle of this circular arc. The angle is measured in radians from the x-axis. <see cref="P:Cognex.Vision.CircularArc.AngleStart">AngleStart</see> is normalized to a value between +π and −π.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularArc.AngleStart">AngleStart</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfArcLength">SfArcLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfStartX">SfStartX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfStartY">SfStartY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfEndX">SfEndX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfEndY">SfEndY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfMidpointX">SfMidpointX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfMidpointY">SfMidpointY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.ArcLength">
            <summary>
            <para>Returns the length of this circular arc. </para>
            </summary>
            <remarks>
            <para>Returns the length of this circular arc. As <see cref="P:Cognex.Vision.CircularArc.AngleSpan">AngleSpan</see> becomes greater than 2π, the length continues to increase. This value is always positive. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.CenterX">
            <summary>
            <b>Get</b>
            <para>Gets the X coordinate of the center of the circle. </para>
            </summary>
            <remarks>
            <para>Gets the x-coordinate of the center of the underlying circle.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 70 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularArc.CenterX">CenterX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfArcLength">SfArcLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfStartX">SfStartX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfStartY">SfStartY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfEndX">SfEndX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfEndY">SfEndY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfMidpointX">SfMidpointX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfMidpointY">SfMidpointY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.CenterY">
            <summary>
            <b>Get</b>
            <para>Gets the Y coordinate of the center of the circle. </para>
            </summary>
            <remarks>
            <para>Gets the y-coordinate of the center of the underlying circle.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 70 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularArc.CenterY">CenterY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfArcLength">SfArcLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfStartX">SfStartX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfStartY">SfStartY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfEndX">SfEndX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfEndY">SfEndY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfMidpointX">SfMidpointX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfMidpointY">SfMidpointY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.DirectionAdornment">
            <summary>
            <b>Get</b>
            <para>Gets the arc direction adornment of this circular arc. </para>
            </summary>
            <remarks>
            <para>Gets the direction adornment of this circular arc which indicates the direction from the start point to the end point.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.CircularArcDirectionAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularArc.DirectionAdornment">DirectionAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfDirectionAdornment">SfDirectionAdornment</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.CircularArcDirectionAdornmentConstants">CircularArcDirectionAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.CircularArc.DisplayedRadiusInScreenPixels">
            <summary>
            <b>Get</b>
            <para>Gets the radius in screen pixels that the arc will be drawn with if DisplayMode is <see cref="F:Cognex.Vision.CircularArcDisplayModeConstants.Screen">Screen</see>. </para>
            </summary>
            <remarks>
            <para>All of the geometric functions in <see cref="T:Cognex.Vision.CircularArc">CircularArc</see> use only <see cref="P:Cognex.Vision.CircularArc.Radius">Radius</see> to compute their results. This property only affects how the shape is rendered.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 15 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularArc.DisplayedRadiusInScreenPixels">DisplayedRadiusInScreenPixels</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfDisplayedRadiusInScreenPixels">SfDisplayedRadiusInScreenPixels</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> &lt;= 0.0 </exception>
        </member>
        <member name="P:Cognex.Vision.CircularArc.DisplayMode">
            <summary>
            <b>Get</b>
            <para>Returns the mode in which the arc will be displayed, either with the screen radius (<see cref="P:Cognex.Vision.CircularArc.DisplayedRadiusInScreenPixels">DisplayedRadiusInScreenPixels</see>) or the normal geometric radius (<see cref="P:Cognex.Vision.CircularArc.Radius">Radius</see>). </para>
            </summary>
            <remarks>
            <para>Gets whether the arc is drawn using the geometric radius or constant screen pixels. When DisplayMode is <see cref="T:Cognex.Vision.CircularArcDisplayModeConstants">Mathematical</see>, draw the arc as a geometric shape with the radius <see cref="P:Cognex.Vision.CircularArc.Radius">Radius</see>. When <see cref="P:Cognex.Vision.CircularArc.DisplayMode">DisplayMode</see> is <see cref="T:Cognex.Vision.CircularArcDisplayModeConstants">Screen</see>, the radius is used <see cref="P:Cognex.Vision.CircularArc.DisplayedRadiusInScreenPixels">DisplayedRadiusInScreenPixels</see> to draw the arc. In this mode, the displayed size of the arc is constant regardless of the zoom level set. The mode affects only the way that the arc is displayed. Changing the mode does not change any of the geometric properties of the arc such as its <see cref="P:Cognex.Vision.CircularArc.ArcLength">ArcLength</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.CircularArcDisplayModeConstants">Mathematical</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularArc.DisplayMode">DisplayMode</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfDisplayMode">SfDisplayMode</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.CircularArcDisplayModeConstants">CircularArcDisplayModeConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.CircularArc.EndPointAdornment">
            <summary>
            <b>Get</b>
            <para>Returns the end point adornment of this circular arc. </para>
            </summary>
            <remarks>
            <para>Gets the endpoint adornment of this circular arc.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.CircularArcAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularArc.EndPointAdornment">EndPointAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfEndPointAdornment">SfEndPointAdornment</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.CircularArcAdornmentConstants">CircularArcAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.CircularArc.EndX">
            <summary>
            <para>Returns the x coordinate of the arc end point (the point at the AngleStart + AngleSpan end of the arc). </para>
            </summary>
            <remarks>
            <para>Returns the x-coordinate of the arc end point. This is the point at the <see cref="P:Cognex.Vision.CircularArc.AngleStart">AngleStart</see> + <see cref="P:Cognex.Vision.CircularArc.AngleSpan">AngleSpan</see> end of the arc. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.EndY">
            <summary>
            <para>Returns the y coordinate of the arc end point (the point at the AngleStart + AngleSpan end of the arc). </para>
            </summary>
            <remarks>
            <para>Returns the y-coordinate of the arc end point. This is the point at the <see cref="P:Cognex.Vision.CircularArc.AngleStart">AngleStart</see> + <see cref="P:Cognex.Vision.CircularArc.AngleSpan">AngleSpan</see> end of the arc. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which interactive <see cref="T:Cognex.Vision.CircularArcDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularArc.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfGraphicDOFEnableBase">SfGraphicDOFEnableBase</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.MidpointX">
            <summary>
            <para>Returns the x coordinate of the arc mid-point (the point on the arc halfway between 'start' and 'end'). </para>
            </summary>
            <remarks>
            <para>Returns the x-coordinate of the midpoint of the arc. This is the point on the arc halfway between ( <see cref="P:Cognex.Vision.CircularArc.StartX">StartX</see>, <see cref="P:Cognex.Vision.CircularArc.StartY">StartY</see> ) and ( <see cref="P:Cognex.Vision.CircularArc.EndX">EndX</see>, <see cref="P:Cognex.Vision.CircularArc.EndY">EndY</see> ). </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.MidpointY">
            <summary>
            <para>Returns the y coordinate of the arc mid-point. </para>
            </summary>
            <remarks>
            <para>Returns the y-coordinate of the midpoint of the arc. This is the point on the arc halfway between ( <see cref="P:Cognex.Vision.CircularArc.StartX">StartX</see>, <see cref="P:Cognex.Vision.CircularArc.StartY">StartY</see> ) and ( <see cref="P:Cognex.Vision.CircularArc.EndX">EndX</see>, <see cref="P:Cognex.Vision.CircularArc.EndY">EndY</see> ). </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.Radius">
            <summary>
            <b>Get</b>
            <para>Gets the radius of the circle. </para>
            </summary>
            <remarks>
            <para>Radius of this circular arc.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 50 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularArc.Radius">Radius</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfArcLength">SfArcLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfStartX">SfStartX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfStartY">SfStartY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfEndX">SfEndX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfEndY">SfEndY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfMidpointX">SfMidpointX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfMidpointY">SfMidpointY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> &lt;= 0.0 </exception>
        </member>
        <member name="P:Cognex.Vision.CircularArc.StartPointAdornment">
            <summary>
            <b>Get</b>
            <para>Gets the start point adornment of this circular arc. </para>
            </summary>
            <remarks>
            <para>Gets the start point adornment of this circular arc.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.CircularArcAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularArc.StartPointAdornment">StartPointAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfStartPointAdornment">SfStartPointAdornment</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.CircularArcAdornmentConstants">CircularArcAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.CircularArc.StartX">
            <summary>
            <para>Returns the x coordinate of the arc start point (the point at the AngleStart end of the arc). </para>
            </summary>
            <remarks>
            <para>The x-coordinate of the start point of the arc. This is the point at the <see cref="P:Cognex.Vision.CircularArc.AngleStart">AngleStart</see> end of the arc. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.StartY">
            <summary>
            <para>Returns the y coordinate of the arc start point (the point at the AngleStart end of the arc). </para>
            </summary>
            <remarks>
            <para>The y-coordinate of the start point of the arc. This is the point at the <see cref="P:Cognex.Vision.CircularArc.AngleStart">AngleStart</see> end of the arc. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularArc.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.CircularArc.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.CircularArc.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularArc.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularArc.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularArc.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.CircularArc.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.CircularArc.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularArc.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularArc.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularArc.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularArc.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularArc.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularArc.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.CircularArc.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularArc.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularArc.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates and returns a new circular arc, copying the specified parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>
            </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.CircularArc">CircularArc</see> that copies the specified attributes from this <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularArc.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularArc.CreateCircle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates and returns a new circle shape, copying the specified parameters, that is the full circle defined by this circular arc. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The circle. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.Circle">Circle</see> based on the <see cref="P:Cognex.Vision.CircularArc.CenterX">CenterX</see>, <see cref="P:Cognex.Vision.CircularArc.CenterY">CenterY</see>, and <see cref="P:Cognex.Vision.CircularArc.Radius">Radius</see> properties of the arc. <b>copyFlags</b> specifies which aspects of the arc are copied to the circle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularArc.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularArc.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularArc.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularArc.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularArc.GetCenterRadiusAngleStartAngleSpan(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Gets CenterX, CenterY, Radius, AngleStart, and AngleSpan of this circular arc. </para>
            </summary>
            <param name="centerX">The x-coordinate of the center of the arc. </param>
            <param name="centerY">The y-coordinate of the center of the arc. </param>
            <param name="radius">The radius of the arc. </param>
            <param name="angleStart">The <see cref="P:Cognex.Vision.CircularArc.AngleStart">AngleStart</see> of the arc. </param>
            <param name="angleSpan">The <see cref="P:Cognex.Vision.CircularArc.AngleSpan">AngleSpan</see> of the arc. </param>
            <remarks>
            <para>Gets the <see cref="P:Cognex.Vision.CircularArc.CenterX">CenterX</see>, <see cref="P:Cognex.Vision.CircularArc.CenterY">CenterY</see>, <see cref="P:Cognex.Vision.CircularArc.Radius">Radius</see>, <see cref="P:Cognex.Vision.CircularArc.AngleStart">AngleStart</see>, and <see cref="P:Cognex.Vision.CircularArc.AngleSpan">AngleSpan</see> of this circular arc. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularArc.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CircularArc.GetStartEnd(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Gets start and end point coordinates of the circular arc. </para>
            </summary>
            <param name="startX">The x-coordinate of the start point. </param>
            <param name="startY">The y-coordinate of the start point. </param>
            <param name="endX">The x-coordinate of the endpoint. </param>
            <param name="endY">The y-coordinate of the endpoint. </param>
            <remarks>
            <para>Gets the coordinates of the start and endpoints of the circular arc. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularArc.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularArc.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates a new elliptical arc (copying the specified parameters) by mapping this circular arc through the given linear transform. </para>
            </summary>
            <param name="transform">The <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> used to map this <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>. </para>
            </returns>
            <remarks>
            <para>Creates a new elliptical arc by mapping this circular arc through a linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularArc.SetCenterRadiusAngleStartAngleSpan(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets CenterX, CenterY, Radius, AngleStart (in radians) and AngleSpan (in radians) of this circular arc. </para>
            </summary>
            <param name="centerX">The x-coordinate of the center of the arc. </param>
            <param name="centerY">The y-coordinate of the center of the arc. </param>
            <param name="radius">The radius of the arc. </param>
            <param name="angleStart">The <see cref="P:Cognex.Vision.CircularArc.AngleStart">AngleStart</see> of the arc. </param>
            <param name="angleSpan">The <see cref="P:Cognex.Vision.CircularArc.AngleSpan">AngleSpan</see> of the arc. (The default value for this parameter is actually π/2.) </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfArcLength">SfArcLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfStartX">SfStartX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfStartY">SfStartY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfEndX">SfEndX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfEndY">SfEndY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfMidpointX">SfMidpointX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularArc.SfMidpointY">SfMidpointY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>radius</b> &lt;= 0.0 </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>angleSpan</b> = 0.0 </exception>
            <remarks>
            <para>Sets the <see cref="P:Cognex.Vision.CircularArc.CenterX">CenterX</see>, <see cref="P:Cognex.Vision.CircularArc.CenterY">CenterY</see>, <see cref="P:Cognex.Vision.CircularArc.Radius">Radius</see>, <see cref="P:Cognex.Vision.CircularArc.AngleStart">AngleStart</see> and <see cref="P:Cognex.Vision.CircularArc.AngleSpan">AngleSpan</see> of this circular arc. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularArc.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CircularArc.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CircularArc.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CircularArc.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CircularArc.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.CircularArc.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CircularArc.op_Equality(Cognex.Vision.CircularArc,Cognex.Vision.CircularArc)">
            <summary>Compares the equality of two CircularArc objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CircularArc.op_Inequality(Cognex.Vision.CircularArc,Cognex.Vision.CircularArc)">
            <summary>Compares the inequality of two CircularArc objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.CircularAnnulusSection">
            <summary>
            <para>A circular annulus section is a four-sided shape bounded by two circular arcs and two radial lines. The arcs are scaled copies of each other, and the radial lines connect the endpoints of the arcs. You specify the ( <see cref="P:Cognex.Vision.CircularAnnulusSection.CenterX">CenterX</see>, <see cref="P:Cognex.Vision.CircularAnnulusSection.CenterY">CenterY</see> ), <see cref="P:Cognex.Vision.CircularAnnulusSection.Radius">Radius</see>, <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleStart">AngleStart</see> and <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleSpan">AngleSpan</see> which define the start arc and then provide a <see cref="P:Cognex.Vision.CircularAnnulusSection.RadialScale">RadialScale</see> that defines the end arc. If the <see cref="P:Cognex.Vision.CircularAnnulusSection.RadialScale">RadialScale</see> is less than 1, the start arc is the outer arc. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.CircularAnnulusSection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.CircularAnnulusSection.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.CircularAnnulusSection.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.AngleSpan">
            <summary>
            <b>Get</b>
            <para>Gets the angle span (in radians) of this annulus section. Note that this can be positive or negative, and implies arc direction. </para>
            </summary>
            <remarks>
            <para>Gets the angle span of the start arc of this circular annulus section in radians. The angle can be any positive or negative value, but not exactly 0; the sign determines the direction of the arc. If the absolute value of the angle span is greater than 2π, the arc wraps around on itself. It is not normalized to the range −2π to 2π For example, an <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleSpan">AngleSpan</see> of +π is an arc that describes half of a full circle, and a span of −π describes the other half in the opposite direction.</para>
            </remarks>
            <value>
            <b>Default Value: </b> π/2 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleSpan">AngleSpan</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is zero. </exception>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.AngleStart">
            <summary>
            <b>Get</b>
            <para>Gets the starting angle (in radians) of this annulus section. </para>
            </summary>
            <remarks>
            <para>Gets the start angle of this annulus section. The angle is measured in radians from the x-axis. <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleStart">AngleStart</see> is normalized to a value between +π and −π.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleStart">AngleStart</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.ArcDirectionAdornment">
            <summary>
            <b>Get</b>
            <para>Gets the arc direction adornment of this annulus section. </para>
            </summary>
            <remarks>
            <para>Gets the arc direction adornment of this circular annulus section. The adornment indicates the direction from the start points of the arcs to the end points.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.CircularAnnulusSectionDirectionAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularAnnulusSection.ArcDirectionAdornment">ArcDirectionAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfArcDirectionAdornment">SfArcDirectionAdornment</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.CircularAnnulusSectionDirectionAdornmentConstants">CircularAnnulusSectionDirectionAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.Area">
            <summary>
            <para>Returns the area enclosed by this circular annulus section. </para>
            </summary>
            <remarks>
            <para>Returns the area enclosed by this circular annulus section. If <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleSpan">AngleSpan</see> is greater than 2π, the area is the same as if were only 2π. This value is always positive. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.CenterArcAdornment">
            <summary>
            <b>Get</b>
            <para>Gets the center arc adornment of this annulus section. </para>
            </summary>
            <remarks>
            <para>Gets the center arc adornment of this annulus section. This property specifies whether and how the center arc is drawn.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.CircularAnnulusSectionCenterArcAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularAnnulusSection.CenterArcAdornment">CenterArcAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterArcAdornment">SfCenterArcAdornment</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.CircularAnnulusSectionCenterArcAdornmentConstants">CircularAnnulusSectionCenterArcAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.CenterX">
            <summary>
            <b>Get</b>
            <para>Gets the X coordinate of the center of the circle defined by this circular annulus section. </para>
            </summary>
            <remarks>
            <para>Gets the x-coordinate of the center of the underlying circle.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 70 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularAnnulusSection.CenterX">CenterX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.CenterY">
            <summary>
            <b>Get</b>
            <para>Gets the Y coordinate of the center of the circle defined by this circular annulus section. </para>
            </summary>
            <remarks>
            <para>Gets the y-coordinate of the center of the underlying circle.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 70 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularAnnulusSection.CenterY">CenterY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which interactive <see cref="T:Cognex.Vision.CircularAnnulusSectionDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularAnnulusSection.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfGraphicDOFEnableBase">SfGraphicDOFEnableBase</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.ManipArcFraction">
            <summary>
            <b>Get</b>
            <para>Returns the fractional distance (between the start and end arcs) where the manipulation arc is drawn. During interactive manipulation, the shape usually resets this fraction to 0.5 but users may reset it sooner if they desire. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularAnnulusSection.ManipArcFraction">ManipArcFraction</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfManipArcFraction">SfManipArcFraction</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.Perimeter">
            <summary>
            <para>Returns the perimeter length of this circular annulus section. </para>
            </summary>
            <remarks>
            <para>Returns the perimeter length of this circular annulus section. As <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleSpan">AngleSpan</see> becomes greater than 2π, the length continues to increase. This value is always positive. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.RadialDirectionAdornment">
            <summary>
            <b>Get</b>
            <para>Gets the radial direction adornment of this annulus section. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="P:Cognex.Vision.CircularAnnulusSection.RadialScale">radial direction</see> adornment of this annulus section.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.CircularAnnulusSectionDirectionAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularAnnulusSection.RadialDirectionAdornment">RadialDirectionAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadialDirectionAdornment">SfRadialDirectionAdornment</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.CircularAnnulusSectionDirectionAdornmentConstants">CircularAnnulusSectionDirectionAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.RadialScale">
            <summary>
            <b>Get</b>
            <para>Gets the radial scale of this annular section. Note that this can be less than or greater than 1 (but not equal to 1, and not &lt;=0) and therefore implies a radial direction. </para>
            </summary>
            <remarks>
            <para>Gets the radial scale of this annulus section. The radial scale determines the relative sizes of the two arcs that make up the annulus section. The two arcs are scaled copies of each other. The start arc is specified by setting the <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleStart">AngleStart</see> and <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleSpan">AngleSpan</see> properties. The end arc is specified by applying a radial scale to the start arc. <see cref="P:Cognex.Vision.CircularAnnulusSection.RadialScale">RadialScale</see> determines which arc is the inner arc and which arc is the outer arc. It also implies a radial direction as shown: <b>Effect of RadialScale Values</b> If <b>RadialScale</b> is less than 1:  - <b>Start Arc</b>: Outer  - <b>End Arc</b>: Inner  - <b>Radial Direction</b>: Toward the center  If <b>RadialScale</b> is greater than 1:  - <b>Start Arc</b>: Inner  - <b>End Arc</b>: Outer  - <b>Radial Direction</b>: Away from the center <see cref="P:Cognex.Vision.CircularAnnulusSection.RadialScale">RadialScale</see> cannot be exactly 1.0, nor can it be less than or equal to zero.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0.5 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularAnnulusSection.RadialScale">RadialScale</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> &lt;= 0.0 or <b>Value</b> = 1.0 </exception>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.Radius">
            <summary>
            <b>Get</b>
            <para>Gets the Radius of the start arc of this annulus section. Note this could be either the inner arc or the outer arc depending on whether RadialScale is greater than or less than 1.0. </para>
            </summary>
            <remarks>
            <para>Gets the radius of the start arc of this annulus section. If <see cref="P:Cognex.Vision.CircularAnnulusSection.RadialScale">RadialScale</see> is less than 1, the radius is from the center to the outer arc; if it is greater than 1, the radius is from the center to the inner arc.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 50 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CircularAnnulusSection.Radius">Radius</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> &lt;= 0.0 </exception>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CircularAnnulusSection.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates a new circular annulus section, copying the specified parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>
            </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see> that copies the specified attributes from this <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.CreateCircularArc(System.Double,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates a new circular arc (copying the specified parameters) defined by this circular annulus section at the given radial fraction between the start and end arcs. For example, specify 0 for the start arc, 0.5 for the center arc, and 1 for the end arc. </para>
            </summary>
            <param name="radialFraction">Specifies the arc in relation to the section. Specify zero for the start arc, 0.5 for the center arc, and 1.0 for the end arc, or other values for intermediate arcs. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The new circular arc. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentException">(1 + <b>radialFraction</b> *( <see cref="P:Cognex.Vision.CircularAnnulusSection.RadialScale">RadialScale</see> − 1)) &lt;= 0.0 </exception>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.CircularArc">CircularArc</see> based on this circular annulus section as defined by the radial fraction between the start and end arcs. Specify zero for the start arc, 0.5 for the center arc, and 1.0 for the end arc. <b>copyFlags</b> specifies which aspects of the arc are copied to the new shape. Although you can specify <b>radialFraction</b> values less than zero or greater than 1, this function will return an error if the resulting radius would be less than or equal to zero. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.GetCenterRadiusAngleStartAngleSpanRadialScale(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Gets CenterX, CenterY, Radius, AngleStart (in radians), AngleSpan (in radians) and RadialScale of the circular annulus section. </para>
            </summary>
            <param name="centerX">The x-coordinate of the center of this circular annulus section. </param>
            <param name="centerY">The y-coordinate of the center of this circular annulus section. </param>
            <param name="radius">The <see cref="P:Cognex.Vision.CircularAnnulusSection.Radius">Radius</see> of the annular section. </param>
            <param name="angleStart">The <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleStart">AngleStart</see>. </param>
            <param name="angleSpan">The <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleSpan">AngleSpan</see>. </param>
            <param name="radialScale">The <see cref="P:Cognex.Vision.CircularAnnulusSection.RadialScale">RadialScale</see> of the annular section. </param>
            <remarks>
            <para>Gets <see cref="P:Cognex.Vision.CircularAnnulusSection.CenterX">CenterX</see>, <see cref="P:Cognex.Vision.CircularAnnulusSection.CenterY">CenterY</see>, <see cref="P:Cognex.Vision.CircularAnnulusSection.Radius">Radius</see>, <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleStart">AngleStart</see>, <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleSpan">AngleSpan</see> and <see cref="P:Cognex.Vision.CircularAnnulusSection.RadialScale">RadialScale</see> of the circular annulus section. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.GetCornerWidthHeightRotationCurve(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Gets corner, width, height, rotation and curvature of the circular annulus section. </para>
            </summary>
            <param name="cornerX">The x-coordinate of the origin corner of this circular annulus section. </param>
            <param name="cornerY">The y-coordinate of the origin corner of this circular annulus section. </param>
            <param name="width">The width of this circular annulus section. It is the length of the arc that lies halfway between the inner and outer arcs. It is always positive. </param>
            <param name="height">The height of this circular annulus section. It is the signed distance between the inner and outer arcs. If the curve is positive, the height is positive when the vector from the origin corner to the other arc points away from the circle center. If the curve is negative, the height is positive when the vector points towards the circle center. </param>
            <param name="rotation">The rotation (in radians from the x-axis towards the y-axis) of the circular annulus section. This is the angle of the vector from the circle center to the origin corner. Equivalent to angleStart. </param>
            <param name="curve">The angular span (in radians from the x-axis towards the y-axis) of the circular annulus section. It measures the angle (about the circle center) traversed by the circular arc as you move from the origin corner to the other end of the arc. This signed angle is equivalent to angleSpan. </param>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates a new elliptical annulus section (copying the specified parameters) by mapping this circular annulus section through the given linear transform. </para>
            </summary>
            <param name="transform">The <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> used to map this <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>transform</b> is NULL. </exception>
            <remarks>
            <para>Creates a new elliptical annulus section by mapping this circular annulus section through a linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.SetCenterRadiusAngleStartAngleSpanRadialScale(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets CenterX, CenterY, Radius, AngleStart (in radians), AngleSpan (in radians) and RadialScale of the circular annulus section. </para>
            </summary>
            <param name="centerX">The x-coordinate of the center of this circular annulus section. </param>
            <param name="centerY">The y-coordinate of the center of this circular annulus section. </param>
            <param name="radius">The <see cref="P:Cognex.Vision.CircularAnnulusSection.Radius">Radius</see> of the annular section. </param>
            <param name="angleStart">The <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleStart">AngleStart</see>. </param>
            <param name="angleSpan">The <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleSpan">AngleSpan</see>. (The default value for this parameter is actually π/2.) </param>
            <param name="radialScale">The <see cref="P:Cognex.Vision.CircularAnnulusSection.RadialScale">RadialScale</see> of the annular section. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the shape changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadius">SfRadius</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>radius</b> &lt;= 0.0 </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>angleSpan</b> = 0.0 </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>radialScale</b> &lt;= 0.0 or <b>radialScale</b> = 1.0 </exception>
            <remarks>
            <para>Sets <see cref="P:Cognex.Vision.CircularAnnulusSection.CenterX">CenterX</see>, <see cref="P:Cognex.Vision.CircularAnnulusSection.CenterY">CenterY</see>, <see cref="P:Cognex.Vision.CircularAnnulusSection.Radius">Radius</see>, <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleStart">AngleStart</see>, <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleSpan">AngleSpan</see> and <see cref="P:Cognex.Vision.CircularAnnulusSection.RadialScale">RadialScale</see> of the circular annulus section. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.SetCornerWidthHeightRotationCurve(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets corner, width, height, rotation and curvature of the circular annulus section. </para>
            </summary>
            <param name="cornerX">The x-coordinate of the origin corner of this circular annulus section. </param>
            <param name="centerY">The y-coordinate of the origin corner of this circular annulus section. </param>
            <param name="width">The width of this circular annulus section. It is the length of the arc that lies halfway between the inner and outer arcs. It is always positive. </param>
            <param name="height">The height of this circular annulus section. It is the signed distance between the inner and outer arcs. If the curve is positive, the height is positive when the vector from the origin corner to the other arc points away from the circle center. If the curve is negative, the height is positive when the vector points towards the circle center. </param>
            <param name="rotation">The rotation (in radians from the x-axis towards the y-axis) of the circular annulus section. This is the angle of the vector from the circle center to the origin corner. Equivalent to angleStart. </param>
            <param name="curve">The angular span (in radians from the x-axis towards the y-axis) of the circular annulus section. It measures the angle (about the circle center) traversed by the circular arc as you move from the origin corner to the other end of the arc. This signed angle is equivalent to angleSpan.</param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the shape changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterX">SfCenterX </see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfCenterY">SfCenterY </see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadius">SfRadius </see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleStart">SfAngleStart </see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfAngleSpan">SfAngleSpan </see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfRadialScale">SfRadialScale </see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfArea">SfArea </see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CircularAnnulusSection.SfPerimeter">SfPerimeter </see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle </see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>width</b> &lt;= 0.0 </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>height</b> == 0.0</exception>
            <remarks>
            <para>Sets <see cref="P:Cognex.Vision.CircularAnnulusSection.CenterX">CenterX</see> , <see cref="P:Cognex.Vision.CircularAnnulusSection.CenterY">CenterY</see> , <see cref="P:Cognex.Vision.CircularAnnulusSection.Radius">Radius</see> , <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleStart">AngleStart</see> , <see cref="P:Cognex.Vision.CircularAnnulusSection.AngleSpan">AngleSpan</see> and <see cref="P:Cognex.Vision.CircularAnnulusSection.RadialScale">RadialScale</see> of the circular annulus section. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.op_Equality(Cognex.Vision.CircularAnnulusSection,Cognex.Vision.CircularAnnulusSection)">
            <summary>Compares the equality of two CircularAnnulusSection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CircularAnnulusSection.op_Inequality(Cognex.Vision.CircularAnnulusSection,Cognex.Vision.CircularAnnulusSection)">
            <summary>Compares the inequality of two CircularAnnulusSection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.EllipticalAnnulusSection">
            <summary>
            <para>An elliptical annulus section is a four-sided shape bounded by two elliptical arcs and two straight lines. The arcs are scaled copies of each other. You specify the 'start' arc and then provide a RadialScale that defines the 'end' arc. </para>
            </summary>
            <remarks>
            <para>An elliptical annulus section is a four-sided shape bounded by two elliptical arcs and two straight lines. The arcs are scaled copies of each other, and the radial lines connect the endpoints of the arcs. You specify the ( <see cref="P:Cognex.Vision.EllipticalAnnulusSection.CenterX">CenterX</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.CenterY">CenterY</see> ), <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadiusX">RadiusX</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadiusY">RadiusY</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.Rotation">Rotation</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">AngleStart</see> and <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleSpan">AngleSpan</see> which defines the start arc and then provide a <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see> that defines the end arc. If the <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see> is less than 1, the start arc is the outer arc. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.EllipticalAnnulusSection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.EllipticalAnnulusSection.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.EllipticalAnnulusSection.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.AngleSpan">
            <summary>
            <b>Get</b>
            <para>Returns the angular extent (in radians) and direction of the annulus section. For example, a value of π specifies a section that is one half of the full annulus. A value of -π specifies the other half. </para>
            </summary>
            <remarks>
            <para>Gets the angle span of the start arc of this elliptical annulus section in radians. The angle can be any positive or negative value, but not exactly 0; the sign determines the direction of the arc. If the absolute value of the angle span is greater than 2π, the arc wraps around on itself. It is not normalized to the range −2π to 2π For example, an <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleSpan">AngleSpan</see> of +π is an arc that describes half of a full ellipse, and a span of −π describes the other half in the opposite direction. To simply reverse the direction of an arc, you can use the following:</para>
            </remarks>
            <value>
            <b>Default Value: </b> π/2 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleSpan">AngleSpan</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is zero. </exception>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">
            <summary>
            <b>Get</b>
            <para>Returns the angle (in radians) that specifies the start end of the annulus section. It is measured from the x-axis of the underlying ellipse. </para>
            </summary>
            <remarks>
            <para>Gets the start angle of the annulus section. The angle is measured in radians from the x-axis of the underlying ellipse. <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">AngleStart</see> is normalized to a value between +π and −π.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">AngleStart</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.ArcDirectionAdornment">
            <summary>
            <b>Get</b>
            <para>Returns the arc direction adornment of this elliptical annulus section. These adornments indicate the direction from the start point of the arc to the end point. </para>
            </summary>
            <remarks>
            <para>Gets the arc direction adornment of this elliptical annulus section. The adornment indicates the direction from the start points of the arcs to the end points.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.EllipticalAnnulusSectionDirectionAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.ArcDirectionAdornment">ArcDirectionAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfArcDirectionAdornment">SfArcDirectionAdornment</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.EllipticalAnnulusSectionDirectionAdornmentConstants">EllipticalAnnulusSectionDirectionAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.Area">
            <summary>
            <para>Returns the area enclosed by this elliptical annulus section. </para>
            </summary>
            <remarks>
            <para>Returns the area enclosed by this elliptical annulus section. If <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleSpan">AngleSpan</see> is greater than 2π, the area is the same as if were only 2π. This value is always positive. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.CenterArcAdornment">
            <summary>
            <b>Get</b>
            <para>Returns the center arc adornment of this elliptical annulus section. </para>
            </summary>
            <remarks>
            <para>Gets the center arc adornment of this elliptical annulus section. This property specifies whether and how the center arc is drawn.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.EllipticalAnnulusSectionCenterArcAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.CenterArcAdornment">CenterArcAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterArcAdornment">SfCenterArcAdornment</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.EllipticalAnnulusSectionCenterArcAdornmentConstants">EllipticalAnnulusSectionCenterArcAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.CenterX">
            <summary>
            <b>Get</b>
            <para>Returns the x coordinate of the ellipse center. </para>
            </summary>
            <remarks>
            <para>Gets the x-coordinate of the center of the underlying ellipse.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 70 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.CenterX">CenterX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.CenterY">
            <summary>
            <b>Get</b>
            <para>Returns the y coordinate of the ellipse center. </para>
            </summary>
            <remarks>
            <para>Gets the y-coordinate of the center of the underlying ellipse.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 70 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.CenterY">CenterY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which interactive <see cref="T:Cognex.Vision.EllipticalAnnulusSectionDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfGraphicDOFEnableBase">SfGraphicDOFEnableBase</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.ManipArcFraction">
            <summary>
            <b>Get</b>
            <para>Returns the fractional distance (between the start and end arcs) where the manipulation arc is drawn. During interactive manipulation, the shape usually resets this fraction to 0.5 but users may reset it sooner if they desire. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.ManipArcFraction">ManipArcFraction</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfManipArcFraction">SfManipArcFraction</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.Perimeter">
            <summary>
            <para>Returns the total perimeter length of this elliptical annulus section. </para>
            </summary>
            <remarks>
            <para>Returns the total perimeter length of this elliptical annulus section. As <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleSpan">AngleSpan</see> becomes greater than 2π, the length continues to increase. This value is always positive. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.RadialDirectionAdornment">
            <summary>
            <b>Get</b>
            <para>Returns the radial direction adornment of this elliptical annulus section. These adornments indicate the direction from the start arc to the end arc. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">radial direction</see> adornment of this elliptical annulus section. This adornment indicates the direction from the start arc to the end arc.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.EllipticalAnnulusSectionDirectionAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialDirectionAdornment">RadialDirectionAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadialDirectionAdornment">SfRadialDirectionAdornment</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.EllipticalAnnulusSectionDirectionAdornmentConstants">EllipticalAnnulusSectionDirectionAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">
            <summary>
            <b>Get</b>
            <para>Returns the radial scaling factor. The elliptical annulus section contains a 'start' arc, and an 'end' arc that is a scaled copy of it. If RadialScale is greater than 1 the end arc will be larger than the start arc, otherwise it will be smaller. </para>
            </summary>
            <remarks>
            <para>Gets the radial scale of this annulus section. The radial scale determines the relative sizes of the two arcs that make up the annulus section. The two arcs are scaled copies of each other. The start arc is specified by setting the <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">AngleStart</see> and <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleSpan">AngleSpan</see> properties. The end arc is specified by applying a radial scale to the start arc. <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see> determines which arc is the inner arc and which arc is the outer arc.  It also implies a radial direction as shown :  Effect of RadialScale Values <b> If RadialScale is less than 1: </b>
            <list type="bullet">
            <item>
            <description>
            <b> Start Arc </b> : Outer</description>
            </item>
            <item>
            <description>
            <b> End Arc </b> : Inner</description>
            </item>
            <item>
            <description>
            <b> Radial Direction </b> : Toward the center <b> If RadialScale is greater than 1: </b>
            </description>
            </item>
            <item>
            <description>
            <b> Start Arc </b> : Inner</description>
            </item>
            <item>
            <description>
            <b> End Arc </b> : Outer</description>
            </item>
            <item>
            <description>
            <b> Radial Direction </b> : Toward the center <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see> cannot be exactly 1.0, nor can it be less than or equal to zero.</description>
            </item>
            </list>
            </para>
            </remarks>
            <value>
            <b>Default Value: </b> 0.5 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> &lt;= 0.0 or <b>Value</b> = 1.0 </exception>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.RadiusX">
            <summary>
            <b>Get</b>
            <para>Returns the distance from the center of the start ellipse to its boundary (along the ellipse's x-axis). Note that the start ellipse will be the inner ellipse if RadialScale is greater than one, otherwise it will be the outer one. </para>
            </summary>
            <remarks>
            <para>Gets the distance from the center of the underlying start ellipse to its boundary along the ellipse's x-axis. If <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see> is greater than 1, the start ellipse is the inner ellipse, otherwise it is the outer ellipse. The x-axis may be <see cref="P:Cognex.Vision.EllipticalAnnulusSection.Rotation">rotated</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 50 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadiusX">RadiusX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> &lt;= 0.0 </exception>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.RadiusY">
            <summary>
            <b>Get</b>
            <para>Returns the distance from the center of the start ellipse to its boundary (along the ellipse's y-axis). Note that the start ellipse will be the inner ellipse if RadialScale is greater than one, otherwise it will be the outer one. </para>
            </summary>
            <remarks>
            <para>Gets the distance from the center of the underlying start ellipse to its boundary along the ellipse's y-axis. If <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see> is greater than 1, the start ellipse is the inner ellipse, otherwise it is the outer ellipse. The y-axis may be <see cref="P:Cognex.Vision.EllipticalAnnulusSection.Rotation">rotated</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 50 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadiusY">RadiusY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> &lt;= 0.0 </exception>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.Rotation">
            <summary>
            <b>Get</b>
            <para>Returns the rotation angle (in radians) from the x-axis of the selected coordinate space to the x-axis of the ellipse. </para>
            </summary>
            <remarks>
            <para>Gets the rotation angle, in radians, of the underlying ellipse. The angle is measured from the x-axis of the <see cref="P:Cognex.Vision.EllipticalAnnulusSection.SelectedSpaceName">selected coordinate space</see> to the rotated x-axis of the ellipse. To find the rotation from the x-axis of the selected space name to the y-axis of the ellipse, add π/2 to this property. Rotation values are normalized to be between −π and +π.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.Rotation">Rotation</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.EllipticalAnnulusSection.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new elliptical annulus section, copying the specified parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see> that copies the specified attributes from this <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.CreateEllipticalArc(System.Double,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new elliptical arc (copying the specified parameters) from this annulus section. The arc is specified as a radial fraction between the start and end arcs. For example, specify 0 for the start arc, 0.5 for the center arc, and 1 for the end arc. </para>
            </summary>
            <param name="radialFraction">Specifies the arc in relation to the section. Specify zero for the start arc, 0.5 for the center arc, and 1.0 for the end arc, or other values for intermediate arcs. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The new elliptical arc. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentException">(1 + <b>radialFraction</b> * ( <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see> − 1)) &lt;= 0 </exception>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see> based on this elliptical annulus section as defined by the radial fraction between the start and end arcs. Specify zero for the start arc, 0.5 for the center arc, and 1.0 for the end arc. <b>copyFlags</b> specifies which aspects of the arc are copied to the new shape. Although you can specify <b>radialFraction</b> values less than zero or greater than 1, this function will return an error if the resulting radii would be less than or equal to zero. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.GetCenterRadiusXYRotationAngleStartAngleSpanRadialScale(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Gets CenterX, CenterY, RadiusX, RadiusY, Rotation, AngleStart, AngleSpan, and RadialScale of this elliptical annulus section. </para>
            </summary>
            <param name="centerX">The x-coordinate of the center of the underlying ellipse. </param>
            <param name="centerY">The y-coordinate of the center of the underlying ellipse. </param>
            <param name="radiusX">The distance from the center of the underlying start ellipse to its boundary along the its x-axis </param>
            <param name="radiusY">The distance from the center of the underlying start ellipse to its boundary along the its y-axis </param>
            <param name="rotation">The rotation angle of the underlying ellipse. </param>
            <param name="angleStart">The <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">AngleStart</see>. </param>
            <param name="angleSpan">The <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleSpan">AngleSpan</see>. </param>
            <param name="radialScale">The <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see> of the elliptical annular section. </param>
            <remarks>
            <para>Gets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.CenterX">CenterX</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.CenterY">CenterY</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadiusX">RadiusX</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadiusY">RadiusY</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.Rotation">Rotation</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">AngleStart</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleSpan">AngleSpan</see>, and <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see> of this elliptical annulus section. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.GetUnitCircleParams(System.Double@,System.Double@,System.Double@,Cognex.Vision.Transform2DLinear@)">
            <summary>
            <para>Get a description of this annulus section as a unit circular arc, a linear transform that maps it to an elliptical arc, and RadialScale. The unit circle arc is centered at (0,0), has a radius of one, and has the given start angle and span (in radians). </para>
            </summary>
            <param name="unitCircleAngleStart">The start angle of the unit circle arc in radians. </param>
            <param name="unitCircleAngleSpan">The span of the unit circle arc in radians. </param>
            <param name="radialScale">The <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see> of the unit circle's circular annulus section. </param>
            <param name="ellipseFromUnitCircle">The transform that maps the unit circle circular annulus section to this elliptical annulus section. </param>
            <remarks>
            <para>Gets a description of this elliptical annulus section as a unit circular arc, a linear transform that maps it to an elliptical arc, and a radial scale. The unit circle arc is centered at (0,0), has a radius of one, and has the provided start angle and span measured in radians. Typically, the <b>unitCircleAngleStart</b> value is not the same as <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">AngleStart</see>, and the <b>unitCircleAngleSpan</b> is not the same as <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleSpan">AngleSpan</see>. The returned <b>unitCircleAngleStart</b> is normalized to be between +π and −π, but <b>unitCircleAngleSpan</b> is not. The child space of this shape is unit circle space. In the unit circle child space, you can pick (x,y) positions along the start arc using standard parametric equations for x and y: x = cos(t) and y = sin(t) where the angle <b>t</b> varies from <b>unitCircleAngleStart</b> and ( <b>unitCircleAngleStart</b> + <b>unitCircleAngleSpan</b> ). To get points along the end arc, scale by <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see>. You can map positions and angles in child space to the parent space using the <b>ellipseFromUnitCircle</b> transform. You can map from parent space to child space using the inverse transform. Remember that <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">AngleStart</see> is measured from the x-axis of the ellipse. You must add <see cref="P:Cognex.Vision.EllipticalAnnulusSection.Rotation">Rotation</see> to <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">AngleStart</see> to get the correct angle in parent space. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new elliptical annulus section by mapping this one through the given linear transform. Use the CopyFlags to specify what other parts of this shape should be copied into the new one. </para>
            </summary>
            <param name="transform">The <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> used to map this <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>. </para>
            </returns>
            <remarks>
            <para>Creates a new elliptical annulus section by mapping this elliptical annulus section through a linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.SetCenterRadiusXYRotationAngleStartAngleSpanRadialScale(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets CenterX, CenterY, RadiusX, RadiusY, Rotation, AngleStart, AngleSpan, and RadialScale of this elliptical annulus section. All angles are in radians. </para>
            </summary>
            <param name="centerX">The x-coordinate of the center of the underlying ellipse. </param>
            <param name="centerY">The y-coordinate of the center of the underlying ellipse. </param>
            <param name="radiusX">The distance from the center of the underlying start ellipse to its boundary along the its x-axis </param>
            <param name="radiusY">The distance from the center of the underlying start ellipse to its boundary along the its y-axis </param>
            <param name="rotation">The rotation angle of the underlying ellipse. </param>
            <param name="angleStart">The <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">AngleStart</see>. </param>
            <param name="angleSpan">The <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleSpan">AngleSpan</see>. (The default value for this parameter is actually π/2.) </param>
            <param name="radialScale">The <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see> of the elliptical annular section. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when one or more properties change. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>radiusX</b> &lt;= 0.0 or <b>radiusY</b> &lt;= 0.0 </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>angleSpan</b> = 0.0 </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>radialScale</b> &lt;= 0.0 or <b>radialScale</b> = 1.0 </exception>
            <remarks>
            <para>Sets <see cref="P:Cognex.Vision.EllipticalAnnulusSection.CenterX">CenterX</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.CenterY">CenterY</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadiusX">RadiusX</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadiusY">RadiusY</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.Rotation">Rotation</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">AngleStart</see>, <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleSpan">AngleSpan</see>, and <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see> of this elliptical annulus section. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.SetFromUnitCircleParams(System.Double,System.Double,System.Double,Cognex.Vision.Transform2DLinear)">
            <summary>
            <para>Set the geometry of this annulus section from the given unit circular arc, the linear transform that maps it to an elliptical arc, and RadialScale. The unit circle arc is centered at (0,0), has a radius of one, and has the given start angle (in radians) and span (in radians). </para>
            </summary>
            <param name="unitCircleAngleStart">The start angle of the unit circle arc in radians. </param>
            <param name="unitCircleAngleSpan">The span of unit circle arc in radians. </param>
            <param name="radialScale">The <see cref="P:Cognex.Vision.EllipticalAnnulusSection.RadialScale">RadialScale</see> of the unit circle's circular annulus section. </param>
            <param name="ellipseFromUnitCircle">The transform that maps the unit circle circular annulus section to this elliptical annulus section. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when one or more properties change. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterX">SfCenterX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfCenterY">SfCenterY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusX">SfRadiusX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadiusY">SfRadiusY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleStart">SfAngleStart</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfAngleSpan">SfAngleSpan</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfRadialScale">SfRadialScale</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfArea">SfArea</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.EllipticalAnnulusSection.SfPerimeter">SfPerimeter</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>unitCircleAngleSpan</b> = 0.0. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>radialScale</b> &lt;= 0.0 or <b>radialScale</b> = 1.0. </exception>
            <remarks>
            <para>Sets the geometry of this elliptical annulus section from a unit circular arc, a linear transform that maps it to an elliptical arc, and a radial scale. The unit circle arc is centered at (0,0), has a radius of one, and has the provided start angle and span measured in radians. Typically, the <b>unitCircleAngleStart</b> value is not the same as <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">AngleStart</see>, and the <b>unitCircleAngleSpan</b> is not the same as <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleSpan">AngleSpan</see>. The returned <b>unitCircleAngleStart</b> is normalized to be between +π and −π, but <b>unitCircleAngleSpan</b> is not. The child space of this shape is unit circle space. In the unit circle child space, you can pick (x,y) positions along the arc using standard parametric equations for x and y: x = cos(t) and y = sin(t) where the angle <b>t</b> varies from <b>unitCircleAngleStart</b> and ( <b>unitCircleAngleStart</b> + <b>unitCircleAngleSpan</b> ). You can map positions and angles in child space to the parent space using the <b>ellipseFromUnitCircle</b> transform. You can map from parent space to child space using the inverse transform. Remember that <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">AngleStart</see> is measured from the x-axis of the ellipse. You must add <see cref="P:Cognex.Vision.EllipticalAnnulusSection.Rotation">Rotation</see> to <see cref="P:Cognex.Vision.EllipticalAnnulusSection.AngleStart">AngleStart</see> to get the correct angle in parent space. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.op_Equality(Cognex.Vision.EllipticalAnnulusSection,Cognex.Vision.EllipticalAnnulusSection)">
            <summary>Compares the equality of two EllipticalAnnulusSection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.EllipticalAnnulusSection.op_Inequality(Cognex.Vision.EllipticalAnnulusSection,Cognex.Vision.EllipticalAnnulusSection)">
            <summary>Compares the inequality of two EllipticalAnnulusSection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Polygon">
            <summary>
            <para>Class that represents a polygon. </para>
            </summary>
            <remarks>
            <para>Interface describing a polygon shape. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.Polygon.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Polygon.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Polygon.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Polygon.BulkChanged">
            <summary>
            <para>Occurs after a bulk change to the polygon, such as a call to <see cref="M:Cognex.Vision.Polygon.SetVertices(Cognex.Vision.Vect2Collection)">SetVertices</see>. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Polygon.VertexAdded">
            <summary>
            <para>Occurs after one or more vertices are added to the polygon. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Polygon.VertexChanged">
            <summary>
            <para>Occurs after the x or y coordinate of a single vertex is changed in the polygon. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Polygon.VertexRemoved">
            <summary>
            <para>Occurs after one or more vertices are deleted from the polygon. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Polygon.Area">
            <summary>
            <para>Area of the enclosed region, in units consistent with the SelectedSpaceName. Zero if there are fewer than 3 vertices. </para>
            </summary>
            <remarks>
            <para>Area of the region enclosed by the polygon, in units consistent with the <see cref="P:Cognex.Vision.Polygon.SelectedSpaceName">SelectedSpaceName</see>. If there are fewer than three <see cref="P:Cognex.Vision.Polygon.NumVertices">vertices</see>, or if <see cref="P:Cognex.Vision.Polygon.Complex">Complex</see> is True, the area is zero. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Polygon.Complex">
            <summary>
            <para>True if any segments are intersecting, otherwise False. </para>
            </summary>
            <remarks>
            <para>Returns True if any of the polygon segments are intersecting, False otherwise.</para>
            </remarks>
            <value>
            <b>Default Value: </b> False </value>
        </member>
        <member name="P:Cognex.Vision.Polygon.Convex">
            <summary>
            <para>True if the polygon is identical to the convex hull of its vertices, otherwise False. </para>
            </summary>
            <remarks>
            <para>True if the polygon is identical to the <see cref="M:Cognex.Vision.Polygon.ConvexHull">convex hull</see> of its vertices, False otherwise. The convex hull of a polygon is the polygon that would result if you were to stretch a rubber band around the vertices. A polygon with 0 or 1 vertex is convex.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.Polygon.FillMode">
            <summary>
            <b>Get</b>
            <para>The algorithm to be used to distinguish inside from outside. </para>
            </summary>
            <remarks>
            <para>Gets the algorithm used to distinguish between the inside and outside of the polygon. <see cref="P:Cognex.Vision.Polygon.FillMode">FillMode</see> affects the way that <see cref="M:Cognex.Vision.IShape.DistanceToPoint(System.Double,System.Double)">IShape.DistanceToPoint()</see> determines which points lie within a polygon.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.PolygonFillConstants">EvenOdd</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Polygon.FillMode">FillMode</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The fill mode is not in <see cref="T:Cognex.Vision.PolygonFillConstants">PolygonFillConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.Polygon.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.PolygonDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.Vision.Polygon">Polygon</see>. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Polygon.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Polygon.HighlightColor">
            <summary>
            <b>Get</b>
            <para>Get the <see cref="T:Cognex.Vision.Color32">color</see> of the highlighted feature. </para>
            </summary>
            <returns>
            <para>The color of the highlighted feature. If set to <see cref="P:Cognex.Vision.ColorConstants.None">None</see>, no highlighting will occur. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Polygon.HighlightColor">HighlightColor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <para>Sets <see cref="P:Cognex.Vision.Polygon.HighlightColor">HighlightColor</see>.</para>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>SfHighlightColor </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Polygon.HighlightIndex">
            <summary>
            <b>Get</b>
            <para>Get the index of the feature to be highlighted. If set to -1, no highlighting will occur. </para>
            </summary>
            <returns>
            <para>The index of the feature to be highlighted. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Polygon.HighlightIndex">HighlightIndex</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <para>Sets <see cref="P:Cognex.Vision.Polygon.HighlightIndex">HighlightIndex</see>.</para>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>SfHighlightIndex</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">If you attempt to set HighlightIndex to a value less than -1. </exception>
        </member>
        <member name="P:Cognex.Vision.Polygon.HighlightRequested">
            <summary>
            <para>If greater than zero, highlighting is enabled. </para>
            </summary>
            <returns>
            <para>The number of outstanding requests for highlighting. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Polygon.NumVertices">
            <summary>
            <b>Get</b>
            <para>Number of vertices in this polygon. </para>
            </summary>
            <remarks>
            <para>Gets the number of vertices in this polygon. The following table describes what happens when you set the number of vertices. <table rows="4" cols="2">
            <caption>Changing the number of vertices</caption>
            <TR>
            <TH>
            <para>Operation </para>
            </TH>
            <TH>
            <para>Effect </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>New value &gt; current <see cref="P:Cognex.Vision.Polygon.NumVertices">Cognex.Vision.Polygon.NumVertices</see>
            </para>
            </TD>
            <TD>
            <para>New vertices with coordinates (0,0) are added to the end of the list of vertices. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>New value &lt; current <see cref="P:Cognex.Vision.Polygon.NumVertices">Cognex.Vision.Polygon.NumVertices</see>
            </para>
            </TD>
            <TD>
            <para>Existing vertices are removed from the end of the list of vertices. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>New value = 0 </para>
            </TD>
            <TD>
            <para>All vertices removed. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the number of vertices changes.</para>
            </remarks>
            <para>
            <see cref="E:Cognex.Vision.Polygon.VertexAdded">VertexAdded</see> Raised when the number of vertices increases. This event is raised in addition to the <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see>.</para>
            <para>
            <see cref="E:Cognex.Vision.Polygon.VertexRemoved">VertexRemoved</see> Raised when the number of vertices decreases. This event is raised in addition to the <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see>.</para>
            <exception cref="T:Cognex.Vision.ArgumentException">The number of vertices is &lt; 0. </exception>
        </member>
        <member name="P:Cognex.Vision.Polygon.Perimeter">
            <summary>
            <para>Perimeter of the polygon, in units consistent with the SelectedSpaceName. Zero if there are fewer than 2 vertices. </para>
            </summary>
            <remarks>
            <para>Perimeter of the polygon, in units consistent with the <see cref="P:Cognex.Vision.Polygon.SelectedSpaceName">SelectedSpaceName</see>. The perimeter is the sum of the lengths of all of the segments including the closing the segment from the last vertex to the first vertex. If there are fewer than two <see cref="P:Cognex.Vision.Polygon.NumVertices">vertices</see>, the perimeter is zero. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Polygon.VertexAdornment">
            <summary>
            <b>Get</b>
            <para>The adornment shape to be rendered for each vertex. </para>
            </summary>
            <remarks>
            <para>The adornment shape to be rendered for all vertices. You can use <see cref="M:Cognex.Vision.Polygon.SetVertexAdornmentColor(System.Int32,Cognex.Vision.PolygonVertexColorConstants)">SetVertexAdornmentColor</see> to hide or to change the color of the adornment for each vertex.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.PolygonVertexAdornmentConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Polygon.VertexAdornment">VertexAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The new value is not in <see cref="T:Cognex.Vision.PolygonVertexAdornmentConstants">PolygonVertexAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.Polygon.VertexCapacity">
            <summary>
            <para>The maximum number of vertices that may be held by this polygon without reallocating storage. </para>
            </summary>
            <value>
            <b>Default Value: </b> 0 </value>
        </member>
        <member name="P:Cognex.Vision.Polygon.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Polygon.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Polygon.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Polygon.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Polygon.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Polygon.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Polygon.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Polygon.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Polygon.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.Polygon.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.Polygon.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Polygon.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Polygon.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Polygon.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Polygon.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Polygon.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Polygon.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Polygon.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.Polygon.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Polygon.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.AddVertex(System.Double,System.Double,System.Int32)">
            <summary>
            <para>Add a vertex to the polygon. If the default index -1 is used, the new vertex will be added to the end of any existing vertices. Otherwise Index must be &gt;= 0 and &lt;= NumVertices. </para>
            </summary>
            <param name="x">X-coordinate of the vertex. </param>
            <param name="y">Y-coordinate of the vertex. </param>
            <param name="index">Index of the vertex. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the number of vertices changes.</para>
            </remarks>
            <para>
            <see cref="E:Cognex.Vision.Polygon.VertexAdded">VertexAdded</see> Raised when the number of vertices increases. This event is raised in addition to the <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see>.</para>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> &lt; -1 </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> &gt; <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>
            </exception>
            <exception cref="T:Cognex.Vision.OutOfMemoryException">The memory to store the vertices cannot be allocated. </exception>
            <remarks>
            <para>Add a vertex to the polygon at the given index. If <b>index</b> is -1 or <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>, the vertex is added to the end. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.ArcCenter(System.Double@,System.Double@)">
            <summary>
            <para>Compute the center of mass of this polygon as if the mass were uniformly distributed along the perimeter. Generates an error if there are less than two vertices. </para>
            </summary>
            <param name="x">X-coordinate of the center. </param>
            <param name="y">Y-coordinate of the center. </param>
            <exception cref="T:Cognex.Vision.ShapeException">
            <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> &lt; 2. </exception>
            <remarks>
            <para>Computes the center of mass of this polygon as if the mass were uniformly distributed along the perimeter. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.ArcMoments1(System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Compute the zeroth and first moments of this polygon as if the mass were uniformly distributed along the perimeter. Results will be zero if there are fewer than two vertices. </para>
            </summary>
            <param name="sum">Integral of the function 1 over the length of the polygon. </param>
            <param name="sumX">Integral of the function <b>x</b> over the length of the polygon. </param>
            <param name="sumY">Integral of the function <b>y</b> over the length of the polygon. </param>
            <remarks>
            <para>Compute the zeroth and first moments of this polygon as if the mass were uniformly distributed along the perimeter. All results are zero if <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> is less than 2. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.ArcMoments2(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Compute the zeroth, first, and second moments of this polygon as if the mass were uniformly distributed along the perimeter. Results will be zero if there are fewer than two vertices. </para>
            </summary>
            <param name="sum">Integral of the function 1 over the length of the polygon. </param>
            <param name="sumX">Integral of the function <b>x</b> over the length of the polygon. </param>
            <param name="sumY">Integral of the function <b>y</b> over the length of the polygon. </param>
            <param name="sumXX">Integral of the function <b>x</b>
            <SUP>2</SUP> over the length of the polygon. </param>
            <param name="sumYY">Integral of the function <b>y</b>
            <SUP>2</SUP> over the length of the polygon. </param>
            <param name="sumXY">Integral of the function <b>xy</b> over the length of the polygon. </param>
            <remarks>
            <para>Compute the zeroth, first, and second moments of this polygon as if the mass were uniformly distributed along the perimeter. All results are zero if <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> is less than 2. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.AreaCenter(System.Double@,System.Double@)">
            <summary>
            <para>Compute the centroid of this polygon. Generates an error if there are fewer than 3 vertices. </para>
            </summary>
            <param name="x">X-coordinate of the center. </param>
            <param name="y">Y-coordinate of the center. </param>
            <exception cref="T:Cognex.Vision.ShapeException">
            <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> &lt; 3. </exception>
            <remarks>
            <para>Computes the centroid of this polygon. The polygon must have at least three vertices. If the polygon is <see cref="P:Cognex.Vision.Polygon.Complex">Complex</see>, the value that <see cref="M:Cognex.Vision.Polygon.AreaCenter(System.Double@,System.Double@)">AreaCenter()</see> computes will not be valid, but <see cref="M:Cognex.Vision.Polygon.AreaCenter(System.Double@,System.Double@)">AreaCenter()</see> will not return an error. For <see cref="P:Cognex.Vision.Polygon.Complex">Complex</see> polygons use <see cref="M:Cognex.Vision.Polygon.ArcCenter(System.Double@,System.Double@)">ArcCenter()</see> instead. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.AreaMoments1(System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Compute the zeroth and first moments of area of this polygon. Results will be zero if there are fewer than 3 vertices. </para>
            </summary>
            <param name="sum">Integral of the function 1 over the area of the polygon. </param>
            <param name="sumX">Integral of the function <b>x</b> over the area of the polygon. </param>
            <param name="sumY">Integral of the function <b>y</b> over the area of the polygon. </param>
            <remarks>
            <para>Compute the zeroth and first moments of area of this polygon. All results are zero if <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> is less than 3. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.AreaMoments2(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Compute the zeroth, first, and second moments of area of this polygon. Results will be zero if there are fewer than 3 vertices. </para>
            </summary>
            <param name="sum">Integral of the function 1 over the area of the polygon. </param>
            <param name="sumX">Integral of the function <b>x</b> over the area of the polygon. </param>
            <param name="sumY">Integral of the function <b>y</b> over the area of the polygon. </param>
            <param name="sumXX">Integral of the function <b>x</b>
            <SUP>2</SUP> over the area of the polygon. </param>
            <param name="sumYY">Integral of the function <b>y</b>
            <SUP>2</SUP> over the area of the polygon. </param>
            <param name="sumXY">Integral of the function <b>xy</b> over the area of the polygon. </param>
            <remarks>
            <para>Compute the zeroth, first, and second moments of area of this polygon. All results are zero if <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> is less than 3. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.ConvexHull">
            <summary>
            <para>Compute and return a CogPolygon that is the convex hull of these vertices. </para>
            </summary>
            <returns>
            <para>The convex hull of this polygon. </para>
            </returns>
            <remarks>
            <para>Returns a new polygon that is the convex hull of the vertices of this polygon. The convex hull is the polygon that would result if you were to stretch an elastic band over all of the vertices. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new polygon that replicates the specified properties. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.Polygon">Polygon</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new polygon that copies specified parameters. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Polygon.GetVertex(System.Int32,System.Double@,System.Double@)">
            <summary>
            <para>Get the coordinates of the vertex at the specified index. Index must be &gt;= 0 and &lt; NumVertices. </para>
            </summary>
            <param name="index">Index of the vertex. </param>
            <param name="x">X-coordinate of the vertex. </param>
            <param name="y">Y-coordinate of the vertex. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> &lt; 0 </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> &gt;= <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>
            </exception>
            <remarks>
            <para>Gets the coordinates of the vertex at the specified index. <b>index</b> must be greater than or equal to 0 and less than <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.GetVertexAdornmentColor(System.Int32)">
            <summary>
            <para>The adornment color for the vertex with the given index. </para>
            </summary>
            <param name="index">Index of the vertex. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> &lt; 0 or <b>index</b> &gt; ( <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> -1)</exception>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.PolygonVertexColorConstants">Auto</see>
            </value>
        </member>
        <member name="M:Cognex.Vision.Polygon.GetVertexX(System.Int32)">
            <summary>
            <para>The X-coordinate of the vertex with the given index. </para>
            </summary>
            <param name="index">Index of the vertex. Must be &gt;= 0 and &lt; <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> &lt; 0 or <b>index</b> &gt; ( <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> -1) </exception>
            <remarks>
            <para>Gets the x-coordinate of the vertex with the given index. Use <see cref="M:Cognex.Vision.Polygon.SetVertex(System.Int32,System.Double,System.Double)">SetVertex()</see> and <see cref="M:Cognex.Vision.Polygon.GetVertex(System.Int32,System.Double@,System.Double@)">GetVertex()</see> to set or get both the x- and y-coordinate at once. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.GetVertexY(System.Int32)">
            <summary>
            <para>The Y-coordinate of the vertex with the given index. </para>
            </summary>
            <param name="index">Index of the vertex. Must be &gt;= 0 and &lt; <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> &lt; 0 or <b>index</b> &gt; ( <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> -1) </exception>
            <remarks>
            <para>Gets the y-coordinate of the vertex with the given index. Use <see cref="M:Cognex.Vision.Polygon.SetVertex(System.Int32,System.Double,System.Double)">SetVertex()</see> and <see cref="M:Cognex.Vision.Polygon.GetVertex(System.Int32,System.Double@,System.Double@)">GetVertex()</see> to set or get both the x- and y-coordinate at once. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.GetVertices">
            <summary>
            <para>The X,Y coordinates of all vertices, returned as a two-dimensional array. The size of this array is automatically set to match the number of vertices. </para>
            </summary>
            <returns>
            <para>Collection of vertices. </para>
            </returns>
            <remarks>
            <para>Returns the (x,y) coordinates of all vertices as a collection. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.HighlightRelinquish">
            <summary>
            <para>Decrement the HighlightRequested reference count, unless it is already zero. If HighlightRequested reaches zero, highlighting is disabled. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of HighlightRequested has changed. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.HighlightRequest">
            <summary>
            <para>Enables highlighting by incrementing HighlightRequested. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of HighlightRequested has changed. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new polygon by mapping this one through the given transform. </para>
            </summary>
            <param name="transform">The <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> through which to map this polygon. </param>
            <param name="copyFlags">One or more values from <see cref="T:Cognex.Vision.CopyShapeConstants">CopyShapeConstants</see> specifying which attributes of this polygon are to be copied to the mapped polygon. </param>
            <returns>
            <para>The returned <see cref="T:Cognex.Vision.Polygon">Polygon</see>. </para>
            </returns>
            <remarks>
            <para>Creates a new polygon by mapping the vertices through a linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.MeanVertex(System.Double@,System.Double@)">
            <summary>
            <para>Return the average X and Y coordinates of all the vertices. Generates an error if there are no vertices. </para>
            </summary>
            <param name="x">The mean x-coordinate. </param>
            <param name="y">The mean y-coordinate. </param>
            <exception cref="T:Cognex.Vision.ShapeException">
            <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> &lt; 1. </exception>
            <remarks>
            <para>Returns the average x- and y-coordinates of all the vertices. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.NearestVertex(System.Double,System.Double)">
            <summary>
            <para>Return the index number of the vertex nearest to the supplied X,Y coordinates. Generates an error if there are no vertices. </para>
            </summary>
            <param name="x">X-coordinate. </param>
            <param name="y">X-coordinate. </param>
            <returns>
            <para>Index or the nearest vertex. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">
            <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> &lt; 1. </exception>
            <remarks>
            <para>Returns the index number of the vertex nearest to the supplied (x,y) coordinates. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.RemoveVertex(System.Int32)">
            <summary>
            <para>Remove the specified vertex from the polygon. Index must be &gt;= 0 and &lt; NumVertices. </para>
            </summary>
            <param name="index">Index of the vertex. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when a vertex is removed.</para>
            </remarks>
            <para>
            <see cref="E:Cognex.Vision.Polygon.VertexRemoved">VertexRemoved</see> Raised when a vertex is removed. This event is raised in addition to the <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see>.</para>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> &lt; 0 </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> &gt;= <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>
            </exception>
            <remarks>
            <para>Removes the specified vertex from the polygon. <b>index</b> must be &gt;= 0 and &lt; <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.SetVertex(System.Int32,System.Double,System.Double)">
            <summary>
            <para>Set the coordinates of the vertex at the specified index. Index must be &gt;= 0 and &lt; NumVertices. </para>
            </summary>
            <param name="index">Index of the vertex. </param>
            <param name="x">X-coordinate of the vertex. </param>
            <param name="y">Y-coordinate of the vertex. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when a vertex is changed.</para>
            </remarks>
            <para>
            <see cref="E:Cognex.Vision.Polygon.VertexChanged">VertexChanged</see> Raised when a vertex is changed. This event is raised in addition to the <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see>.</para>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> &lt; 0 </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> &gt;= <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>
            </exception>
            <remarks>
            <para>Set the coordinates of the vertex at the specified index. <b>index</b> must be greater than or equal to 0 and less than <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.SetVertexAdornmentColor(System.Int32,Cognex.Vision.PolygonVertexColorConstants)">
            <summary>
            <para>The adornment color for the vertex with the given index. </para>
            </summary>
            <param name="index">Index of the vertex. </param>
            <param name="value">
            </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the vertex adornment color is changed.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">The new value is not in <see cref="T:Cognex.Vision.PolygonVertexColorConstants">PolygonVertexColorConstants</see>. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> &lt; 0 or <b>index</b> &gt; ( <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> -1) </exception>
            <remarks>
            <para>Gets the adornment color for the vertex with the given index. Use <see cref="P:Cognex.Vision.Polygon.VertexAdornment">VertexAdornment</see> to specify the shape of the adornment.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.PolygonVertexColorConstants">Auto</see>
            </value>
        </member>
        <member name="M:Cognex.Vision.Polygon.SetVertexX(System.Int32,System.Double)">
            <summary>
            <para>Set the X-coordinate of the vertex with the given index. </para>
            </summary>
            <param name="index">Index of the vertex. Must be &gt;= 0 and &lt; <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>. </param>
            <param name="value">
            </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when a vertex is changed.</para>
            </remarks>
            <para>
            <see cref="E:Cognex.Vision.Polygon.VertexChanged">VertexChanged</see> Raised when a vertex is changed. This event is raised in addition to the <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see>.</para>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> &lt; 1. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> &lt; 0 or <b>index</b> &gt; ( <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> -1) </exception>
            <remarks>
            <para>Gets the x-coordinate of the vertex with the given index. Use <see cref="M:Cognex.Vision.Polygon.SetVertex(System.Int32,System.Double,System.Double)">SetVertex()</see> and <see cref="M:Cognex.Vision.Polygon.GetVertex(System.Int32,System.Double@,System.Double@)">GetVertex()</see> to set or get both the x- and y-coordinate at once. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.SetVertexY(System.Int32,System.Double)">
            <summary>
            <para>The Y-coordinate of the vertex with the given index. </para>
            </summary>
            <param name="index">Index of the vertex. Must be &gt;= 0 and &lt; <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>. </param>
            <param name="value">
            </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when a vertex is changed.</para>
            </remarks>
            <para>
            <see cref="E:Cognex.Vision.Polygon.VertexChanged">VertexChanged</see> Raised when a vertex is changed. This event is raised in addition to the <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see>.</para>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> &lt; 1. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> &lt; 0 or <b>index</b> &gt; ( <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> -1) </exception>
            <remarks>
            <para>Gets the y-coordinate of the vertex with the given index. Use <see cref="M:Cognex.Vision.Polygon.SetVertex(System.Int32,System.Double,System.Double)">SetVertex()</see> and <see cref="M:Cognex.Vision.Polygon.GetVertex(System.Int32,System.Double@,System.Double@)">GetVertex()</see> to set or get both the x- and y-coordinate at once. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.SetVertices(Cognex.Vision.Vect2Collection)">
            <summary>
            <para>Modify the coordinates of the vertices to match the supplied values. If there are more supplied values than vertices, append sufficient vertices. If there are fewer supplied values than vertices, discard vertices at the end. </para>
            </summary>
            <param name="coordinatesXY">A collection of vertex coordinates. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when vertices are set.</para>
            </remarks>
            <para>
            <see cref="E:Cognex.Vision.Polygon.BulkChanged">BulkChanged</see> Raised when vertices are set. This event is raised in addition to the <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see>.</para>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> &lt; 1 </exception>
            <exception cref="T:Cognex.Vision.OutOfMemoryException">The array cannot be allocated. </exception>
            <remarks>
            <para>Modifies the coordinates of the vertices to match the supplied values. If there are more supplied values than vertices, additional vertices are appended to the polygon. If there are fewer supplied values than vertices, the superfluous vertices are discarded. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.VertexReserve(System.Int32)">
            <summary>
            <para>If the supplied value is less than or equal to the current VertexCapacity, there will be no change. Otherwise, ensure that VertexCapacity is greater than or equal to the supplied value. </para>
            </summary>
            <param name="minNumVertices">
            </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>minNumVertices</b> &lt; 0. </exception>
            <remarks>
            <para>Ensures a reserve for a specified number of vertices. If <b>minNumVertices</b> is less than or equal to <see cref="P:Cognex.Vision.Polygon.VertexCapacity">VertexCapacity</see> there is no change. Otherwise, <see cref="P:Cognex.Vision.Polygon.VertexCapacity">VertexCapacity</see> is greater than or equal to <b>minNumVertices</b>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Polygon.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Polygon.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Polygon.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Polygon.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Polygon.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Polygon.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Polygon.op_Equality(Cognex.Vision.Polygon,Cognex.Vision.Polygon)">
            <summary>Compares the equality of two Polygon objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Polygon.op_Inequality(Cognex.Vision.Polygon,Cognex.Vision.Polygon)">
            <summary>Compares the inequality of two Polygon objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.BulkChangedEventArgs">
            <summary>
            <para>This class holds data provided by the BulkChanged event. The BulkChanged event is raised after a bulk change to the <see cref="T:Cognex.Vision.Polygon">Polygon</see>, such as a call to <see cref="M:Cognex.Vision.Polygon.SetVertices(Cognex.Vision.Vect2Collection)">SetVertices</see>. Since the amount of changed data could be quite large, the BulkChanged event only reports the new number of vertices after the change. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.BulkChangedEventArgs.#ctor(System.Int32)">
            <summary>
            <para>Construct the <see cref="T:Cognex.Vision.BulkChangedEventArgs">BulkChangedEventArgs</see> object with the specified new number of vertices. </para>
            </summary>
            <param name="newNumVertices">The new number of vertices in the <see cref="T:Cognex.Vision.Polygon">Polygon</see>. </param>
        </member>
        <member name="P:Cognex.Vision.BulkChangedEventArgs.NewNumVertices">
            <summary>
            <para>The new number of vertices in the <see cref="T:Cognex.Vision.Polygon">Polygon</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.BulkChangedEventArgs.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.BulkChangedEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.BulkChangedEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.BulkChangedEventArgs.op_Equality(Cognex.Vision.BulkChangedEventArgs,Cognex.Vision.BulkChangedEventArgs)">
            <summary>Compares the equality of two BulkChangedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.BulkChangedEventArgs.op_Inequality(Cognex.Vision.BulkChangedEventArgs,Cognex.Vision.BulkChangedEventArgs)">
            <summary>Compares the inequality of two BulkChangedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.VertexAddedEventArgs">
            <summary>
            <para>This class holds data provided by the <see cref="E:Cognex.Vision.Polygon.VertexAdded">VertexAdded</see>. The <see cref="E:Cognex.Vision.Polygon.VertexAdded">VertexAdded</see> is raised after one, or possibly several vertices are added to a <see cref="T:Cognex.Vision.Polygon">Polygon</see> as a result of calling <see cref="M:Cognex.Vision.Polygon.AddVertex(System.Double,System.Double,System.Int32)">AddVertex</see> or setting <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VertexAddedEventArgs.#ctor(System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            <para>Construct the <see cref="T:Cognex.Vision.VertexAddedEventArgs">VertexAddedEventArgs</see> object with the supplied index, x-coordinate, y-coordinate, and new number of vertices. When the VertexAddedEvent has been caused by setting <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> to a value greater than the existing number of vertices, the index will be -1 (i.e. added to the end of the list of vertices) and the x-coordinate and y-coordinate will both be zero. </para>
            </summary>
            <param name="index">The index of the added vertex. -1 means that new vertices were added at the end until the number of vertices equaled <b>newNumVertices</b>. </param>
            <param name="newX">X-coordinate of the new vertex. </param>
            <param name="newY">Y-coordinate of the new vertex. </param>
            <param name="newNumVertices">The new number of vertices in the <see cref="T:Cognex.Vision.Polygon">Polygon</see>. </param>
        </member>
        <member name="P:Cognex.Vision.VertexAddedEventArgs.Index">
            <summary>
            <para>The index of the added vertex. -1 means that new vertices were added at the end until the number of vertices equaled <b>newNumVertices</b>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.VertexAddedEventArgs.NewNumVertices">
            <summary>
            <para>The new number of vertices in the <see cref="T:Cognex.Vision.Polygon">Polygon</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.VertexAddedEventArgs.NewX">
            <summary>
            <para>X-coordinate of the new vertex. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.VertexAddedEventArgs.NewY">
            <summary>
            <para>Y-coordinate of the new vertex. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VertexAddedEventArgs.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VertexAddedEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.VertexAddedEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.VertexAddedEventArgs.op_Equality(Cognex.Vision.VertexAddedEventArgs,Cognex.Vision.VertexAddedEventArgs)">
            <summary>Compares the equality of two VertexAddedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.VertexAddedEventArgs.op_Inequality(Cognex.Vision.VertexAddedEventArgs,Cognex.Vision.VertexAddedEventArgs)">
            <summary>Compares the inequality of two VertexAddedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.VertexChangedEventArgs">
            <summary>
            <para>This class holds data provided by the <see cref="E:Cognex.Vision.Polygon.VertexChanged">VertexChanged</see>. The <see cref="E:Cognex.Vision.Polygon.VertexChanged">VertexChanged</see> is raised in addition to the standard <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> after the x-coordinate, y-coordinate, or both have changed for a single vertex. The change may occur as a result of calling a <see cref="T:Cognex.Vision.Polygon">Polygon</see>'s <see cref="M:Cognex.Vision.Polygon.SetVertexX(System.Int32,System.Double)">SetVertexX</see>, <see cref="M:Cognex.Vision.Polygon.SetVertexY(System.Int32,System.Double)">SetVertexY</see>, or <see cref="M:Cognex.Vision.Polygon.SetVertex(System.Int32,System.Double,System.Double)">SetVetex</see> methods. It also may occur if the vertex position is manipulated interactively in a display. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VertexChangedEventArgs.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            <para>Construct the <see cref="T:Cognex.Vision.VertexChangedEventArgs">VertexChangedEventArgs</see> object with the supplied index, x-coordinate, and y-coordinate. The x-coordinate and y-coordinate values reflect those of the specified vertex after the change has been made. </para>
            </summary>
            <param name="index">The index of the changed vertex. In the range of zero to one less than the number of vertices in the <see cref="T:Cognex.Vision.Polygon">Polygon</see>. </param>
            <param name="newX">The new x-coordinate. </param>
            <param name="newY">The new y-coordinate. </param>
        </member>
        <member name="P:Cognex.Vision.VertexChangedEventArgs.Index">
            <summary>
            <para>The index of the changed vertex. In the range of zero to one less than the number of vertices in the <see cref="T:Cognex.Vision.Polygon">Polygon</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.VertexChangedEventArgs.NewX">
            <summary>
            <para>The new x-coordinate. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.VertexChangedEventArgs.NewY">
            <summary>
            <para>The new y-coordinate. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VertexChangedEventArgs.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VertexChangedEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.VertexChangedEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.VertexChangedEventArgs.op_Equality(Cognex.Vision.VertexChangedEventArgs,Cognex.Vision.VertexChangedEventArgs)">
            <summary>Compares the equality of two VertexChangedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.VertexChangedEventArgs.op_Inequality(Cognex.Vision.VertexChangedEventArgs,Cognex.Vision.VertexChangedEventArgs)">
            <summary>Compares the inequality of two VertexChangedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.VertexRemovedEventArgs">
            <summary>
            <para>This class holds data provided by the <see cref="E:Cognex.Vision.Polygon.VertexRemoved">VertexRemoved</see>. The <see cref="E:Cognex.Vision.Polygon.VertexRemoved">VertexRemoved</see> is raised after one, or possibly several vertices are removed from a <see cref="T:Cognex.Vision.Polygon">Polygon</see> as a result of calling <see cref="M:Cognex.Vision.Polygon.RemoveVertex(System.Int32)">RemoveVertex</see> or setting <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VertexRemovedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Construct the <see cref="T:Cognex.Vision.VertexRemovedEventArgs">VertexRemovedEventArgs</see> object with the supplied index and new number of vertices. When the VertexRemovedEvent has been caused by setting <see cref="P:Cognex.Vision.Polygon.NumVertices">NumVertices</see> to a value less than the existing number of vertices, the index will be -1 (i.e. removed from the end of the list of vertices). </para>
            </summary>
            <param name="index">The index of the removed vertex. -1 means that vertices were removed at the end until the number of vertices equaled <b>newNumVertices</b>. </param>
            <param name="newNumVertices">The new number of vertices in the <see cref="T:Cognex.Vision.Polygon">Polygon</see>. </param>
        </member>
        <member name="P:Cognex.Vision.VertexRemovedEventArgs.Index">
            <summary>
            <para>The index of the removed vertex. -1 means that vertices were removed at the end until the number of vertices equaled <b>newNumVertices</b>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.VertexRemovedEventArgs.NewNumVertices">
            <summary>
            <para>The new number of vertices in the <see cref="T:Cognex.Vision.Polygon">Polygon</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VertexRemovedEventArgs.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.VertexRemovedEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.VertexRemovedEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.VertexRemovedEventArgs.op_Equality(Cognex.Vision.VertexRemovedEventArgs,Cognex.Vision.VertexRemovedEventArgs)">
            <summary>Compares the equality of two VertexRemovedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.VertexRemovedEventArgs.op_Inequality(Cognex.Vision.VertexRemovedEventArgs,Cognex.Vision.VertexRemovedEventArgs)">
            <summary>Compares the inequality of two VertexRemovedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.GraphicLabel">
            <summary>
            <para>Class that represents a graphical text label. </para>
            </summary>
            <remarks>
            <para>Class describing non-scaling Text Label graphic. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicLabel.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.GraphicLabel.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicLabel.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicLabel.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.Alignment">
            <summary>
            <b>Get</b>
            <para>Returns how the text is aligned with respect to the X,Y position. </para>
            </summary>
            <remarks>
            <para>Returns how the text is <see cref="T:Cognex.Vision.GraphicLabelAlignmentConstants">aligned</see> with respect to the X, Y position.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicLabelAlignmentConstants">BaselineCenter</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicLabel.Alignment">Alignment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.BackgroundColor">
            <summary>
            <b>Get</b>
            <para>Returns the background color for text. Use <see cref="P:Cognex.Vision.ColorConstants.None">ColorConstants.None</see> for transparent. </para>
            </summary>
            <remarks>
            <para>Gets the background <see cref="T:Cognex.Vision.Color32">color</see> for text. Use <see cref="T:Cognex.Vision.Color32">None</see> for transparent.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.Color32">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicLabel.BackgroundColor">BackgroundColor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.DragBackgroundColor">
            <summary>
            <b>Get</b>
            <para>Returns the background color for text when the label is being dragged. Use <see cref="P:Cognex.Vision.ColorConstants.None">ColorConstants.None</see> for transparent. </para>
            </summary>
            <remarks>
            <para>Returns the background color for text when the label is being dragged. Use <see cref="T:Cognex.Vision.ColorConstants">None</see> for transparent.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.ColorConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicLabel.DragBackgroundColor">DragBackgroundColor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.Font">
            <summary>
            <b>Get</b>
            <para>Gets the <see cref="T:Cognex.Vision.Font">font</see> of the text displayed by the <see cref="T:Cognex.Vision.GraphicLabel">GraphicLabel</see>. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="T:Cognex.Vision.Font">Font</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicLabelDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.Vision.GraphicLabel">GraphicLabel</see>. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicLabel.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.Offset">
            <summary>
            <b>Get</b>
            <para>The distance from X,Y, as measured in OffsetSpaceName coordinates,to use to adjust the label position. </para>
            </summary>
            <remarks>
            <para>The distance from X,Y, as measured in <see cref="P:Cognex.Vision.GraphicLabel.OffsetSpaceName">OffsetSpaceName</see> coordinates, to use to adjust the label position.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicLabel.Offset">Offset</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.OffsetAngle">
            <summary>
            <b>Get</b>
            <para>The angle (in radians) as measured in OffsetAngleSpaceName coordinates to use to adjust the label position. </para>
            </summary>
            <remarks>
            <para>The angle (in radians) as measured in <see cref="P:Cognex.Vision.GraphicLabel.OffsetAngleSpaceName">OffsetAngleSpaceName</see> coordinates to use to adjust the label position.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicLabel.OffsetAngle">OffsetAngle</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.OffsetAngleSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape's OffsetAngle property is to be interpreted. </para>
            </summary>
            <remarks>
            <para>
            <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> in which this shape's <see cref="P:Cognex.Vision.GraphicLabel.OffsetAngle">OffsetAngle</see> property is to be interpreted.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "*" </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicLabel.OffsetAngleSpaceName">OffsetAngleSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.OffsetSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape's Offset property is to be interpreted. </para>
            </summary>
            <remarks>
            <para>
            <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> in which this shape's <see cref="P:Cognex.Vision.GraphicLabel.Offset">Offset</see> property is to be interpreted.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "*" </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicLabel.OffsetSpaceName">OffsetSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.Rotation">
            <summary>
            <b>Get</b>
            <para>The angle (in radians, from the x-axis) of the text label. </para>
            </summary>
            <remarks>
            <para>The angle (in radians, from the x-axis) of the text label.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicLabel.Rotation">Rotation</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.SelectedBackgroundColor">
            <summary>
            <b>Get</b>
            <para>Returns the background color for text when the label is selected. Use <see cref="P:Cognex.Vision.ColorConstants.None">ColorConstants.None</see> for transparent. </para>
            </summary>
            <remarks>
            <para>Returns the background color for text when the label is selected. Use <see cref="T:Cognex.Vision.ColorConstants">None</see> for transparent.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.ColorConstants">None</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicLabel.SelectedBackgroundColor">SelectedBackgroundColor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.Text">
            <summary>
            <b>Get</b>
            <para>Text for this label. </para>
            </summary>
            <remarks>
            <para>Text for this label.</para>
            </remarks>
            <value>
            <b>Default Value: </b> Text </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicLabel.Text">Text</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.X">
            <summary>
            <b>Get</b>
            <para>X coordinate of the text. </para>
            </summary>
            <remarks>
            <para>The x-coordinate of the text.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 10 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicLabel.X">X</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.Y">
            <summary>
            <b>Get</b>
            <para>Y coordinate of the text. </para>
            </summary>
            <remarks>
            <para>The y-coordinate of the text.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 10 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.GraphicLabel.Y">Y</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.GraphicLabel.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicLabel.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new shape that copies specified parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.GraphicLabel">GraphicLabel</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.GraphicLabel">GraphicLabel</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.GraphicLabel">GraphicLabel</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicLabel.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicLabel.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicLabel.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Map through a linear transform. </para>
            </summary>
            <param name="transform">The <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> used to map this <see cref="T:Cognex.Vision.GraphicLabel">GraphicLabel</see>. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped <see cref="T:Cognex.Vision.GraphicLabel">GraphicLabel</see>. </para>
            </returns>
            <remarks>
            <para>Map through a linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicLabel.SetXYText(System.Double,System.Double,System.String)">
            <summary>
            <para>Initialize this graphic label from the X, Y, and Text. </para>
            </summary>
            <param name="x">The x-coordinate of the label. </param>
            <param name="y">The y-coordinate of the label. </param>
            <param name="text">The text of the label. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            <para>Initialize this graphic label from the X, Y, and Text. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicLabel.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicLabel.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicLabel.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicLabel.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicLabel.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.GraphicLabel.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicLabel.op_Equality(Cognex.Vision.GraphicLabel,Cognex.Vision.GraphicLabel)">
            <summary>Compares the equality of two GraphicLabel objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicLabel.op_Inequality(Cognex.Vision.GraphicLabel,Cognex.Vision.GraphicLabel)">
            <summary>Compares the inequality of two GraphicLabel objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Font">
            <summary>
            <para>Class that defines a particular configuration for text, such as format, size and style. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Font.#ctor(System.String,System.Int32,Cognex.Vision.FontStyleConstants)">
            <summary>
            <para>Initializes a new <see cref="T:Cognex.Vision.Font">Font</see> that uses the specified existing font family, size and font style. </para>
            </summary>
            <param name="fontFamilyName">The font family of the new <see cref="T:Cognex.Vision.Font">Font</see>. </param>
            <param name="sizeInPoints">The size, in points, of the new <see cref="T:Cognex.Vision.Font">Font</see>. </param>
            <param name="fontStyle">The <see cref="T:Cognex.Vision.FontStyleConstants">font style</see> of the new <see cref="T:Cognex.Vision.Font">Font</see>. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">fontFamilyName is empty or whitespace only. </exception>
        </member>
        <member name="P:Cognex.Vision.Font.Bold">
            <summary>
            <para>Gets a value that indicates whether this <see cref="T:Cognex.Vision.Font">Font</see> is bold. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Font.FontStyle">
            <summary>
            <para>Gets the <see cref="T:Cognex.Vision.FontStyleConstants">font style</see> information for this <see cref="T:Cognex.Vision.Font">Font</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Font.Italic">
            <summary>
            <para>Gets a value that indicates whether this <see cref="T:Cognex.Vision.Font">Font</see> has the italic style applied. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Font.Name">
            <summary>
            <para>Gets the face name of this <see cref="T:Cognex.Vision.Font">Font</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Font.SizeInPoints">
            <summary>
            <para>Gets the size, in points, of this <see cref="T:Cognex.Vision.Font">Font</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Font.Strikeout">
            <summary>
            <para>Gets a value that indicates whether this <see cref="T:Cognex.Vision.Font">Font</see> specifies a horizontal line through the <see cref="T:Cognex.Vision.Font">Font</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Font.Underline">
            <summary>
            <para>Gets a value that indicates whether this <see cref="T:Cognex.Vision.Font">Font</see> is underlined. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Font.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Font.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Font.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Font.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Font.op_Equality(Cognex.Vision.Font,Cognex.Vision.Font)">
            <summary>Compares the equality of two Font objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Font.op_Inequality(Cognex.Vision.Font,Cognex.Vision.Font)">
            <summary>Compares the inequality of two Font objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.MaskGraphic">
            <summary>
            <para>Class that represents a mask graphic. </para>
            </summary>
            <remarks>
            <para>Class describing a mask graphic. <see cref="T:Cognex.Vision.MaskGraphic">MaskGraphic</see> is used only for displaying image masks. Tools use <see cref="T:Cognex.Vision.Image8Grey">Image8Grey </see> to define image masks. See, for example, <see cref="!:Cognex.Vision.PMAlign.PMAlignPattern">PMAlignPattern</see>, <see cref="!:Cognex.Vision.PMAlign.PMAlignPattern.TrainImageMask">TrainImageMask</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.MaskGraphic.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.MaskGraphic.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.MaskGraphic.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which interactive <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.Vision.MaskGraphic">MaskGraphic</see>. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.MaskGraphic.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.Image">
            <summary>
            <b>Get</b>
            <para>Image containing mask data. Only pixel data and Width and Height are used in building mask graphic. </para>
            </summary>
            <remarks>
            <para>
            <see cref="T:Cognex.Vision.Image8Grey">Image8Grey </see> containing mask data. Only pixel data, <see cref="P:Cognex.Vision.Image8Grey.Width">Width</see>, and <see cref="P:Cognex.Vision.Image8Grey.Height">Height</see> are used in building mask graphic.</para>
            </remarks>
            <value>
            <b>Default Value: </b> Nothing </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.MaskGraphic.Image">Image</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.OffsetX">
            <summary>
            <b>Get</b>
            <para>The X position, in pixel coordinates, of the upper left corner of the mask image. The X,Y offset controls where the mask graphic will be overlaid on a displayed image. </para>
            </summary>
            <remarks>
            <para>
            </para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.MaskGraphic.OffsetX">OffsetX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.OffsetY">
            <summary>
            <b>Get</b>
            <para>The Y position, in pixel coordinates, of the upper left corner of the mask image. The X,Y offset controls where the mask graphic will be overlaid on a displayed image. </para>
            </summary>
            <remarks>
            <para>
            </para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.MaskGraphic.OffsetY">OffsetY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.MaskGraphic.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.GetMaskColor(System.Byte)">
            <summary>
            <para>Gets the color and opacity associated with the specified mask pixel value. </para>
            </summary>
            <param name="maskVal">The mask pixel value. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            <para>Returns the color and opacity being used to display pixels with the value <b>maskVal</b>. but with Alpha set to 128 (half). <b>maskVal</b> = 1-254 (Tool Specific): <see cref="T:Cognex.Vision.ColorConstants">Yellow</see> but with Alpha set to 128 (half). <b>maskVal</b> = 255 (Care): <see cref="T:Cognex.Vision.ColorConstants">DarkGreen</see> but with Alpha set to 0 (transparent).</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <b>maskVal</b> = 0 (Don't Care): <see cref="T:Cognex.Vision.ColorConstants">DarkRed</see>
            </value>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.SetMaskColor(System.Byte,Cognex.Vision.Color32)">
            <summary>
            <para>Sets the color and opacity associated with the specified mask pixel value. </para>
            </summary>
            <param name="maskVal">The mask pixel value. </param>
            <param name="colorVal">The color and opacity to be displayed for a mask pixel having specified value. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the color map changes.</para>
            <para>Sets the color and opacity to use to display pixels with the value <b>maskVal</b>. but with Alpha set to 128. <b>maskVal</b> = 1-254 (Tool Specific): <see cref="T:Cognex.Vision.ColorConstants">Yellow</see> but with Alpha set to 128. <b>maskVal</b> = 255 (Care): <see cref="T:Cognex.Vision.ColorConstants">DarkGreen</see> but with Alpha set to 0 (transparent).</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <b>maskVal</b> = 0 (Don't Care): <see cref="T:Cognex.Vision.ColorConstants">DarkRed</see>
            </value>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.SetMaskAlpha(System.Byte,System.Byte)">
            <summary>
            <para>Set just the Alpha component of the color associated with the specified mask value. The Blue, Green, and Red components of that color entry are unchanged. </para>
            </summary>
            <param name="maskVal">The mask pixel value. </param>
            <param name="alphaVal">The desired Alpha value. Zero means fully transparent, while 255 means fully opaque. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the color map changes. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.SetMaskBlueGreenRed(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            <para>Set just the Blue, Green, and Red components of the color associated with the specified mask value. The Alpha component of that entry is unchanged. </para>
            </summary>
            <param name="maskVal">The mask pixel value. </param>
            <param name="blueVal">The desired new Blue component of the specified color entry. </param>
            <param name="greenVal">The desired new Green component of the specified color entry. </param>
            <param name="redVal">The desired Red component of the specified color entry. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the color map changes. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.SetMaskBlueGreenRed(System.Byte,Cognex.Vision.Color32)">
            <summary>
            <para>Copy the Blue, Green, and Red components of the supplied color argument into the color associated with the specified mask value. The Alpha component of that entry is unchanged. </para>
            </summary>
            <param name="maskVal">The mask pixel value. </param>
            <param name="blueGreenRedVal">The source of the desired Blue, Green, and Red components for the specified color entry. </param>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.op_Equality(Cognex.Vision.MaskGraphic,Cognex.Vision.MaskGraphic)">
            <summary>Compares the equality of two MaskGraphic objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.MaskGraphic.op_Inequality(Cognex.Vision.MaskGraphic,Cognex.Vision.MaskGraphic)">
            <summary>Compares the inequality of two MaskGraphic objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.IImage8GreyData">
            <summary>
            <para>Interface that allows direct access to 8-bit grey scale pixel data. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IImage8GreyData.Get8GreyPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Gets an object that can be used to directly access pixel memory. </para>
            </summary>
            <param name="dataMode">Specifies whether the pixel data are read, write, or read/write. </param>
            <param name="x">The x-coordinate of the portion of the image to get. </param>
            <param name="y">The y-coordinate of the portion of the image to get. </param>
            <param name="width">The width of the portion of the image to get. A value of 0 specifies the entire width of the image (<b>x</b> must also be 0). </param>
            <param name="height">The height of the portion of the image to get. A value of 0 specifies the entire height of the image (<b>y</b> must also be 0). </param>
            <returns>
            <para>An <see cref="T:Cognex.Vision.IImage8PixelMemory">object</see> that represents the pixel data. </para>
            </returns>
        </member>
        <member name="T:Cognex.Vision.Image8Grey">
            <summary>
            <para>An object that describes a rectangular array of 8 bit grey scale pixels. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.#ctor">
            <summary>
            <para>Constructs a new, <see cref="M:Cognex.Vision.Image8Grey.Allocate(System.Int32,System.Int32)">unallocated</see> instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Constructs a new <see cref="T:Cognex.Vision.Image8Grey">Image8Grey</see>, <see cref="M:Cognex.Vision.Image8Grey.Allocate(System.Int32,System.Int32)">allocating</see> image memory with the given <b>width</b> and <b>height</b>. </para>
            </summary>
            <param name="width">The width of the new image. </param>
            <param name="height">The height of the new image. </param>
        </member>
        <member name="E:Cognex.Vision.Image8Grey.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Image8Grey.Allocated">
            <summary>
            <para>Whether there is pixel data associated with this image. </para>
            </summary>
            <returns>
            <para>True if pixel data is associated with this image, false otherwise. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Image8Grey.CoordinateSpaceTree">
            <summary>
            <b>Get</b>
            <para>Returns the tree of all named coordinate spaces for this image. The tree provides advanced functions for managing coordinate spaces. </para>
            </summary>
            <returns>
            <para> The <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> for a particular image. You can use this tree to create a transformation that maps points between coordinate spaces. To ensure that all acquired images have the same coordinate space tree, use your <see cref="!:Cognex.Vision.Acquisition.IAcqFifo">AcqFifo's</see>
            <see cref="!:Cognex.Vision.Acquisition.IAcqFifo.CoordinateSpaceTree">CoordinateSpaceTree</see> property instead. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets this image's <see cref="P:Cognex.Vision.IImage.CoordinateSpaceTree">CoordinateSpaceTree</see>. </para>
            </summary>
            <param name="newVal">The new <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> to use.</param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Image8Grey.SfCoordinateSpaceTree">SfCoordinateSpaceTree</see>.</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">If <b>newVal</b> is NULL </exception>
        </member>
        <member name="P:Cognex.Vision.Image8Grey.Height">
            <summary>
            <para>Height of the image. </para>
            </summary>
            <returns>
            <para>The height of this image in pixels. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Image8Grey.PixelFromRootTransform">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.ITransform2D">Transformation</see> that maps points into pixel space ("#") from the root space ("@"). </para>
            </summary>
            <returns>
            <para>The <see cref="T:Cognex.Vision.ITransform2D">transformation</see> that maps points into pixel space ("#") from the root space ("@"). </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IImage.PixelFromRootTransform">PixelFromRootTransform</see>. </para>
            </summary>
            <param name="newVal">The new <see cref="T:Cognex.Vision.ITransform2D">transformation</see> to be used. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">The transformation is NULL.</exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Image8Grey.SfPixelFromRootTransform">SfPixelFromRootTransform</see>.</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">If <b>newVal</b> is NULL </exception>
        </member>
        <member name="P:Cognex.Vision.Image8Grey.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>The name of the default coordinate space to be used by tools which process this image. </para>
            </summary>
            <returns>
            <para>The name of the space in this image's <see cref="P:Cognex.Vision.IImage.CoordinateSpaceTree">CoordinateSpaceTree</see> to be used by tools that process this image. Vision defines <A href="../UsersGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-space-names-symbols.htm">special space names</A> for the root coordinate space ("@"), the pixel coordinate space ("#"), the screen coordinate space ("*"), as well as others.</para>
            </returns>
            <remarks>
            <para>Default is "@" (root space) </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets this image's <see cref="T:Cognex.Vision.IImage">SelectedSpaceName</see>. </para>
            </summary>
            <param name="newVal">The new <see cref="T:Cognex.Vision.IImage">SelectedSpaceName</see> to be used.</param>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>value</b> is not a valid space name.</exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Image8Grey.SfSelectedSpaceName">SfSelectedSpaceName</see>.</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>val</b> is not a valid space name. </exception>
        </member>
        <member name="P:Cognex.Vision.Image8Grey.Width">
            <summary>
            <para>Width of the image. </para>
            </summary>
            <returns>
            <para>The width of this image in pixels. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Image8Grey.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.Allocate(System.Int32,System.Int32)">
            <summary>
            <para>Initialize the image with (undefined) pixel data of the given <b>width</b> and <b>height</b>. This method may not be called more than once. </para>
            </summary>
            <param name="width">The desired width of the image in pixels. </param>
            <param name="height">The desired height of the image in pixels. </param>
            <exception cref="T:Cognex.Vision.ImageException">The image is already allocated to a different size. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>width</b> or <b>height</b> is less than or equal to 0. </exception>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.Copy">
            <summary>
            <para>Create a copy of this image in a new image. While the pixels will be copied, the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> and <see cref="P:Cognex.Vision.Image8Grey.PixelFromRootTransform">PixelFromRootTransform</see> will be shared. Equivalent to calling <see cref="M:Cognex.Vision.Image8Grey.Copy">Copy</see> with <b>copyMode</b> as <see cref="F:Cognex.Vision.ImageCopyModeConstants.CopyPixels">CopyPixels.. </see>
            </para>
            </summary>
            <returns>
            <para>The new image. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.Copy(Cognex.Vision.ImageCopyModeConstants)">
            <summary>
            <para>Create a copy of this image in a new image. Pixels may be shared between images by specifying <b>copyMode</b> as <see cref="T:Cognex.Vision.ImageCopyModeConstants">SharePixels</see>. </para>
            </summary>
            <param name="copyMode">The desired <see cref="T:Cognex.Vision.ImageCopyModeConstants">copy mode</see>. </param>
            <returns>
            <para>The new <see cref="T:Cognex.Vision.IImage">image</see>. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.CopyBase(Cognex.Vision.ImageCopyModeConstants)">
            <summary>
            <para>Create a copy of this image in a new image. Pixels may be shared between images by specifying <b>copyMode</b> as <see cref="T:Cognex.Vision.ImageCopyModeConstants">SharePixels</see>. </para>
            </summary>
            <param name="copyMode">The desired <see cref="T:Cognex.Vision.ImageCopyModeConstants">copy mode</see>. </param>
            <returns>
            <para>The new <see cref="T:Cognex.Vision.IImage">image</see>. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.Get8GreyPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Gets an object that can be used to directly access pixel memory. </para>
            </summary>
            <param name="dataMode">Specifies whether the pixel data are read, write, or read/write. </param>
            <param name="x">The x-coordinate of the portion of the image to get. </param>
            <param name="y">The y-coordinate of the portion of the image to get. </param>
            <param name="width">The width of the portion of the image to get. A value of 0 specifies the entire width of the image (<b>x</b> must also be 0). </param>
            <param name="height">The height of the portion of the image to get. A value of 0 specifies the entire height of the image (<b>y</b> must also be 0). </param>
            <returns>
            <para>An <see cref="T:Cognex.Vision.IImage8PixelMemory">object</see> that represents the pixel data. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ImageException">
            <b>x</b>, <b>y</b>, <b>width</b>, and <b>height</b> describe a region that is not entirely within this image. </exception>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.GetPixel(System.Int32,System.Int32)">
            <summary>
            <para>Pixel value at given location. </para>
            </summary>
            <param name="x">The pixel's x location. </param>
            <param name="y">The pixel's y location. </param>
            <returns>
            <para>The pixel value at the location specified by <b>x</b> and <b>y</b>. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ImageException">
            <see cref="M:Cognex.Vision.Image8Grey.Allocate(System.Int32,System.Int32)">Allocate</see> has not yet been called. </exception>
            <exception cref="T:Cognex.Vision.ImageException">
            <b>x</b> or <b>y</b> is outside of this image (less than 0, or greater than or equal to <see cref="P:Cognex.Vision.Image8Grey.Width">Width</see> or <see cref="P:Cognex.Vision.Image8Grey.Height">Height</see>). </exception>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.GetRoot(Cognex.Vision.IImage8Root@)">
            <summary>
            <para>Returns the root image object that contains the raw pixel data. </para>
            </summary>
            <param name="root">(output param) The image data.</param>
            <remarks>
            <para> This function is <b>not</b> recommended to access raw pixel data. Use <see cref="M:Cognex.Vision.Image8Grey.Get8GreyPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)">Get8GreyPixelMemory</see> to directly access this image's pixel data. This function is useful in cases where you want two images to share the same pixel data. For example, you can pass the result of this function to <see cref="M:Cognex.Vision.Image8Grey.SetRoot(Cognex.Vision.IImage8Root)">SetRoot</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.GetTransform(System.String,System.String)">
            <summary>
            <para>Returns a transformation that maps points from the 'From' coordinate space to the 'To' space. </para>
            </summary>
            <param name="toSpaceName">The name of the coordinate space to transform the point to. The special string "." is accepted as an alias for the <see cref="P:Cognex.Vision.IImage.SelectedSpaceName">SelectedSpaceName</see> of this image. </param>
            <param name="fromSpaceName">The name of the coordinate space to transform the point from. The special string "." is accepted as an alias for the <see cref="P:Cognex.Vision.IImage.SelectedSpaceName">SelectedSpaceName</see> of this image. </param>
            <returns>
            <para>The <see cref="T:Cognex.Vision.ITransform2D">transformation</see> that maps a point from the <b>fromSpaceName</b> to the <b>toSpaceName</b>. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ImageException">The coordinate space tree is missing.</exception>
            <exception cref="T:Cognex.Vision.ImageException">This image has no <see cref="P:Cognex.Vision.IImage.CoordinateSpaceTree">CoordinateSpaceTree</see>. </exception>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.SetPixel(System.Int32,System.Int32,System.Byte)">
            <summary>
            <para>Sets the value of the pixel at the given location. </para>
            </summary>
            <param name="x">The pixel's x location. </param>
            <param name="y">The pixel's y location. </param>
            <param name="value">The new value for the specified pixel </param>
            <exception cref="T:Cognex.Vision.ImageException">
            <see cref="M:Cognex.Vision.Image8Grey.Allocate(System.Int32,System.Int32)">Allocate</see> has not yet been called. </exception>
            <exception cref="T:Cognex.Vision.ImageException">
            <b>x</b> or <b>y</b> is outside the bounds of this image (less than 0, or greater than or equal to width or height) </exception>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.SetRoot(Cognex.Vision.IImage8Root)">
            <summary>
            <para>Sets the root image object that contains the raw pixel data. </para>
            </summary>
            <param name="root">The new root object to use. Can be NULL, which will disconnect this image from its existing root. </param>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.op_Equality(Cognex.Vision.Image8Grey,Cognex.Vision.Image8Grey)">
            <summary>Compares the equality of two Image8Grey objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Image8Grey.op_Inequality(Cognex.Vision.Image8Grey,Cognex.Vision.Image8Grey)">
            <summary>Compares the inequality of two Image8Grey objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.IImage8Root">
            <summary>
            <para>Interface to a root object that holds raw 8-bit pixel data of an image. </para>
            </summary>
            <para>
            <b>Note</b>
            <para>
            <para>This interface is intended for Cognex use only. </para>
            </para>
            </para>
        </member>
        <member name="P:Cognex.Vision.IImage8Root.Height">
            <summary>
            <para>Returns the height of the pixel data. </para>
            </summary>
            <returns>
            <para>The height of the pixel data. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.IImage8Root.Width">
            <summary>
            <para>Returns the width of the pixel data. </para>
            </summary>
            <remarks>
            <para>The width of the pixel data. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IImage8Root.GetRawPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.Vision.IImage8PixelMemory@)">
            <summary>
            <para>Gets an object that can be used to directly access the raw pixel data. The caller MUST call Dispose on this object when finished with it. </para>
            </summary>
            <param name="dataMode">Specifies whether the pixel data are <see cref="T:Cognex.Vision.ImageDataModeConstants">read, write, or read/write</see>. </param>
            <param name="x">The x-coordinate of the portion of the image to get. </param>
            <param name="y">The y-coordinate of the portion of the image to get. </param>
            <param name="width">The width of the image to get. </param>
            <param name="height">The height of the image to get. </param>
            <param name="pixelMemory">(output param) An object that represents the pixel data.</param>
            <remarks>
            <para> This method is intended for Cognex use only. To access the pixel data directly, use <see cref="T:Cognex.Vision.Image8Grey">Image8Grey's</see>
            <see cref="M:Cognex.Vision.Image8Grey.Get8GreyPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)">Get8GreyPixelMemory()</see> instead. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IImage8Root.Copy">
            <summary>
            <para>Make a deep copy of the image root, the pixel memory is copied. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.PointMarker">
            <summary>
            <para>Class that represents a graphical point marker. </para>
            </summary>
            <remarks>
            <para>Primary interface of a CogPointMarker. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PointMarker.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.PointMarker.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.PointMarker.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.PointMarker.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PointMarker.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.PointMarkerDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.PointMarker.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.PointMarker.GraphicType">
            <summary>
            <b>Get</b>
            <para>The graphic type (such as <see cref="T:Cognex.Vision.PointMarkerGraphicTypeConstants">Cross</see>, etc.) of this point marker. </para>
            </summary>
            <remarks>
            <para>The graphic used to display this point marker.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.PointMarkerGraphicTypeConstants">Cross</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.PointMarker.GraphicType">GraphicType</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.PointMarkerGraphicTypeConstants">PointMarkerGraphicTypeConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.PointMarker.Rotation">
            <summary>
            <b>Get</b>
            <para>The rotation (from the x-axis) in radian of this point marker. </para>
            </summary>
            <remarks>
            <para>The rotation, in radians from the x-axis, of this point marker.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.PointMarker.Rotation">Rotation</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.PointMarker.SizeInScreenPixels">
            <summary>
            <b>Get</b>
            <para>The size (in screen pixels) of a side of the bounding square for this point marker. Size must be greater than zero. </para>
            </summary>
            <remarks>
            <para>The size in screen pixels of a side of the bounding square for this point marker.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 11 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.PointMarker.SizeInScreenPixels">SizeInScreenPixels</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is &lt;= 0. </exception>
        </member>
        <member name="P:Cognex.Vision.PointMarker.X">
            <summary>
            <b>Get</b>
            <para>The X coordinate of the center of this point marker. </para>
            </summary>
            <remarks>
            <para>The x-coordinate of the center of this point marker.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 10 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.PointMarker.X">X</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.PointMarker.Y">
            <summary>
            <b>Get</b>
            <para>The Y coordinate of the center of this point marker. </para>
            </summary>
            <remarks>
            <para>The y-coordinate of the center of this point marker.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 10 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.PointMarker.Y">Y</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.PointMarker.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PointMarker.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.PointMarker.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.PointMarker.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PointMarker.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PointMarker.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PointMarker.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.PointMarker.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.PointMarker.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.PointMarker.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.PointMarker.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.PointMarker.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PointMarker.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PointMarker.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PointMarker.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PointMarker.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PointMarker.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.PointMarker.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.PointMarker.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PointMarker.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
        </member>
        <member name="M:Cognex.Vision.PointMarker.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new shape that copies specified parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.PointMarker">PointMarker</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.PointMarker">PointMarker</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PointMarker.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PointMarker.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PointMarker.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PointMarker.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PointMarker.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PointMarker.GetCenterRotationSize(System.Double@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            <para>Gets x and y coordinates of the center point, rotation (in radian) and the size (in screen pixels) of a side of the bounding square of the point marker. </para>
            </summary>
            <param name="x">The x-coordinate of the center of the point marker. </param>
            <param name="y">The y-coordinate of the center of the point marker. </param>
            <param name="rotation">The rotation angle (in radians) of the point marker. </param>
            <param name="sizeInScreenPixels">The size (in pixels) of the bounding box of the point marker. </param>
            <remarks>
            <para>Gets x and y coordinates of the center point, rotation (in radian) and the size (in screen pixels) of a side of the bounding square of the point marker. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PointMarker.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PointMarker.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PointMarker.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates a new point marker by mapping this point marker through a linear transform. </para>
            </summary>
            <param name="transform">The <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> used to map this <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>. </para>
            </returns>
            <remarks>
            <para>Creates a new point marker by mapping this point marker through a linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PointMarker.SetCenterRotationSize(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            <para>Sets x and y coordinates of the center point, rotation (in radian) and the size (in screen pixels) of a side of the bounding square of the point marker. Size must be greater than zero. </para>
            </summary>
            <param name="x">The x-coordinate of the center of the point marker. </param>
            <param name="y">The y-coordinate of the center of the point marker. </param>
            <param name="rotation">The rotation angle (in radians) of the point marker. </param>
            <param name="sizeInScreenPixels">The size (in pixels) of the bounding box of the point marker. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>sizeInScreenPixels</b> is &lt;= 0. </exception>
            <remarks>
            <para>Sets x- and y-coordinates of the center point, rotation (in radians) and the size (in screen pixels) of a side of the bounding square of the point marker. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PointMarker.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PointMarker.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PointMarker.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PointMarker.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PointMarker.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.PointMarker.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.PointMarker.op_Equality(Cognex.Vision.PointMarker,Cognex.Vision.PointMarker)">
            <summary>Compares the equality of two PointMarker objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.PointMarker.op_Inequality(Cognex.Vision.PointMarker,Cognex.Vision.PointMarker)">
            <summary>Compares the inequality of two PointMarker objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.CompositeShape">
            <summary>
            <para>Class that represents a composite shape : a shape made up of many child shapes. </para>
            </summary>
            <remarks>
            <para>Interface that describes a composite shape. A composite shape is a made up of one or more shapes that can behave as a single graphic entity. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.CompositeShape.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.CompositeShape.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.CompositeShape.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.CompositionMode">
            <summary>
            <b>Get</b>
            <para>Controls how this shape composes itself from its sub-shapes. Uniform mode propagates all composite graphic properties to sub shapes, making them act as if they were all one graphic. Freeform mode does not. </para>
            </summary>
            <remarks>
            <para>Controls how this shape composes itself from its child shapes. <see cref="T:Cognex.Vision.CompositeShapeCompositionModeConstants">Uniform</see> propagates all of the composite shape's graphic properties to the child shapes so that they behave as if they were a single graphic. <see cref="T:Cognex.Vision.CompositeShapeCompositionModeConstants">Freeform</see> allows each shape in the composite shape to be manipulated according to its own graphic properties. The <see cref="P:Cognex.Vision.CompositeShape.SelectedSpaceName">SelectedSpaceName</see> and <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> properties are never propagated from the composite shape to the child shapes.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.CompositeShapeCompositionModeConstants">Uniform</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CompositeShape.CompositionMode">CompositionMode</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CompositeShape.SfCompositionMode">SfCompositionMode</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.CompositeShapeCompositionModeConstants">CompositeShapeCompositionModeConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which interactive <see cref="T:Cognex.Vision.CompositeShapeDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.Vision.CompositeShape">CompositeShape</see>. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CompositeShape.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfGraphicDOFEnableBase">SfGraphicDOFEnableBase</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.ID">
            <summary>
            <b>Get</b>
            <para>Property for identifying this graphic. </para>
            </summary>
            <remarks>
            <para>Gets an ID that identifies this composite shape. Vision uses the ID in result graphics to correlate a result graphic with a particular result, which also has an ID.</para>
            </remarks>
            <value>
            <b>Default Value: </b> -1 </value>
            <summary>
            <b>Set</b>
            <para>Sets ID. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CompositeShape.SfID">SfID</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.PaddingInScreenPixels">
            <summary>
            <b>Get</b>
            <para>Selection rectangle padding around child shapes. </para>
            </summary>
            <remarks>
            <para>Gets the amount of padding, in pixels, between the child shapes and the selection rectangle of the composite shape.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CompositeShape.PaddingInScreenPixels">PaddingInScreenPixels</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CompositeShape.SfPaddingInScreenPixels">SfPaddingInScreenPixels</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.ParentFromChildTransform">
            <summary>
            <b>Get</b>
            <para>Transform from the child shape space to this shape's SelectedSpaceName. </para>
            </summary>
            <remarks>
            <para>Gets the transform used to map from the child shape space to this composite shape's <see cref="P:Cognex.Vision.CompositeShape.SelectedSpaceName">SelectedSpaceName</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b> The identity transform </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CompositeShape.ParentFromChildTransform">ParentFromChildTransform</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CompositeShape.SfParentFromChildTransform">SfParentFromChildTransform</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.SelectionGraphicColor">
            <summary>
            <b>Get</b>
            <para>Controls color of selection graphic when it appears. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of the selection rectangle that encloses the composite shape when it is visible. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CompositeShape.SelectionGraphicColor">SelectionGraphicColor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CompositeShape.SfSelectionGraphicColor">SfSelectionGraphicColor</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.SelectionGraphicLineStyle">
            <summary>
            <b>Get</b>
            <para>Controls line style of selection graphic when it appears. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of the selection rectangle that encloses the composite shape when it is visible. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CompositeShape.SelectionGraphicLineStyle">SelectionGraphicLineStyle</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CompositeShape.SfSelectionGraphicLineStyle">SfSelectionGraphicLineStyle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.GraphicLineStyleConstants">GraphicLineStyleConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.SelectionGraphicLineWidthInScreenPixels">
            <summary>
            <b>Get</b>
            <para>Controls line width of selection graphic when it appears. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the selection rectangle that encloses the composite shape. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CompositeShape.SelectionGraphicLineWidthInScreenPixels">SelectionGraphicLineWidthInScreenPixels</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CompositeShape.SfSelectionGraphicLineWidthInScreenPixels">SfSelectionGraphicLineWidthInScreenPixels</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is &lt; 1. </exception>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.SelectionGraphicMouseCursor">
            <summary>
            <b>Get</b>
            <para>Gets the mouse cursor used with the selection rectangle that encloses the composite shape. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CompositeShape.SfSelectionGraphicMouseCursor">SfSelectionGraphicMouseCursor</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CompositeShape.SelectionGraphicMouseCursor">SelectionGraphicMouseCursor</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.Shapes">
            <summary>
            <para>Child shapes that make up this composite shape. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the shapes collection changes.</para>
            <para>The collection of child shapes that make up this composite shape. The child shapes are specified in the parent graphic's coordinate space and must have a <see cref="P:Cognex.Vision.CompositeShape.SelectedSpaceName">SelectedSpaceName</see> of $ (Fully-Qualified (FQ) Space Names). You can set the children's coordinate space with <see cref="P:Cognex.Vision.CompositeShape.ParentFromChildTransform">ParentFromChildTransform</see>. </para>
            </remarks>
            <b>Note</b>
            <para>
            <para>This collection contains only the shapes that you add. It does not contain, for instance, handle shapes that appear in the <see cref="P:Cognex.Vision.IGraphicParentChild.Children">Children</see> collection.</para>
            </para>
            <value>
            <b>Default Value: </b> Empty </value>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.XDirectionAdornment">
            <summary>
            <b>Get</b>
            <para>The X direction adornment of this composite shape. </para>
            </summary>
            <remarks>
            <para>The x-direction <see cref="T:Cognex.Vision.CompositeShapeDirectionAdornmentConstants">adornment</see> of this composite shape, an arrow in the positive x-direction of the bounding rectangle of the shape. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CompositeShape.XDirectionAdornment">XDirectionAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CompositeShape.SfXDirectionAdornment">SfXDirectionAdornment</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.CompositeShapeDirectionAdornmentConstants">CompositeShapeDirectionAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.YDirectionAdornment">
            <summary>
            <b>Get</b>
            <para>The Y direction adornment of this composite shape. </para>
            </summary>
            <remarks>
            <para>The y-direction <see cref="T:Cognex.Vision.CompositeShapeDirectionAdornmentConstants">adornment</see> of this composite shape, an arrow in the positive y-direction of the bounding rectangle of the shape. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CompositeShape.SfXDirectionAdornment">SfXDirectionAdornment</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CompositeShape.YDirectionAdornment">YDirectionAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.CompositeShapeDirectionAdornmentConstants">CompositeShapeDirectionAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CompositeShape.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new shape that copies specified parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.CompositeShape">CompositeShape</see>
            </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.CompositeShape">CompositeShape</see> that copies the specified attributes from this <see cref="T:Cognex.Vision.CompositeShape">CompositeShape</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Map through a linear transform. </para>
            </summary>
            <param name="transform">The <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> used to map this <see cref="T:Cognex.Vision.CompositeShape">CompositeShape</see>. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped <see cref="T:Cognex.Vision.CompositeShape">CompositeShape</see>. </para>
            </returns>
            <remarks>
            <para>Maps the composite shape through a linear transform. This function does not map each of the children; it simply composes <b>transform</b> into the composite shape's <see cref="P:Cognex.Vision.CompositeShape.ParentFromChildTransform">ParentFromChildTransform</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.op_Equality(Cognex.Vision.CompositeShape,Cognex.Vision.CompositeShape)">
            <summary>Compares the equality of two CompositeShape objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CompositeShape.op_Inequality(Cognex.Vision.CompositeShape,Cognex.Vision.CompositeShape)">
            <summary>Compares the inequality of two CompositeShape objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.CoordinateAxes">
            <summary>
            <para>Class that represents a pair of coordinate axes. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.CoordinateAxes.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.CoordinateAxes.Dragging">
            <summary>
            <para>Raised when an interactive graphic is being dragged. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.CoordinateAxes.DraggingStopped">
            <summary>
            <para>Raised after the drag operation of an interactive graphic is complete. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.Aspect">
            <summary>
            <b>Get</b>
            <para>The aspect ratio of the length of Y-axis to X-axis. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.Aspect">Aspect</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginX">SfOriginX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginY">SfOriginY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfXAxisLength">SfXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfSkew">SfSkew</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayMode">SfDisplayMode</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorX">SfDisplayedScaleFactorX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorY">SfDisplayedScaleFactorY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedXAxisLength">SfDisplayedXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedAspect">SfDisplayedAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfTransform">SfTransform</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is &lt;= 0. </exception>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.DisplayedAspect">
            <summary>
            <b>Get</b>
            <para>When <see cref="P:Cognex.Vision.CoordinateAxes.DisplayMode">DisplayMode</see> is <see cref="T:Cognex.Vision.CoordinateAxesModeConstants">Screen</see> this is the aspect ratio of the displayed length of y-axis to the <see cref="P:Cognex.Vision.CoordinateAxes.DisplayedXAxisLength">displayed length of the x-axis</see>. </para>
            </summary>
            <value>
            <b>Default Value: </b> 1 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.DisplayedAspect">DisplayedAspect</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginX">SfOriginX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginY">SfOriginY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfXAxisLength">SfXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfSkew">SfSkew</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayMode">SfDisplayMode</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorX">SfDisplayedScaleFactorX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorY">SfDisplayedScaleFactorY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedXAxisLength">SfDisplayedXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedAspect">SfDisplayedAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfTransform">SfTransform</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is &lt;= 0. </exception>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.DisplayedScaleFactorX">
            <summary>
            <b>Get</b>
            <para>Multiplier for graphic's displayed <see cref="P:Cognex.Vision.CoordinateAxes.XAxisLength">x-axis length</see> when <see cref="P:Cognex.Vision.CoordinateAxes.DisplayMode">DisplayMode</see> is <see cref="T:Cognex.Vision.CoordinateAxesModeConstants">Mathematical</see> or <see cref="T:Cognex.Vision.CoordinateAxesModeConstants">Scale</see>. </para>
            </summary>
            <value>
            <b>Default Value: </b> 1 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.DisplayedScaleFactorX">DisplayedScaleFactorX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginX">SfOriginX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginY">SfOriginY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfXAxisLength">SfXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfSkew">SfSkew</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayMode">SfDisplayMode</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorX">SfDisplayedScaleFactorX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorY">SfDisplayedScaleFactorY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedXAxisLength">SfDisplayedXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedAspect">SfDisplayedAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfTransform">SfTransform</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is &lt;= 0. </exception>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.DisplayedScaleFactorY">
            <summary>
            <b>Get</b>
            <para>Multiplier for graphic's displayed y-axis length when <see cref="P:Cognex.Vision.CoordinateAxes.DisplayMode">DisplayMode</see> is <see cref="T:Cognex.Vision.CoordinateAxesModeConstants">Mathematical</see> or <see cref="T:Cognex.Vision.CoordinateAxesModeConstants">Scale</see>. </para>
            </summary>
            <value>
            <b>Default Value: </b> 1 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.DisplayedScaleFactorY">DisplayedScaleFactorY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginX">SfOriginX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginY">SfOriginY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfXAxisLength">SfXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfSkew">SfSkew</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayMode">SfDisplayMode</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorX">SfDisplayedScaleFactorX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorY">SfDisplayedScaleFactorY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedXAxisLength">SfDisplayedXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedAspect">SfDisplayedAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfTransform">SfTransform</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is &lt;= 0. </exception>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.DisplayedXAxisLength">
            <summary>
            <b>Get</b>
            <para>The length of the x-axis in screen pixels when <see cref="P:Cognex.Vision.CoordinateAxes.DisplayMode">DisplayMode</see> is <see cref="T:Cognex.Vision.CoordinateAxesModeConstants">Screen</see>. </para>
            </summary>
            <value>
            <b>Default Value: </b> 20 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.DisplayedXAxisLength">DisplayedXAxisLength</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginX">SfOriginX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginY">SfOriginY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfXAxisLength">SfXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfSkew">SfSkew</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayMode">SfDisplayMode</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorX">SfDisplayedScaleFactorX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorY">SfDisplayedScaleFactorY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedXAxisLength">SfDisplayedXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedAspect">SfDisplayedAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfTransform">SfTransform</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is &lt;= 0. </exception>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.DisplayMode">
            <summary>
            <b>Get</b>
            <para>Controls which properties are used to draw the coordinate axes and how those properties are modified when the user modifies the graphic interactively. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.CoordinateAxesModeConstants">Screen</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.DisplayMode">DisplayMode</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginX">SfOriginX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginY">SfOriginY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfXAxisLength">SfXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfSkew">SfSkew</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayMode">SfDisplayMode</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorX">SfDisplayedScaleFactorX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorY">SfDisplayedScaleFactorY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedXAxisLength">SfDisplayedXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedAspect">SfDisplayedAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfTransform">SfTransform</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.CoordinateAxesModeConstants">CoordinateAxesModeConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.GraphicDOFEnable">
            <summary>
            <b>Get</b>
            <para>Interactive Degree of freedom for this graphic object. Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized. </para>
            </summary>
            <remarks>
            <para>Gets which interactive <see cref="T:Cognex.Vision.CoordinateAxesDOFConstants">degrees of freedom</see> (DOF) are enabled for this coordinate axes. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.GraphicDOFEnable">GraphicDOFEnable</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfGraphicDOFEnableBase">SfGraphicDOFEnableBase</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.OriginX">
            <summary>
            <b>Get</b>
            <para>X coordinate of the origin. </para>
            </summary>
            <remarks>
            <para>X-coordinate of the origin.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.OriginX">OriginX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginX">SfOriginX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginY">SfOriginY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfXAxisLength">SfXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfSkew">SfSkew</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayMode">SfDisplayMode</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorX">SfDisplayedScaleFactorX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorY">SfDisplayedScaleFactorY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedXAxisLength">SfDisplayedXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedAspect">SfDisplayedAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfTransform">SfTransform</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.OriginY">
            <summary>
            <b>Get</b>
            <para>Y coordinate of the origin. </para>
            </summary>
            <remarks>
            <para>Y-coordinate of the origin.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.OriginY">OriginY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginX">SfOriginX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginY">SfOriginY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfXAxisLength">SfXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfSkew">SfSkew</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayMode">SfDisplayMode</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorX">SfDisplayedScaleFactorX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorY">SfDisplayedScaleFactorY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedXAxisLength">SfDisplayedXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedAspect">SfDisplayedAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfTransform">SfTransform</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.Rotation">
            <summary>
            <b>Get</b>
            <para>The rotation of the x-axis in radians. Setting rotation does not change <see cref="P:Cognex.Vision.CoordinateAxes.Skew">Skew</see>. </para>
            </summary>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.Rotation">Rotation</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginX">SfOriginX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginY">SfOriginY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfXAxisLength">SfXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfSkew">SfSkew</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayMode">SfDisplayMode</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorX">SfDisplayedScaleFactorX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorY">SfDisplayedScaleFactorY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedXAxisLength">SfDisplayedXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedAspect">SfDisplayedAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfTransform">SfTransform</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.Skew">
            <summary>
            <b>Get</b>
            <para>The skew of this coordinate axis in radian units. </para>
            </summary>
            <remarks>
            <para>Skew=0 means a right angle between the x- and y-axis.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.Skew">Skew</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginX">SfOriginX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginY">SfOriginY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfXAxisLength">SfXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfSkew">SfSkew</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayMode">SfDisplayMode</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorX">SfDisplayedScaleFactorX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorY">SfDisplayedScaleFactorY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedXAxisLength">SfDisplayedXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedAspect">SfDisplayedAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfTransform">SfTransform</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.Transform">
            <summary>
            <b>Get</b>
            <para>The <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see> will modify this transform to reflect its internal properties. </para>
            </summary>
            <remarks>
            <para>Gets a transformation object that corresponds with this coordinate axes If getting a transformation object, the transformation object returned corresponds to the current state of the coordinate axes. If setting a transformation object, the coordinate axes change to reflect the transformation object. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.Transform">Transform</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginX">SfOriginX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginY">SfOriginY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfXAxisLength">SfXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfSkew">SfSkew</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayMode">SfDisplayMode</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorX">SfDisplayedScaleFactorX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorY">SfDisplayedScaleFactorY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedXAxisLength">SfDisplayedXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedAspect">SfDisplayedAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfTransform">SfTransform</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.XAxisEndPointAdornment">
            <summary>
            <b>Get</b>
            <para>The end point adornment for the X axis. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.CoordinateAxesEndPointAdornmentConstants">Arrow</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.XAxisEndPointAdornment">XAxisEndPointAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>SfXAxisEndPointAdornment</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.CoordinateAxesEndPointAdornmentConstants">CoordinateAxesEndPointAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.XAxisLabel">
            <summary>
            <para>The text label for the X-axis. </para>
            </summary>
            <value>
            <b>Default Value: </b> "X" </value>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.XAxisLength">
            <summary>
            <b>Get</b>
            <para>The length in the selected coordinate space of the x-axis of this shape. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.XAxisLength">XAxisLength</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginX">SfOriginX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginY">SfOriginY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfXAxisLength">SfXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfSkew">SfSkew</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayMode">SfDisplayMode</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorX">SfDisplayedScaleFactorX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorY">SfDisplayedScaleFactorY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedXAxisLength">SfDisplayedXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedAspect">SfDisplayedAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfTransform">SfTransform</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is &lt;= 0. </exception>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.YAxisEndPointAdornment">
            <summary>
            <b>Get</b>
            <para>The end point adornment for the Y axis. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.CoordinateAxesEndPointAdornmentConstants">Arrow</see>
            </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateAxes.YAxisEndPointAdornment">YAxisEndPointAdornment</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flags may be affected:<list type="bullet">
            <item>
            <description>SfYAxisEndPointAdornment</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>Value</b> is not in <see cref="T:Cognex.Vision.CoordinateAxesEndPointAdornmentConstants">CoordinateAxesEndPointAdornmentConstants</see>. </exception>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.YAxisLabel">
            <summary>
            <para>The text label for the Y-axis. </para>
            </summary>
            <value>
            <b>Default Value: </b> "Y" </value>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.Children">
            <summary>
            <para>Children of this graphic. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.Color">
            <summary>
            <para>Color of this graphic. Can be any OLE_COLOR. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.Cyan">Cyan</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.FillColor">
            <summary>
            <para>The fill color of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">fill color</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. This property specifies the color that fills in the inside of a closed shape</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="P:Cognex.Vision.ColorConstants.None">None</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.DragColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.ColorConstants">Color</see> of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.DragLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of the graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.DragLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when dragged. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.GraphicDOFEnableBase">
            <summary>
            <para>Interactive Degree of freedom for a graphic object. Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type. </para>
            </summary>
            <value>
            <b>Default Value: </b>
            <see cref="T:Cognex.Vision.GraphicDOFConstants">None</see>
            </value>
            <remarks>
            <para>Gets which <see cref="T:Cognex.Vision.GraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape. This property allows access to a graphic's <b>GraphicDOFEnable</b> property without knowing the specific graphic type. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.Interactive">
            <summary>
            <para>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object. </para>
            </summary>
            <remarks>
            <para>Gets whether this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> can be selected and manipulated. See <see cref="P:Cognex.Vision.GraphicInteractiveBase.GraphicDOFEnableBase">GraphicDOFEnableBase</see> for information about interactive manipulation of an object. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.LineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.GraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>.</para>
            </remarks>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.GraphicLineStyleConstants.Solid">Solid</see>
            </value>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.LineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width (in screen pixels) of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets the width of the line used to draw the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> in pixels.</para>
            </remarks>
            <value>
            <b>Default Value: </b> 1 </value>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.MouseCursor">
            <summary>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. The cursor will be visible only if the graphic is interactive. </para>
            </summary>
            <remarks>
            <para>Mouse cursor to be displayed when the mouse is over the graphic. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.Selected">
            <summary>
            <para>True when the shape is selected in a display. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.SelectedColor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Color32">Color</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.SelectedLineStyle">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.GraphicLineStyleConstants">Line style</see> of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.SelectedLineWidthInScreenPixels">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> width of this graphic when selected. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.TipText">
            <summary>
            <para>Text to describe this graphic in a tool tip. Newline characters can be used to create multi-line tip text. </para>
            </summary>
            <remarks>
            <para>Gets the text that describes this <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> in a tool tip. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.Visible">
            <summary>
            <para>Visible property of this graphic. </para>
            </summary>
            <remarks>
            <para>Gets whether the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> is visible.</para>
            </remarks>
            <value>
            <b>Default Value: </b> True </value>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateAxes.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>Coordinate space in which this shape is to be interpreted. </para>
            </summary>
            <remarks>
            <para>Gets the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> of this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. Special space names for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.</para>
            </remarks>
            <value>
            <b>Default Value: </b> "." </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following StateFlags may be affected :<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfSelectedSpaceName">SfSelectedSpaceName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.Copy(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Create a new coordinate axes that copies specified parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied CoordinateAxes object. </para>
            </returns>
            <remarks>
            <para>Creates a new CoordinateAxes that copies the specified parameter from this CoordinateAxes. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.CopyBase(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Copy a graphic and its derived parameters. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The copied <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> object. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> that copies the specified parameter from this <see cref="T:Cognex.Vision.IGraphic">IGraphic</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.DistanceToPoint(System.Double,System.Double)">
            <summary>
            <para>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero. </para>
            </summary>
            <param name="x">The x-coordinate to measure from. </param>
            <param name="y">The y-coordinate to measure from. </param>
            <returns>
            <para>The distance from the point ( <b>x</b> , <b>y</b> ) to the shape. </para>
            </returns>
            <remarks>
            <para>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero. The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>, only its center is considered meaningful, not the distance to one of the arms. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.EnclosingRectangle(Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Minimum enclosing rectangle of this shape. </para>
            </summary>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle. </param>
            <returns>
            <para>The returned rectangle. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ShapeException">The shape is a <see cref="T:Cognex.Vision.Line">Line</see>. </exception>
            <remarks>
            <para>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.Vision.Line">Line</see> does not have an enclosing rectangle. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.FitToBoundingBox(Cognex.Vision.Rectangle)">
            <summary>
            <para>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle. </para>
            </summary>
            <param name="boundingRectangle">The rectangle that the shape is to fit into. </param>
            <remarks>
            <para>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle. The coordinates of the bounding box must be given in the same coordinate space as the shape.  Different shapes behave differently when FitToBoundingBox(Rectangle) is called. <b>Behavior of FitToBoundingBox(Rectangle) with different shapes</b>
            <table rows="7" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>The shaped is scaled to the size and location of the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The shape is scaled to the size and location of the bounding rectangle. The resulting shape covers the range from 0 to 270 degrees in pixel space. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically and horizontally across the bounding rectangle. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the bounding box. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">
            <summary>
            <para>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling. </para>
            </summary>
            <param name="image">The image to fit to. </param>
            <param name="xScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction. </param>
            <param name="yScale">The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xScale</b> or <b>yScale</b> is &lt;= 0.0 or &gt; 1.0. </exception>
            <remarks>
            <para>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.Vision.IGraphic.SelectedSpaceName">SelectedSpaceName</see>. Different shapes behave differently when <see cref="M:Cognex.Vision.IShape.FitToImage(Cognex.Vision.IImage,System.Double,System.Double)">FitToImage</see> is called. <b>Behavior of FitToImage() with different shapes</b>
            <table rows="8" cols="2">
            <TR>
            <TH>
            <para>Shape </para>
            </TH>
            <TH>
            <para>Behavior </para>
            </TH>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Circle">Circle</see>, <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>, <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>
            </para>
            </TD>
            <TD>
            <para>Scales the shape in the x- and y-directions according to the height and width of the image. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Ellipse">Ellipse</see>
            </para>
            </TD>
            <TD>
            <para>The ellipse is sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The principal axes of the ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>, <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>, <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>, <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>
            </para>
            </TD>
            <TD>
            <para>The arc or annulus section is centered in the image and sized to fit just within the image after <b>xScale</b> and <b>yScale</b> have reduced the image size. The resulting shape covers the range from 0 to 270 degrees in pixel space. The principal axes of the underlying ellipse are aligned with the image, not with the selected space name. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>
            </para>
            </TD>
            <TD>
            <para>The line segment is centered vertically centered and is horizontal across the image. <b>xScale</b> scales to the width of the image. <b>yScale</b> is ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see>
            </para>
            </TD>
            <TD>
            <para>The line's reference point is centered in the bounding rectangle, and its rotation is maintained. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.Polygon">Polygon</see>
            </para>
            </TD>
            <TD>
            <para>The centroid of the polygon is centered in the image. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            <TR>
            <TD>
            <para>
            <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>
            </para>
            </TD>
            <TD>
            <para>The point is centered in the bounding rectangle. <b>xScale</b> and <b>yScale</b> are ignored. </para>
            </TD>
            </TR>
            </table>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.GetOriginCornerXCornerY(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Gets the 3 point parameterization (OriginX, OriginY, CornerX_X, CornerX_Y, CornerY_X and CornerY_Y) of this coordinate axis. </para>
            </summary>
            <param name="originX">The x-coordinate of corner point origin (Po). </param>
            <param name="originY">The y-coordinate of corner point origin (Po). </param>
            <param name="cornerXX">The x-coordinate of corner point x (Px). </param>
            <param name="cornerXY">The y-coordinate of corner point x (Px). </param>
            <param name="cornerYX">The x-coordinate of corner point y (Py). </param>
            <param name="cornerYY">The y-coordinate of corner point y (Py). </param>
            <remarks>
            <para>Gets the three-point parameterization (see <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>) of this coordinate axis. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.GetOriginLengthAspectRotationSkew(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Gets the geometric properties of this coordinate axis. </para>
            </summary>
            <param name="originX">The x-coordinate of the origin point (Po). </param>
            <param name="originY">The y-coordinate of the origin point (Po). </param>
            <param name="xAxisLength">The length of the x-axis. </param>
            <param name="aspect">The aspect ratio of the length of y-axis to x-axis. </param>
            <param name="rotation">The rotation angle in radians. </param>
            <param name="skew">The skew angle in radians. </param>
            <remarks>
            <para>Gets the geometric properties of this coordinate axis. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.GetParentFromChildTransform">
            <summary>
            <para>Gets the parent transform from the child transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.Map(Cognex.Vision.ITransform2D,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Maps this shape through the given transform. </para>
            </summary>
            <param name="transform">The transformation object to use. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The mapped shape. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>transform</b> is NULL. </exception>
            <remarks>
            <para>Maps this shape using the given transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.MapLinear(Cognex.Vision.Transform2DLinear,Cognex.Vision.CopyShapeConstants)">
            <summary>
            <para>Creates a new <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see> by mapping this <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see> through a linear transform. </para>
            </summary>
            <param name="transform">The transform used to map this <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see> object. </param>
            <param name="copyFlags">Specify <see cref="T:Cognex.Vision.CopyShapeConstants">which attributes</see> of the shape to copy to the new shape. </param>
            <returns>
            <para>The new coordinate axes. </para>
            </returns>
            <remarks>
            <para>Creates a new <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see> by mapping this coordinate axes through a linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the 3 point parameterization (OriginX, OriginY, CornerX_X, CornerX_Y, CornerY_X and CornerY_Y) of this coordinate axis. </para>
            </summary>
            <param name="originX">The x-coordinate of corner point origin (Po). </param>
            <param name="originY">The y-coordinate of corner point origin (Po). </param>
            <param name="cornerXX">The x-coordinate of corner point x (Px). </param>
            <param name="cornerXY">The y-coordinate of corner point x (Px). </param>
            <param name="cornerYX">The x-coordinate of corner point y (Py). </param>
            <param name="cornerYY">The y-coordinate of corner point y (Py). </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when one or more property values change. The following state flags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginX">SfOriginX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfOriginY">SfOriginY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfXAxisLength">SfXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfAspect">SfAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfSkew">SfSkew</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayMode">SfDisplayMode</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorX">SfDisplayedScaleFactorX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedScaleFactorY">SfDisplayedScaleFactorY</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedXAxisLength">SfDisplayedXAxisLength</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfDisplayedAspect">SfDisplayedAspect</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.CoordinateAxes.SfTransform">SfTransform</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.GraphicInteractiveBase.SfEnclosingRectangle">SfEnclosingRectangle</see>
            </description>
            </item>
            </list>
            </para>
            <para>Sets the three-point parameterization (see <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see> ) of this coordinate axis. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.SetOriginLengthAspectRotationSkew(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the geometric properties of this coordinate axis. </para>
            </summary>
            <param name="originX">The x-coordinate of the origin point (Po). </param>
            <param name="originY">The y-coordinate of the origin point (Po). </param>
            <param name="xAxisLength">The length of the x-axis. </param>
            <param name="aspect">The aspect ratio of the length of y-axis to x-axis. </param>
            <param name="rotation">The rotation angle in radians. </param>
            <param name="skew">The skew angle in radians. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the one or more property values change.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>xAxisLength</b> is &lt;= 0 or <b>aspect</b> is &lt;= 0.. </exception>
            <remarks>
            <para>Sets the geometric properties of this coordinate axis. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.op_Equality(Cognex.Vision.CoordinateAxes,Cognex.Vision.CoordinateAxes)">
            <summary>Compares the equality of two CoordinateAxes objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CoordinateAxes.op_Inequality(Cognex.Vision.CoordinateAxes,Cognex.Vision.CoordinateAxes)">
            <summary>Compares the inequality of two CoordinateAxes objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.DataBinding">
            <summary>
            <para>This class represents a <see cref="T:Cognex.Vision.DataBinding">DataBinding</see> or "link" from one object's property (or sub-property) to another object's property (or sub-property). </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBinding.#ctor(System.Object,System.String,System.Object,System.String)">
            <summary>
            <para>Constructs a new instance of the <see cref="T:Cognex.Vision.DataBinding">DataBinding</see> class. </para>
            </summary>
            <param name="source">The source object. </param>
            <param name="sourcePath">The property name or dotted path to the source property. </param>
            <param name="destination">The destination object. </param>
            <param name="destinationPath">The property name or dotted path to the destination property. </param>
            <exception cref="T:Cognex.Vision.ArgumentNullException">source or destination are null </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">sourcePath or destinationPath are empty </exception>
        </member>
        <member name="M:Cognex.Vision.DataBinding.#ctor(System.Object,System.String,System.Object,System.String,System.Boolean)">
            <summary>
            <para>Constructs a new instance of the <see cref="T:Cognex.Vision.DataBinding">DataBinding</see> class. </para>
            </summary>
            <param name="source">The source object. </param>
            <param name="sourcePath">The property name or dotted path to the source property. </param>
            <param name="destination">The destination object. </param>
            <param name="destinationPath">The property name or dotted path to the destination property. </param>
            <param name="syncOnInitialize">Determines if the source and destination are immediately synchronized when a new <see cref="T:Cognex.Vision.DataBinding">DataBinding</see> is created. If true creating a new <see cref="T:Cognex.Vision.DataBinding">DataBinding</see> will cause the destination value to be immediately updated/synchronized with the source value. If false, the destination value will not be updated until the source value changes. </param>
            <exception cref="T:Cognex.Vision.ArgumentNullException">source or destination are null </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">sourcePath or destinationPath are empty </exception>
        </member>
        <member name="E:Cognex.Vision.DataBinding.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DataBinding.Destination">
            <summary>
            <para>Gets the destination subject/object. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DataBinding.DestinationPath">
            <summary>
            <para>Gets the destination property name or dotted property path. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DataBinding.DestinationProperty">
            <summary>
            <para>Gets a PropertyMeta for the destination property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DataBinding.OptimizeIneffectiveChanges">
            <summary>
            <b>Get</b>
            <para>Determines if this <see cref="T:Cognex.Vision.DataBinding">DataBinding</see> will optimize out any attempts to set the destination property to its current value. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.DataBinding.OptimizeIneffectiveChanges">OptimizeIneffectiveChanges</see>. </para>
            </summary>
            <remarks>
            <para>Raises <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> when OptimizeIneffectiveChanges is changed. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.DataBinding.SfOptimizeIneffectiveChanges">SfOptimizeIneffectiveChanges</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.DataBinding.Source">
            <summary>
            <para>Gets the source subject/object. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DataBinding.SourcePath">
            <summary>
            <para>Gets the source property name or dotted property path. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DataBinding.SourceProperty">
            <summary>
            <para>Gets a PropertyMeta for the source property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DataBinding.UpdateException">
            <summary>
            <para>Gets the exception, if any, that was thrown when the binding attempted to update its property value from its Source. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DataBinding.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBinding.BindTo(System.Object,System.String)">
            <summary>
            <para>Redirects the binding to a new source and path. </para>
            </summary>
            <param name="source">The source object. </param>
            <param name="sourcePath">The property name or dotted path to the source property. </param>
            <remarks>
            <para>Raises <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.DataBinding.SfSource">SfSource</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.DataBinding.SfSourcePath">SfSourcePath</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.DataBinding.SfSourceProperty">SfSourceProperty</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.DataBinding.SfUpdateException">SfUpdateException</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DataBinding.GetSourceValue">
            <summary>
            <para>Reads the current value of the source property. May throw an exception if the source property is not currently valid. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBinding.RefreshBinding">
            <summary>
            <para>Refreshes the destination property from the source. </para>
            </summary>
            <remarks>
            <para>Raises <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.DataBinding.SfUpdateException">SfUpdateException</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DataBinding.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBinding.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBinding.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBinding.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBinding.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.DataBinding.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.DataBinding.op_Equality(Cognex.Vision.DataBinding,Cognex.Vision.DataBinding)">
            <summary>Compares the equality of two DataBinding objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.DataBinding.op_Inequality(Cognex.Vision.DataBinding,Cognex.Vision.DataBinding)">
            <summary>Compares the inequality of two DataBinding objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.PelRect">
            <summary>
            <para>Class that represents a simple coordinate axes aligned rectangle used to represent a rectangular window region in an integer coordinate system. </para>
            </summary>
            <para>A <see cref="T:Cognex.Vision.PelRect">PelRect</see> is typically used to specify the rectangle which completely surrounds a block of pixels. The integer coordinates represent the outermost corners of the outermost image pixels. </para>
        </member>
        <member name="M:Cognex.Vision.PelRect.#ctor">
            <summary>
            <para>Construct a default instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.PelRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Construct an instance of this class with the specified parameters. </para>
            </summary>
            <param name="x">The desired X origin. </param>
            <param name="y">The desired Y origin. </param>
            <param name="width">The desired width. </param>
            <param name="height">The desired height. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If you attempt to set Width to a negative value. </exception>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If you attempt to set Height to a negative value. </exception>
        </member>
        <member name="E:Cognex.Vision.PelRect.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PelRect.X">
            <summary>
            <b>Get</b>
            <para>Get the X origin. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Set the <see cref="P:Cognex.Vision.PelRect.X">X</see> origin. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.PelRect.Y">
            <summary>
            <b>Get</b>
            <para>Get the Y origin. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Set the <see cref="P:Cognex.Vision.PelRect.Y">Y</see> origin. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.PelRect.Width">
            <summary>
            <b>Get</b>
            <para>Get the width of this <see cref="T:Cognex.Vision.PelRect">PelRect</see>. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Set the <see cref="P:Cognex.Vision.PelRect.Width">Width</see> of this <see cref="T:Cognex.Vision.PelRect">PelRect</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If you attempt to set Width to a negative value. </exception>
        </member>
        <member name="P:Cognex.Vision.PelRect.Height">
            <summary>
            <b>Get</b>
            <para>Get the height of this <see cref="T:Cognex.Vision.PelRect">PelRect</see>. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Set the <see cref="P:Cognex.Vision.PelRect.Height">Height</see> of this <see cref="T:Cognex.Vision.PelRect">PelRect</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If you attempt to set Height to a negative value. </exception>
        </member>
        <member name="P:Cognex.Vision.PelRect.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PelRect.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PelRect.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PelRect.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PelRect.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PelRect.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.PelRect.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.PelRect.op_Equality(Cognex.Vision.PelRect,Cognex.Vision.PelRect)">
            <summary>Compares the equality of two PelRect objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.PelRect.op_Inequality(Cognex.Vision.PelRect,Cognex.Vision.PelRect)">
            <summary>Compares the inequality of two PelRect objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Transform2DRigid">
            <summary>
            <para>Rigid 2D coordinate transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            <para>Constructs a <see cref="T:Cognex.Vision.Transform2DRigid">Transform2DRigid</see> using the supplied components. </para>
            </summary>
            <param name="rotation">The rotation angle ( in radians). </param>
            <param name="translationX">The translation in X axis. </param>
            <param name="translationY">The translation in Y axis. </param>
        </member>
        <member name="E:Cognex.Vision.Transform2DRigid.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Transform2DRigid.Linear">
            <summary>
            <para>Returns true if this is a linear transform. </para>
            </summary>
            <remarks>
            <para>This function always returns True if the transform is of type <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>; it may return True for other types if they implement a transformation that is mathematically equivalent to a linear transformation. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Transform2DRigid.Rotation">
            <summary>
            <b>Get</b>
            <para>Gets the rotation of this transform (in radians). </para>
            </summary>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Transform2DRigid.Rotation">Rotation</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DRigid.SfRotation">SfRotation</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Transform2DRigid.TranslationX">
            <summary>
            <b>Get</b>
            <para>Gets the x component of the translation vector. </para>
            </summary>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Transform2DRigid.TranslationX">TranslationX</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DRigid.SfTranslationX">SfTranslationX</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Transform2DRigid.TranslationY">
            <summary>
            <b>Get</b>
            <para>Gets the y component of the translation vector. </para>
            </summary>
            <value>
            <b>Default Value: </b> 0 </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Transform2DRigid.TranslationY">TranslationY</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DRigid.SfTranslationY">SfTranslationY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Transform2DRigid.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.BestFitLinearTransform(Cognex.Vision.Vect2Collection,System.Double@)">
            <summary>
            <para>Returns a new linear transform which best describes this transform over the given set of points. The points must be expressed in 'from' coordinates. </para>
            </summary>
            <param name="fromPoints">A collection of points, expressed in From coordinates, for which to apply. </param>
            <param name="rmsError">Sets it to the RMS error of the points against the returned linear transformation. A value of 0 indicates that the returned transformation exactly maps the points. Note that the RMS error is measured in <b>To</b> space. <b>
            </b>. is the Root Mean Square (RMS) unweighted Euclidian error between two sets of corresponding points. Set A is composed of the given points (in <b>From</b> space) after they have been mapped through this transform into <b>To</b> space. Set B is the same points after they have been mapped to <b>To</b> space using the <b>linear</b> transform returned by this function. </param>
            <exception cref="T:Cognex.Vision.TransformException">Too few points were provided to compute a best fit linear transform. </exception>
            <remarks>
            <para>Returns a new linear transform that best describes this transform over the given set of points. These points must be expressed in <b>From</b> coordinates. The returned transform is called the "best-fit linear transform" because it is guaranteed to produce the smallest RMSError of any linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.Compose(Cognex.Vision.Transform2DRigid)">
            <summary>
            <para>Returns a new rigid transform which is the composition of the given transform (on the right side) and this one (on the left side). </para>
            </summary>
            <param name="rightSide">The transformation to compose with this one. </param>
            <remarks>
            <para>The order in which you compose transformations is important.If you have a transform that maps AFromB and another that maps BFromC,you compose the two to get a single transform that maps AFromC as follows: AFromB.Compose(BFromC). Compose(CogTransform2DLinear) performs the same operation as the ComposeBase(ICogTransform2D) method of ICogTransform2D. The only difference is the type of the returned object:CogTransform2DRigid.Compose(CogTransform2DRigid) method returns a rigid transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.ComposeBase(Cognex.Vision.ITransform2D)">
            <summary>
            <para>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side). </para>
            </summary>
            <param name="rightSide">The transform object to compose with this one. </param>
            <remarks>
            <para>Returns a new transform that is the composition of this transform and the specified transform. This function performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.Compose(Cognex.Vision.Transform2DLinear)">Compose</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. However, this method returns the transform of most suitable type based on the types of the transform objects being composed. For example, if you compose two linear transforms, the resulting transform is linear. The order in which you compose transformations is important. If you have a transform that maps AFromB and another that maps BFromC, you compose the two to get a single transform that maps AFromC as follows: AFromB.ComposeBase(BFromC). You do <b>not</b> use: BFromC.ComposeBase(AFromB). </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.Copy">
            <summary>
            <para>Returns a new copy of this transform. </para>
            </summary>
            <remarks>
            <para>
            <see cref="M:Cognex.Vision.Transform2DRigid.Copy">Copy()</see> performs the same operation as the <see cref="M:Cognex.Vision.Transform2DRigid.CopyBase">CopyBase()</see> method of ICogTransform2D.The only difference is the type of the returned copy: CogTransform2DRigid.Copy() method returns a rigid transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.CopyBase">
            <summary>
            <para>Returns a new copy of this transform. </para>
            </summary>
            <remarks>
            <para>Returns a copy of this transformation object. This function performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.Copy">Copy</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. The only difference is the type of the returned transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.GetLinearTransform">
            <summary>
            <para>Returns a new linear transform which describes this rigid transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.GetRotationTranslation(System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Extract the named parameters from this transform. Rotation is in radians. </para>
            </summary>
            <param name="rotation">The rotation in radians. </param>
            <param name="translationX">The translation along the x-axis. </param>
            <param name="translationY">The translation along the y-axis. </param>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.Identity(System.Double)">
            <summary>
            <para>Returns true if this transform is an identity mapping within the given tolerance. The tolerance is applied to the rotation and both translation components. </para>
            </summary>
            <param name="tolerance">n/a </param>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.Invert">
            <summary>
            <para>Returns a new rigid transform which is the inverse of this one. </para>
            </summary>
            <remarks>
            <para>If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A. <see cref="M:Cognex.Vision.Transform2DRigid.Invert">Invert()</see> performs the same operation as the <see cref="M:Cognex.Vision.Transform2DRigid.InvertBase">InvertBase()</see> method of ICogTransform2D. The only difference is the type of the returned transform: CogTransform2DRigid.Invert() method returns a rigid transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.InvertBase">
            <summary>
            <para>Returns a new transform which is the inverse of this one. </para>
            </summary>
            <remarks>
            <para>Returns a transform that is the inverse of this transform. If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A. <see cref="M:Cognex.Vision.ITransform2D.InvertBase">InvertBase</see> performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.Invert">Invert</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. The only difference is the type of the returned transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.LinearTransform(System.Double,System.Double)">
            <summary>
            <para>Returns a new linear transform which best describes this transform at the given point. The point must be expressed in 'from' coordinates. </para>
            </summary>
            <param name="x">The x-coordinate for the point, expressed in <b>Fromcoordinates</b>. </param>
            <param name="y">The y-coordinate for the point, expressed in <b>From</b> coordinates. </param>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.MapAngle(System.Double)">
            <summary>
            <para>Maps the given angle (in radians) through this transform and returns the result (in radians). </para>
            </summary>
            <param name="angle">The angle to map. </param>
            <remarks>
            <para>The operation of MapAngle(Double) is equivalent to creating a unit vector at the given angle, mapping the vector, and then computing the rotation angle of the mapped vector. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.MapPoint(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            <para>Maps the given x,y point through this transform, filling in the mapped x,y coordinates. </para>
            </summary>
            <param name="x">The x-coordinate of the original point in <b>From</b> space. </param>
            <param name="y">The y-coordinate of the original point in <b>From</b> space. </param>
            <param name="mappedX">The resulting mapped x-coordinate in <b>To</b> space. </param>
            <param name="mappedY">The resulting mapped y-coordinate in <b>To</b> space. </param>
            <remarks>
            <para>Maps the given <b>from</b> space point through this transform, filling in the mapped <b>to</b> space (x, y) coordinates. This method performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)">MapPoint</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. This method is provided on both interfaces as a convenience to users. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.MapPoints(Cognex.Vision.Vect2Collection)">
            <summary>
            <para>Map the supplied points through this transform. </para>
            </summary>
            <param name="coordinatesXY">A row-major two dimensional array of X,Y point coordinates to be mapped. These elements must be of type double. </param>
            <remarks>
            <para>A row-major two dimensional array of the mapped X,Y point coordinates. The size of this array is equal to the size of the input array </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">If coordinatesXY is not an array of doubles. </exception>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.MapVector(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            <para>Maps the given x,y vector through this transform, filling in the mapped x,y vector components. </para>
            </summary>
            <param name="x">The x-coordinate of the original point in From space. </param>
            <param name="y">The y-coordinate of the original point in From space. </param>
            <param name="mappedX">The resulting mapped x-coordinate in To space. </param>
            <param name="mappedY">The resulting mapped y-coordinate in To space. </param>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.SetRotationTranslation(System.Double,System.Double,System.Double)">
            <summary>
            <para>Set this transform from the given parameters. Rotation is in radians. </para>
            </summary>
            <param name="rotation">The rotation in radians. </param>
            <param name="translationX">The translation along the x-axis. </param>
            <param name="translationY">The translation along the y-axis. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the transformation changes.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DRigid.SfRotation">SfRotation</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DRigid.SfTranslationX">SfTranslationX</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DRigid.SfTranslationY">SfTranslationY</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.op_Equality(Cognex.Vision.Transform2DRigid,Cognex.Vision.Transform2DRigid)">
            <summary>Compares the equality of two Transform2DRigid objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigid.op_Inequality(Cognex.Vision.Transform2DRigid,Cognex.Vision.Transform2DRigid)">
            <summary>Compares the inequality of two Transform2DRigid objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.GraphicParentChildCollection">
            <summary>
            <para>Collection of <see cref="T:Cognex.Vision.IGraphicParentChild">parent-child graphics</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of this collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.GraphicParentChildCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicParentChildCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicParentChildCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicParentChildCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicParentChildCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicParentChildCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicParentChildCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicParentChildCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicParentChildCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicParentChildCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicParentChildCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicParentChildCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicParentChildCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicParentChildCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicParentChildCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.Add(Cognex.Vision.IGraphicParentChild)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicParentChildCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.GraphicParentChildCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicParentChildCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.GraphicParentChildCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.Contains(Cognex.Vision.IGraphicParentChild)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.IndexOf(Cognex.Vision.IGraphicParentChild)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.Insert(System.Int32,Cognex.Vision.IGraphicParentChild)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicParentChildCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.GraphicParentChildCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.setItem(System.Int32,Cognex.Vision.IGraphicParentChild)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicParentChildCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.GraphicParentChildCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicParentChildCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.GraphicParentChildCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.Remove(Cognex.Vision.IGraphicParentChild)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicParentChildCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.GraphicParentChildCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicParentChildCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.GraphicParentChildCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.op_Equality(Cognex.Vision.GraphicParentChildCollection,Cognex.Vision.GraphicParentChildCollection)">
            <summary>Compares the equality of two GraphicParentChildCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.op_Inequality(Cognex.Vision.GraphicParentChildCollection,Cognex.Vision.GraphicParentChildCollection)">
            <summary>Compares the inequality of two GraphicParentChildCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.CopyTo(Cognex.Vision.IGraphicParentChild[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.IGraphicParentChild})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.BoolCollection">
            <summary>
            <para>Class which holds a collection of bool. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.BoolCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.BoolCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.BoolCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.BoolCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.BoolCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.BoolCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.BoolCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.BoolCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.BoolCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.BoolCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.BoolCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.BoolCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.BoolCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.BoolCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.BoolCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.Add(System.Boolean)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.BoolCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.BoolCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.BoolCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.BoolCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.Contains(System.Boolean)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.IndexOf(System.Boolean)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.Insert(System.Int32,System.Boolean)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.BoolCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.BoolCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.setItem(System.Int32,System.Boolean)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.BoolCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.BoolCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.BoolCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.BoolCollection.MovedItem">MovedItem</see> Raises after the item is moved. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.Remove(System.Boolean)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.BoolCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.BoolCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.BoolCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.BoolCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.op_Equality(Cognex.Vision.BoolCollection,Cognex.Vision.BoolCollection)">
            <summary>Compares the equality of two BoolCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.op_Inequality(Cognex.Vision.BoolCollection,Cognex.Vision.BoolCollection)">
            <summary>Compares the inequality of two BoolCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.CopyTo(System.Boolean[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.BoolCollection.AddRange(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.CancelToken">
            <summary>
            <para>An instance of this class is passed to an operation that can be cancelled. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CancelToken.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.CancelToken.Cancel">
            <summary>
            <para>The Cancel method is called to cancel a lengthy operation such as Train or Tune. The Cancel method will raise the CancelEvent. The API is responsible to listen to the CancelEvent and cancel the operation. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CancelToken.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CancelToken.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CancelToken.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.CancelToken.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CancelToken.op_Equality(Cognex.Vision.CancelToken,Cognex.Vision.CancelToken)">
            <summary>Compares the equality of two CancelToken objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CancelToken.op_Inequality(Cognex.Vision.CancelToken,Cognex.Vision.CancelToken)">
            <summary>Compares the inequality of two CancelToken objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.CoordinateSpaceAngle">
            <summary>
            <para>Type that holds an angle measurement and the name of the coordinate space in which it is measured. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceAngle.#ctor">
            <summary>
            <para>Creates an instance with defaults: Angle = 0, SelectedSpaceName = '.', Epsilon = 0, NormalizationMode = Signed. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceAngle.#ctor(System.Double)">
            <summary>
            <para>Creates an instance with defaults: SelectedSpaceName = '.', Epsilon = 0, NormalizationMode = Signed. </para>
            </summary>
            <param name="angle">The default Angle property value. </param>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceAngle.#ctor(System.Double,System.String)">
            <summary>
            <para>Creates an instance with defaults: Epsilon = 0, NormalizationMode = Signed. </para>
            </summary>
            <param name="angle">The default angle value. </param>
            <param name="selectedSpaceName">The name of the space in which the angle value is measured. </param>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceAngle.#ctor(System.Double,System.String,System.Double)">
            <summary>
            <para>Creates an instance with defaults: NormalizationMode = Signed. </para>
            </summary>
            <param name="angle">The default angle value. </param>
            <param name="selectedSpaceName">The name of the space in which the angle value is measured. </param>
            <param name="epsilon">The difference threshold for raising Changed notifications for Angle. Used to mitigate floating point error when using a normalizing mode. </param>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceAngle.#ctor(System.Double,System.String,System.Double,Cognex.Vision.CoordinateSpaceAngleNormalizationModeConstants)">
            <summary>
            <para>Creates an instance. </para>
            </summary>
            <param name="angle">The default angle value. </param>
            <param name="selectedSpaceName">The name of the space in which the angle value is measured. </param>
            <param name="epsilon">The difference threshold for raising Changed notifications for Angle. Used to mitigate floating point error when using a normalizing mode. </param>
            <param name="normalizationMode">Determines if angle roll over is zero, 180, or ±infinity </param>
        </member>
        <member name="E:Cognex.Vision.CoordinateSpaceAngle.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateSpaceAngle.Angle">
            <summary>
            <b>Get</b>
            <para>The angle measurement. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateSpaceAngle.Angle">Angle</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateSpaceAngle.NormalizationMode">
            <summary>
            <b>Get</b>
            <para>Determines if the angle rolls over at zero, 180, or ±infinity. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateSpaceAngle.NormalizationMode">NormalizationMode</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateSpaceAngle.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>The name of the space in which the angle is measured. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.CoordinateSpaceAngle.SelectedSpaceName">SelectedSpaceName</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CoordinateSpaceAngle.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceAngle.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceAngle.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceAngle.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceAngle.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceAngle.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceAngle.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceAngle.op_Equality(Cognex.Vision.CoordinateSpaceAngle,Cognex.Vision.CoordinateSpaceAngle)">
            <summary>Compares the equality of two CoordinateSpaceAngle objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CoordinateSpaceAngle.op_Inequality(Cognex.Vision.CoordinateSpaceAngle,Cognex.Vision.CoordinateSpaceAngle)">
            <summary>Compares the inequality of two CoordinateSpaceAngle objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.DataBindingCollection">
            <summary>
            <para>Class which holds a collection of <see cref="T:Cognex.Vision.DataBinding">DataBinding</see> objects. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.DataBindingCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DataBindingCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DataBindingCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DataBindingCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DataBindingCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DataBindingCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DataBindingCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DataBindingCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DataBindingCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DataBindingCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DataBindingCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DataBindingCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DataBindingCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DataBindingCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DataBindingCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.Add(Cognex.Vision.DataBinding)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.DataBindingCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.DataBindingCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.DataBindingCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.DataBindingCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.Contains(Cognex.Vision.DataBinding)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.IndexOf(Cognex.Vision.DataBinding)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.Insert(System.Int32,Cognex.Vision.DataBinding)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.DataBindingCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.DataBindingCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.setItem(System.Int32,Cognex.Vision.DataBinding)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.DataBindingCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.DataBindingCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.DataBindingCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.DataBindingCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.Remove(Cognex.Vision.DataBinding)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.DataBindingCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.DataBindingCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.DataBindingCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.DataBindingCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.op_Equality(Cognex.Vision.DataBindingCollection,Cognex.Vision.DataBindingCollection)">
            <summary>Compares the equality of two DataBindingCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.op_Inequality(Cognex.Vision.DataBindingCollection,Cognex.Vision.DataBindingCollection)">
            <summary>Compares the inequality of two DataBindingCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.CopyTo(Cognex.Vision.DataBinding[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.DataBindingCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.DataBinding})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.DoubleCollection">
            <summary>
            <para>Class which holds a collection of doubles. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.DoubleCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DoubleCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DoubleCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DoubleCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DoubleCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DoubleCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DoubleCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DoubleCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DoubleCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DoubleCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.DoubleCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DoubleCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DoubleCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DoubleCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.DoubleCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.Add(System.Double)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.DoubleCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.DoubleCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.DoubleCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.DoubleCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.Contains(System.Double)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.IndexOf(System.Double)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.Insert(System.Int32,System.Double)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.DoubleCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.DoubleCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.setItem(System.Int32,System.Double)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.DoubleCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.DoubleCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.DoubleCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.DoubleCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.Remove(System.Double)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.DoubleCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.DoubleCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.DoubleCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.DoubleCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.op_Equality(Cognex.Vision.DoubleCollection,Cognex.Vision.DoubleCollection)">
            <summary>Compares the equality of two DoubleCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.op_Inequality(Cognex.Vision.DoubleCollection,Cognex.Vision.DoubleCollection)">
            <summary>Compares the inequality of two DoubleCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.DoubleCollection.AddRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.DoubleReadOnlyCollection">
            <summary>
            <para>Class which holds a read-only collection of doubles. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DoubleReadOnlyCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="P:Cognex.Vision.DoubleReadOnlyCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.DoubleReadOnlyCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.DoubleReadOnlyCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.DoubleReadOnlyCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.DoubleReadOnlyCollection.op_Equality(Cognex.Vision.DoubleReadOnlyCollection,Cognex.Vision.DoubleReadOnlyCollection)">
            <summary>Compares the equality of two DoubleReadOnlyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.DoubleReadOnlyCollection.op_Inequality(Cognex.Vision.DoubleReadOnlyCollection,Cognex.Vision.DoubleReadOnlyCollection)">
            <summary>Compares the inequality of two DoubleReadOnlyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.DoubleReadOnlyCollection.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.DoubleReadOnlyCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.FontFamily">
            <summary>
            <para>Represents a group of fonts that have a similar font face, but may have different sizes and styles. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.FontFamily.#ctor">
            <summary>
            <para>Initializes a new font family instance. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.FontFamily.GetFamilyNames">
            <summary>
            <para>Returns a collection of the font names in the font family. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.FontFamily.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.FontFamily.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.FontFamily.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.FontFamily.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.FontFamily.op_Equality(Cognex.Vision.FontFamily,Cognex.Vision.FontFamily)">
            <summary>Compares the equality of two FontFamily objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.FontFamily.op_Inequality(Cognex.Vision.FontFamily,Cognex.Vision.FontFamily)">
            <summary>Compares the inequality of two FontFamily objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.GraphicCollection">
            <summary>
            <para>Collection of graphics. </para>
            </summary>
            <remarks>
            <para>Class representing a collection of graphics. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of this collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.GraphicCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.Add(Cognex.Vision.IGraphic)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.GraphicCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.GraphicCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.Contains(Cognex.Vision.IGraphic)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.IndexOf(Cognex.Vision.IGraphic)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.Insert(System.Int32,Cognex.Vision.IGraphic)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.GraphicCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.setItem(System.Int32,Cognex.Vision.IGraphic)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.GraphicCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.GraphicCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.Remove(Cognex.Vision.IGraphic)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.GraphicCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.GraphicCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.op_Equality(Cognex.Vision.GraphicCollection,Cognex.Vision.GraphicCollection)">
            <summary>Compares the equality of two GraphicCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.op_Inequality(Cognex.Vision.GraphicCollection,Cognex.Vision.GraphicCollection)">
            <summary>Compares the inequality of two GraphicCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.CopyTo(Cognex.Vision.IGraphic[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.IGraphic})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.GraphicInteractiveCollection">
            <summary>
            <para>Collection of interactive graphics. </para>
            </summary>
            <remarks>
            <para>Class representing a collection of interactive graphics. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of this collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.GraphicInteractiveCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicInteractiveCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicInteractiveCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicInteractiveCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicInteractiveCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicInteractiveCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicInteractiveCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicInteractiveCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicInteractiveCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicInteractiveCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.GraphicInteractiveCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GraphicInteractiveCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.Add(Cognex.Vision.IGraphicInteractive)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicInteractiveCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.GraphicInteractiveCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicInteractiveCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.GraphicInteractiveCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.Contains(Cognex.Vision.IGraphicInteractive)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.IndexOf(Cognex.Vision.IGraphicInteractive)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.Insert(System.Int32,Cognex.Vision.IGraphicInteractive)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicInteractiveCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.GraphicInteractiveCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.setItem(System.Int32,Cognex.Vision.IGraphicInteractive)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicInteractiveCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.GraphicInteractiveCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicInteractiveCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.GraphicInteractiveCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.Remove(Cognex.Vision.IGraphicInteractive)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicInteractiveCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.GraphicInteractiveCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.GraphicInteractiveCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.GraphicInteractiveCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.op_Equality(Cognex.Vision.GraphicInteractiveCollection,Cognex.Vision.GraphicInteractiveCollection)">
            <summary>Compares the equality of two GraphicInteractiveCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.op_Inequality(Cognex.Vision.GraphicInteractiveCollection,Cognex.Vision.GraphicInteractiveCollection)">
            <summary>Compares the inequality of two GraphicInteractiveCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.CopyTo(Cognex.Vision.IGraphicInteractive[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicInteractiveCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.IGraphicInteractive})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.GraphicParentChildReadOnlyCollection">
            <summary>
            <para>Read-only collection of <see cref="T:Cognex.Vision.IGraphicParentChild">parent-child graphics</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildReadOnlyCollection.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="P:Cognex.Vision.GraphicParentChildReadOnlyCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildReadOnlyCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildReadOnlyCollection.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildReadOnlyCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildReadOnlyCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildReadOnlyCollection.op_Equality(Cognex.Vision.GraphicParentChildReadOnlyCollection,Cognex.Vision.GraphicParentChildReadOnlyCollection)">
            <summary>Compares the equality of two GraphicParentChildReadOnlyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildReadOnlyCollection.op_Inequality(Cognex.Vision.GraphicParentChildReadOnlyCollection,Cognex.Vision.GraphicParentChildReadOnlyCollection)">
            <summary>Compares the inequality of two GraphicParentChildReadOnlyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildReadOnlyCollection.CopyTo(Cognex.Vision.IGraphicParentChild[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.GraphicParentChildReadOnlyCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.IImage16GreyData">
            <summary>
            <para>Interface that allows direct access to 16-bit grey scale pixel data. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IImage16GreyData.Get16GreyPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Gets an object that can be used to directly access pixel memory. </para>
            </summary>
            <param name="dataMode">Specifies whether the pixel data are read, write, or read/write. </param>
            <param name="x">The x-coordinate of the portion of the image to get. </param>
            <param name="y">The y-coordinate of the portion of the image to get. </param>
            <param name="width">The width of the portion of the image to get. A value of 0 specifies the entire width of the image (<b>x</b> must also be 0). </param>
            <param name="height">The height of the portion of the image to get. A value of 0 specifies the entire height of the image (<b>y</b> must also be 0). </param>
            <returns>
            <para>An <see cref="T:Cognex.Vision.IImage16PixelMemory">object</see> that represents the pixel data. </para>
            </returns>
        </member>
        <member name="T:Cognex.Vision.IImage16Root">
            <summary>
            <para>Interface to a root object that holds raw 16-bit pixel data of an image. </para>
            </summary>
            <para>
            <b>Note</b>
            <para>
            <para>This interface is intended for Cognex use only. </para>
            </para>
            </para>
        </member>
        <member name="P:Cognex.Vision.IImage16Root.Height">
            <summary>
            <para>Returns the height of the pixel data. </para>
            </summary>
            <returns>
            <para>The height of the pixel data. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.IImage16Root.Width">
            <summary>
            <para>Returns the width of the pixel data. </para>
            </summary>
            <remarks>
            <para>The width of the pixel data. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IImage16Root.GetRawPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.Vision.IImage16PixelMemory@)">
            <summary>
            <para>Gets an object that can be used to directly access the raw pixel data. The caller MUST call Dispose on this object when finished with it. </para>
            </summary>
            <param name="dataMode">Specifies whether the pixel data are <see cref="T:Cognex.Vision.ImageDataModeConstants">read, write, or read/write</see>. </param>
            <param name="x">The x-coordinate of the portion of the image to get. </param>
            <param name="y">The y-coordinate of the portion of the image to get. </param>
            <param name="width">The width of the image to get. </param>
            <param name="height">The height of the image to get. </param>
            <param name="pixelMemory">(output param) An object that represents the pixel data.</param>
            <remarks>
            <para> This method is intended for Cognex use only. To access the pixel data directly, use <see cref="T:Cognex.Vision.Image16Grey">Image16Grey's</see>
            <see cref="M:Cognex.Vision.Image16Grey.Get16GreyPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)">Get16GreyPixelMemory</see> instead. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IImage16Root.Copy">
            <summary>
            <para>Make a deep copy of the image root, the pixel memory is copied. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.IImage16RootBuffer">
            <summary>
            <para>Interface to a root object that holds raw 16-bit pixel data of an image in a static buffer. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IImage16RootBuffer.Initialize(System.Int32,System.Int32,System.IntPtr,System.Int32,Cognex.Rbbt.IObject)">
            <summary>
            <para>Initializes this <see cref="T:Cognex.Vision.IImage16RootBuffer">IImage16RootBuffer</see>. If <b>scan0</b> and <b>disposable</b> are provided, it is initialized with the provided data. Otherwise, it is initialized with undefined data. </para>
            </summary>
            <param name="width">The width of the data (in pixels) </param>
            <param name="height">The height of the data (in pixels) </param>
            <param name="scan0">A pointer to raw pixel data (optional) </param>
            <param name="stride">The number of pixels between rows. Can be positive or negative. </param>
            <param name="disposable">A pointer to an object that owns scan0 (optional) </param>
        </member>
        <member name="T:Cognex.Vision.IImage24PlanarColorData">
            <summary>
            <para>Interface that allows direct access to all three planes of 8-bit image data. </para>
            </summary>
            <remarks>
            <para>Interface that allows direct access to all three planes of 8-bit image data. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IImage24PlanarColorData.Get24PlanarColorPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.Vision.IImage8PixelMemory@,Cognex.Vision.IImage8PixelMemory@,Cognex.Vision.IImage8PixelMemory@)">
            <summary>
            <para>Get objects that can be used to directly access each plane of pixel memory. The caller MUST call Dispose on each of these objects when finished with them. </para>
            </summary>
            <param name="dataMode">Specifies whether the pixel data are read, write, or read/write. </param>
            <param name="x">The x-coordinate of the portion of the image to get. </param>
            <param name="y">The y-coordinate of the portion of the image to get. </param>
            <param name="width">The width of the image to get. </param>
            <param name="height">The height of the image to get. </param>
            <param name="pixelMemory0">An object that represents the pixel data for the first plane. </param>
            <param name="pixelMemory1">An object that represents the pixel data for the second plane. </param>
            <param name="pixelMemory2">An object that represents the pixel data for the third plane. </param>
            <exception cref="T:Cognex.Vision.ImageException">
            <b>x</b> , <b>y</b> , <b>height</b> , and <b>width</b> describe a region that is not entirely within the image. </exception>
            <remarks>
            <para>Gets an Image8PixelMemory object for each plane of this image. The returned objects can be used to access pixel memory directly. You <b>must</b> call each object's method when you are finished with it. The <b>x</b> , <b>y</b> , <b>height</b> , and <b>width</b> parameters let you specify the portion of the image to get. To access the pixel memory for the entire image, specify zero for these parameters. If you request Cognex.Vision.ImageDataModeConstants read/write or <see cref="T:Cognex.Vision.ImageDataModeConstants">write-only</see> access to the pixel memory when you call <see cref="M:Cognex.Vision.Image24PlanarColor.Get24PlanarColorPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.Vision.IImage8PixelMemory@,Cognex.Vision.IImage8PixelMemory@,Cognex.Vision.IImage8PixelMemory@)">Get24PlanarColorPixelMemory</see>, the pixel memory may be copied internally. Any changes that you make to the pixel may not be written back to the image until you call. Your application should assume that no changes to the image take place until then. </para>
            </remarks>
        </member>
        <member name="T:Cognex.Vision.IImage8RootBuffer">
            <summary>
            <para>Interface to a root object that holds raw 8-bit pixel data of an image in a static buffer. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IImage8RootBuffer.Initialize(System.Int32,System.Int32,System.IntPtr,System.Int32,Cognex.Rbbt.IObject)">
            <summary>
            <para>Initializes this <see cref="T:Cognex.Vision.IImage8RootBuffer">IImage8RootBuffer</see>. If <b>scan0</b> and <b>disposable</b> are provided, it is initialized with the provided data. Otherwise, it is initialized with undefined data. </para>
            </summary>
            <param name="width">The width of the data (in pixels) </param>
            <param name="height">The height of the data (in pixels) </param>
            <param name="scan0">A pointer to raw pixel data (optional) </param>
            <param name="stride">The stride of the image (in bytes) </param>
            <param name="disposable">A pointer to an object that owns scan0 (optional) </param>
        </member>
        <member name="T:Cognex.Vision.IImageCollection">
            <summary>
            <para>This class holds a collection of <see cref="T:Cognex.Vision.IImage">IImage</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.IImageCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IImageCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IImageCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IImageCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IImageCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IImageCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IImageCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IImageCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IImageCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IImageCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IImageCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IImageCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IImageCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IImageCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IImageCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.Add(Cognex.Vision.IImage)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IImageCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.IImageCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IImageCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.IImageCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.Contains(Cognex.Vision.IImage)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.IndexOf(Cognex.Vision.IImage)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.Insert(System.Int32,Cognex.Vision.IImage)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IImageCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.IImageCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.setItem(System.Int32,Cognex.Vision.IImage)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IImageCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.IImageCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IImageCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.IImageCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.Remove(Cognex.Vision.IImage)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IImageCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.IImageCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IImageCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.IImageCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.op_Equality(Cognex.Vision.IImageCollection,Cognex.Vision.IImageCollection)">
            <summary>Compares the equality of two IImageCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.op_Inequality(Cognex.Vision.IImageCollection,Cognex.Vision.IImageCollection)">
            <summary>Compares the inequality of two IImageCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.CopyTo(Cognex.Vision.IImage[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.IImageCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.IImage})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.Image16Grey">
            <summary>
            <para>An object that describes a rectangular array of 16 bit grey scale pixels. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.#ctor">
            <summary>
            <para>Constructs a new, <see cref="M:Cognex.Vision.Image16Grey.Allocate(System.Int32,System.Int32)">unallocated</see> instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Constructs a <see cref="T:Cognex.Vision.Image16Grey">Image16Grey</see>, allocating image memory with the given width and height. </para>
            </summary>
            <param name="width">The desired width of the new image. </param>
            <param name="height">The desired height of the new image. </param>
        </member>
        <member name="E:Cognex.Vision.Image16Grey.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Image16Grey.Allocated">
            <summary>
            <para>Whether there is pixel data associated with this image. </para>
            </summary>
            <returns>
            <para>True if pixel data is associated with this image, false otherwise. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Image16Grey.CoordinateSpaceTree">
            <summary>
            <b>Get</b>
            <para>Returns the tree of all named coordinate spaces for this image. The tree provides advanced functions for managing coordinate spaces. </para>
            </summary>
            <returns>
            <para> The <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> for a particular image. You can use this tree to create a transformation that maps points between coordinate spaces. To ensure that all acquired images have the same coordinate space tree, use your <see cref="!:Cognex.Vision.Acquisition.IAcqFifo">AcqFifo's</see>
            <see cref="!:Cognex.Vision.Acquisition.IAcqFifo.CoordinateSpaceTree">CoordinateSpaceTree</see> property instead. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets this image's <see cref="P:Cognex.Vision.IImage.CoordinateSpaceTree">CoordinateSpaceTree</see>. </para>
            </summary>
            <param name="newVal">The new <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> to use.</param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Image16Grey.SfCoordinateSpaceTree">SfCoordinateSpaceTree</see>.</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">If <b>newVal</b> is NULL </exception>
        </member>
        <member name="P:Cognex.Vision.Image16Grey.Encoding">
            <summary>
            <b>Get</b>
            <para>Cognex internal use only. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.Image16Grey.Encoding">Encoding</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Image16Grey.Height">
            <summary>
            <para>Height of the image. </para>
            </summary>
            <returns>
            <para>The height of this image in pixels. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Image16Grey.PixelFromRootTransform">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.ITransform2D">Transformation</see> that maps points into pixel space ("#") from the root space ("@"). </para>
            </summary>
            <returns>
            <para>The <see cref="T:Cognex.Vision.ITransform2D">transformation</see> that maps points into pixel space ("#") from the root space ("@"). </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IImage.PixelFromRootTransform">PixelFromRootTransform</see>. </para>
            </summary>
            <param name="newVal">The new <see cref="T:Cognex.Vision.ITransform2D">transformation</see> to be used. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">The transformation is NULL.</exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Image16Grey.SfPixelFromRootTransform">SfPixelFromRootTransform</see>.</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">If <b>newVal</b> is NULL </exception>
        </member>
        <member name="P:Cognex.Vision.Image16Grey.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>The name of the default coordinate space to be used by tools which process this image. </para>
            </summary>
            <returns>
            <para>The name of the space in this image's <see cref="P:Cognex.Vision.IImage.CoordinateSpaceTree">CoordinateSpaceTree</see> to be used by tools that process this image. Vision defines <A href="../UsersGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-space-names-symbols.htm">special space names</A> for the root coordinate space ("@"), the pixel coordinate space ("#"), the screen coordinate space ("*"), as well as others. </para>
            </returns>
            <remarks>
            <para>Default is "@" (root space) </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets this image's <see cref="T:Cognex.Vision.IImage">SelectedSpaceName</see>. </para>
            </summary>
            <param name="newVal">The new <see cref="T:Cognex.Vision.IImage">SelectedSpaceName</see> to be used.</param>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>value</b> is not a valid space name.</exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Image16Grey.SfSelectedSpaceName">SfSelectedSpaceName</see>.</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>val</b> is not a valid space name. </exception>
        </member>
        <member name="P:Cognex.Vision.Image16Grey.Width">
            <summary>
            <para>Width of the image. </para>
            </summary>
            <returns>
            <para>The width of this image in pixels. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Image16Grey.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.Allocate(System.Int32,System.Int32)">
            <summary>
            <para>Initialize the image with (undefined) pixel data of the given <b>width</b> and <b>height</b>. This method may not be called more than once. </para>
            </summary>
            <param name="width">The desired width of the image in pixels. </param>
            <param name="height">The desired height of the image in pixels. </param>
            <exception cref="T:Cognex.Vision.ImageException">The image is already allocated to a different size. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>width</b> or <b>height</b> is less than or equal to 0. </exception>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.Copy">
            <summary>
            <para>Create a copy of this image in a new image. While the pixels will be copied, the <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> and <see cref="P:Cognex.Vision.Image16Grey.PixelFromRootTransform">PixelFromRootTransform</see> will be shared. Equivalent to calling <see cref="M:Cognex.Vision.Image16Grey.Copy">Copy</see> with <b>copyMode</b> as <see cref="F:Cognex.Vision.ImageCopyModeConstants.CopyPixels">CopyPixels.. </see>
            </para>
            </summary>
            <returns>
            <para>The new image. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.Copy(Cognex.Vision.ImageCopyModeConstants)">
            <summary>
            <para>Create a copy of this image in a new image. Pixels may be shared between images by specifying <b>copyMode</b> as <see cref="T:Cognex.Vision.ImageCopyModeConstants">SharePixels</see>. </para>
            </summary>
            <param name="copyMode">The desired <see cref="T:Cognex.Vision.ImageCopyModeConstants">copy mode</see>. </param>
            <returns>
            <para>The new <see cref="T:Cognex.Vision.IImage">image</see>. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.CopyBase(Cognex.Vision.ImageCopyModeConstants)">
            <summary>
            <para>Create a copy of this image in a new image. Pixels may be shared between images by specifying <b>copyMode</b> as <see cref="T:Cognex.Vision.ImageCopyModeConstants">SharePixels</see>. </para>
            </summary>
            <param name="copyMode">The desired <see cref="T:Cognex.Vision.ImageCopyModeConstants">copy mode</see>. </param>
            <returns>
            <para>The new <see cref="T:Cognex.Vision.IImage">image</see>. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.Get16GreyPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Gets an object that can be used to directly access pixel memory. </para>
            </summary>
            <param name="dataMode">Specifies whether the pixel data are read, write, or read/write. </param>
            <param name="x">The x-coordinate of the portion of the image to get. </param>
            <param name="y">The y-coordinate of the portion of the image to get. </param>
            <param name="width">The width of the portion of the image to get. A value of 0 specifies the entire width of the image (<b>x</b> must also be 0). </param>
            <param name="height">The height of the portion of the image to get. A value of 0 specifies the entire height of the image (<b>y</b> must also be 0). </param>
            <returns>
            <para>An <see cref="T:Cognex.Vision.IImage16PixelMemory">object</see> that represents the pixel data.</para>
            </returns>
            <exception cref="T:Cognex.Vision.ImageException">
            <b>x</b>, <b>y</b>, <b>width</b>, and <b>height</b> describe a region that is not entirely within this image. </exception>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.GetPixel(System.Int32,System.Int32)">
            <summary>
            <para>Pixel value at given location. </para>
            </summary>
            <param name="x">The pixel's x location. </param>
            <param name="y">The pixel's y location. </param>
            <returns>
            <para>The pixel value at the location specified by <b>x</b> and <b>y</b>. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ImageException">
            <see cref="M:Cognex.Vision.Image16Grey.Allocate(System.Int32,System.Int32)">Allocate</see> has not yet been called. </exception>
            <exception cref="T:Cognex.Vision.ImageException">
            <b>x</b> or <b>y</b> is outside of this image (less than 0, or greater than or equal to <see cref="P:Cognex.Vision.Image16Grey.Width">Width</see> or <see cref="P:Cognex.Vision.Image16Grey.Height">Height</see>). </exception>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.GetRoot(Cognex.Vision.IImage16Root@)">
            <summary>
            <para>Returns the root image object that contains the raw pixel data. </para>
            </summary>
            <param name="root">(output param) The image data.</param>
            <remarks>
            <para> This function is <b>not</b> recommended to access raw pixel data. Use <see cref="M:Cognex.Vision.Image16Grey.Get16GreyPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)">Get16GreyPixelMemory</see> to directly access this image's pixel data. This function is useful in cases where you want two images to share the same pixel data. For example, you can pass the result of this function to <see cref="M:Cognex.Vision.Image16Grey.SetRoot(Cognex.Vision.IImage16Root)">SetRoot</see>. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.GetTransform(System.String,System.String)">
            <summary>
            <para>Returns a transformation that maps points from the 'From' coordinate space to the 'To' space. </para>
            </summary>
            <param name="toSpaceName">The name of the coordinate space to transform the point to. The special string "." is accepted as an alias for the <see cref="P:Cognex.Vision.IImage.SelectedSpaceName">SelectedSpaceName</see> of this image. </param>
            <param name="fromSpaceName">The name of the coordinate space to transform the point from. The special string "." is accepted as an alias for the <see cref="P:Cognex.Vision.IImage.SelectedSpaceName">SelectedSpaceName</see> of this image. </param>
            <returns>
            <para>The <see cref="T:Cognex.Vision.ITransform2D">transformation</see> that maps a point from the <b>fromSpaceName</b> to the <b>toSpaceName</b>. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ImageException">The coordinate space tree is missing. </exception>
            <exception cref="T:Cognex.Vision.ImageException">This image has no <see cref="P:Cognex.Vision.IImage.CoordinateSpaceTree">CoordinateSpaceTree</see>. </exception>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.SetPixel(System.Int32,System.Int32,System.UInt16)">
            <summary>
            <para>Sets the value of the pixel at the given location. </para>
            </summary>
            <param name="x">The pixel's x location. </param>
            <param name="y">The pixel's y location. </param>
            <param name="value">The new value for the specified pixel </param>
            <exception cref="T:Cognex.Vision.ImageException">
            <see cref="M:Cognex.Vision.Image16Grey.Allocate(System.Int32,System.Int32)">Allocate</see> has not yet been called. </exception>
            <exception cref="T:Cognex.Vision.ImageException">
            <b>x</b> or <b>y</b> is outside the bounds of this image (less than 0, or greater than or equal to width or height) </exception>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.SetRoot(Cognex.Vision.IImage16Root)">
            <summary>
            <para>Sets the root image object that contains the raw pixel data. </para>
            </summary>
            <param name="root">The new root object to use. Can be NULL, which will disconnect this image from its existing root. </param>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.op_Equality(Cognex.Vision.Image16Grey,Cognex.Vision.Image16Grey)">
            <summary>Compares the equality of two Image16Grey objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Image16Grey.op_Inequality(Cognex.Vision.Image16Grey,Cognex.Vision.Image16Grey)">
            <summary>Compares the inequality of two Image16Grey objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Image16Root">
            <summary>
            <para>An object that holds raw 16-bit pixel data of an image. </para>
            </summary>
            <para>
            <b>Note</b>
            <para>
            <para>This class is intended for Cognex use only. </para>
            </para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Image16Root.#ctor">
            <summary>
            <para>Constructs a new instance of this class with default values. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Image16Root.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Constructs a new instance of this class with the given storage allocated. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="P:Cognex.Vision.Image16Root.Height">
            <summary>
            <para>Returns the height of the pixel data. </para>
            </summary>
            <returns>
            <para>The height of the pixel data. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Image16Root.Width">
            <summary>
            <para>Returns the width of the pixel data. </para>
            </summary>
            <remarks>
            <para>The width of the pixel data. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Image16Root.GetRawPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.Vision.IImage16PixelMemory@)">
            <summary>
            <para>Gets an object that can be used to directly access the raw pixel data. The caller MUST call Dispose on this object when finished with it. </para>
            </summary>
            <param name="dataMode">Specifies whether the pixel data are <see cref="T:Cognex.Vision.ImageDataModeConstants">read, write, or read/write</see>. </param>
            <param name="x">The x-coordinate of the portion of the image to get. </param>
            <param name="y">The y-coordinate of the portion of the image to get. </param>
            <param name="width">The width of the image to get. </param>
            <param name="height">The height of the image to get. </param>
            <param name="pixelMemory">(output param) An object that represents the pixel data.</param>
            <remarks>
            <para> This method is intended for Cognex use only. To access the pixel data directly, use <see cref="T:Cognex.Vision.Image16Grey">Image16Grey's</see>
            <see cref="M:Cognex.Vision.Image16Grey.Get16GreyPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)">Get16GreyPixelMemory</see> instead.</para>
            </remarks>
            <exception cref="T:Cognex.Vision.ImageException">This Root Image has not been initialized. </exception>
            <exception cref="T:Cognex.Vision.ImageException">
            <b>x</b>, <b>y</b>, <b>width</b>, and <b>height</b> do not describe a region that is fully contained within this image. </exception>
        </member>
        <member name="M:Cognex.Vision.Image16Root.Initialize(System.Int32,System.Int32,System.IntPtr,System.Int32,Cognex.Rbbt.IObject)">
            <summary>
            <para>Initializes this <see cref="T:Cognex.Vision.IImage16RootBuffer">IImage16RootBuffer</see>. If <b>scan0</b> and <b>disposable</b> are provided, it is initialized with the provided data. Otherwise, it is initialized with undefined data. </para>
            </summary>
            <param name="width">The width of the data (in pixels) </param>
            <param name="height">The height of the data (in pixels) </param>
            <param name="scan0">A pointer to raw pixel data (optional) </param>
            <param name="stride">The number of pixels between rows. Can be positive or negative. </param>
            <param name="disposable">A pointer to an object that owns scan0 (optional)</param>
            <exception cref="T:Cognex.Vision.ImageException">
            <b>width</b> or <b>height</b> is less than 1; or the absolute value of <b>stride</b> is less than <b>width</b>. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>scan0</b> is NULL, but <b>disposable</b> is not. </exception>
        </member>
        <member name="M:Cognex.Vision.Image16Root.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image16Root.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image16Root.Copy">
            <summary>
            <para>Make a deep copy of the image root, the pixel memory is copied. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image16Root.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Image16Root.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Image16Root.op_Equality(Cognex.Vision.Image16Root,Cognex.Vision.Image16Root)">
            <summary>Compares the equality of two Image16Root objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Image16Root.op_Inequality(Cognex.Vision.Image16Root,Cognex.Vision.Image16Root)">
            <summary>Compares the inequality of two Image16Root objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Image24PlanarColor">
            <summary>
            <para>An object that describes three coincident rectangular arrays, or planes, of 8-bit pixels. Typically used for color images, where the 3 planes represent either RGB or HSI values. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.#ctor">
            <summary>
            <para>Constructs a new, <see cref="M:Cognex.Vision.Image24PlanarColor.Allocate(System.Int32,System.Int32)">unallocated</see> instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Constructs a new CogImage24PlanarColor, allocating image memory with the given width and height. </para>
            </summary>
            <param name="width">The desired width of the new image. </param>
            <param name="height">The desired height of the new image. </param>
        </member>
        <member name="E:Cognex.Vision.Image24PlanarColor.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Image24PlanarColor.Allocated">
            <summary>
            <para>Whether there is pixel data associated with this image. </para>
            </summary>
            <returns>
            <para>True if pixel data is associated with this image, false otherwise. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Image24PlanarColor.ColorSpace">
            <summary>
            <b>Get</b>
            <para>Color space. Note that changing this value will NOT affect any pixel value. </para>
            </summary>
            <returns>
            <para>This image's <see cref="T:Cognex.Vision.ImageColorSpaceConstants">color space</see>. Note that changing this value will not affect any pixel value. Default is <see cref="T:Cognex.Vision.ImageColorSpaceConstants">RGB</see>
            </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets this image's <see cref="P:Cognex.Vision.Image24PlanarColor.ColorSpace">ColorSpace</see>. </para>
            </summary>
            <param name="newVal">The new <see cref="P:Cognex.Vision.Image24PlanarColor.ColorSpace">color space</see> to be used. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Image24PlanarColor.SfColorSpace">SfColorSpace</see>. </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Image24PlanarColor.CoordinateSpaceTree">
            <summary>
            <b>Get</b>
            <para>Returns the tree of all named coordinate spaces for this image. The tree provides advanced functions for managing coordinate spaces. </para>
            </summary>
            <returns>
            <para> The <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> for a particular image. You can use this tree to create a transformation that maps points between coordinate spaces. To ensure that all acquired images have the same coordinate space tree, use your <see cref="!:Cognex.Vision.Acquisition.IAcqFifo">AcqFifo's</see>
            <see cref="!:Cognex.Vision.Acquisition.IAcqFifo.CoordinateSpaceTree">CoordinateSpaceTree</see> property instead. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets this image's <see cref="P:Cognex.Vision.IImage.CoordinateSpaceTree">CoordinateSpaceTree</see>. </para>
            </summary>
            <param name="newVal">The new <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> to use. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Image24PlanarColor.SfCoordinateSpaceTree">SfCoordinateSpaceTree</see>.</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">If <b>newVal</b> is NULL </exception>
        </member>
        <member name="P:Cognex.Vision.Image24PlanarColor.Height">
            <summary>
            <para>Height of the image. </para>
            </summary>
            <returns>
            <para>The height of this image in pixels. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Image24PlanarColor.PixelFromRootTransform">
            <summary>
            <b>Get</b>
            <para>
            <see cref="T:Cognex.Vision.ITransform2D">Transformation</see> that maps points into pixel space ("#") from the root space ("@"). </para>
            </summary>
            <returns>
            <para>The <see cref="T:Cognex.Vision.ITransform2D">transformation</see> that maps points into pixel space ("#") from the root space ("@"). </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.IImage.PixelFromRootTransform">PixelFromRootTransform</see>. </para>
            </summary>
            <param name="newVal">The new <see cref="T:Cognex.Vision.ITransform2D">transformation</see> to be used. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">The transformation is NULL. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Image24PlanarColor.SfPixelFromRootTransform">SfPixelFromRootTransform</see>.</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">If <b>newVal</b> is NULL </exception>
        </member>
        <member name="P:Cognex.Vision.Image24PlanarColor.SelectedSpaceName">
            <summary>
            <b>Get</b>
            <para>The name of the default coordinate space to be used by tools which process this image. </para>
            </summary>
            <returns>
            <para>The name of the space in this image's <see cref="P:Cognex.Vision.IImage.CoordinateSpaceTree">CoordinateSpaceTree</see> to be used by tools that process this image. Vision defines <A href="../UsersGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-space-names-symbols.htm">special space names</A> for the root coordinate space ("@"), the pixel coordinate space ("#"), the screen coordinate space ("*"), as well as others.</para>
            </returns>
            <remarks>
            <para>Default is "@" (root space). </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets this image's <see cref="T:Cognex.Vision.IImage">SelectedSpaceName</see>. </para>
            </summary>
            <param name="newVal">The new <see cref="T:Cognex.Vision.IImage">SelectedSpaceName</see> to be used.</param>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>value</b> is not a valid space name.</exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Image24PlanarColor.SfSelectedSpaceName">SfSelectedSpaceName</see>.</description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.SpaceTreeException">
            <b>val</b> is not a valid space name. </exception>
        </member>
        <member name="P:Cognex.Vision.Image24PlanarColor.Width">
            <summary>
            <para>Width of the image. </para>
            </summary>
            <returns>
            <para>The width of this image in pixels. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Image24PlanarColor.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.Allocate(System.Int32,System.Int32)">
            <summary>
            <para>Initialize the image with (undefined) pixel data of the given <b>width</b> and <b>height</b>. This method may not be called more than once. </para>
            </summary>
            <param name="width">The desired width of the image in pixels. </param>
            <param name="height">The desired height of the image in pixels. </param>
            <exception cref="T:Cognex.Vision.ImageException">The image is already allocated to a different size. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>width</b> or <b>height</b> is less than or equal to 0. </exception>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.Copy(Cognex.Vision.ImageCopyModeConstants)">
            <summary>
            <para>Create a copy of this image in a new image. Pixels may be shared between images by specifying <b>copyMode</b> as <see cref="T:Cognex.Vision.ImageCopyModeConstants">SharePixels</see>. </para>
            </summary>
            <param name="copyMode">The desired <see cref="T:Cognex.Vision.ImageCopyModeConstants">copy mode</see>. </param>
            <returns>
            <para>The new <see cref="T:Cognex.Vision.IImage">image</see>. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.CopyBase(Cognex.Vision.ImageCopyModeConstants)">
            <summary>
            <para>Create a copy of this image in a new image. Pixels may be shared between images by specifying <b>copyMode</b> as <see cref="T:Cognex.Vision.ImageCopyModeConstants">SharePixels</see>. </para>
            </summary>
            <param name="copyMode">The desired <see cref="T:Cognex.Vision.ImageCopyModeConstants">copy mode</see>. </param>
            <returns>
            <para>The new <see cref="T:Cognex.Vision.IImage">image</see>. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.Get24PlanarColorPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.Vision.IImage8PixelMemory@,Cognex.Vision.IImage8PixelMemory@,Cognex.Vision.IImage8PixelMemory@)">
            <summary>
            <para>Get objects that can be used to directly access each plane of pixel memory. </para>
            </summary>
            <param name="dataMode">Specifies whether the pixel data are <see cref="T:Cognex.Vision.ImageDataModeConstants">read, write, or read/write</see>. </param>
            <param name="x">The x-coordinate of the portion of the image to get. </param>
            <param name="y">The y-coordinate of the portion of the image to get. </param>
            <param name="width">The width of the portion of the image to get. A value of 0 specifies the entire width of the image (<b>x</b> must also be 0). </param>
            <param name="height">The height of the portion of the image to get. A value of 0 specifies the entire height of the image (<b>y</b> must also be 0). </param>
            <param name="pixelMemory0">(output param) An <see cref="T:Cognex.Vision.IImage8PixelMemory">object</see> that represents the pixel data for the first plane (red or hue). </param>
            <param name="pixelMemory1">(output param) An <see cref="T:Cognex.Vision.IImage8PixelMemory">object</see> that represents the pixel data for the second plane (green or saturation). </param>
            <param name="pixelMemory2">(output param) An <see cref="T:Cognex.Vision.IImage8PixelMemory">object</see> that represents the pixel data for the third plane (blue or intensity). </param>
            <exception cref="T:Cognex.Vision.ImageException">This image has not been <see cref="M:Cognex.Vision.Image24PlanarColor.Allocate(System.Int32,System.Int32)">allocated</see>. </exception>
            <exception cref="T:Cognex.Vision.ImageException">
            <b>x</b>, <b>y</b>, <b>height</b>, and <b>width</b> describe a region that is not entirely within the image. </exception>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.GetPixel(System.Int32,System.Int32,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            <para>Read the pixel values at the given location. </para>
            </summary>
            <param name="x">The pixel's x-coordinate. </param>
            <param name="y">The pixel's y-coordinate. </param>
            <param name="valPlane0">(output param) The pixel value in the first plane (red or hue). </param>
            <param name="valPlane1">(output param) The pixel value in the second plane (green or saturation). </param>
            <param name="valPlane2">(output param) The pixel value in the third plane (blue or intensity). </param>
            <exception cref="T:Cognex.Vision.ImageException">This image has not been <see cref="M:Cognex.Vision.Image24PlanarColor.Allocate(System.Int32,System.Int32)">allocated</see>. </exception>
            <exception cref="T:Cognex.Vision.ImageException">
            <b>x</b> or <b>y</b> is outside of this image (less than 0, or greater than or equal to <see cref="P:Cognex.Vision.Image24PlanarColor.Width">Width</see> or <see cref="P:Cognex.Vision.Image24PlanarColor.Height">Height</see>). </exception>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.GetPlane(Cognex.Vision.ImagePlaneConstants)">
            <summary>
            <para>Get an <see cref="T:Cognex.Vision.Image8Grey">Image8Grey</see> corresponding to the specified plane of this image. </para>
            </summary>
            <param name="whichPlane">An <see cref="T:Cognex.Vision.ImagePlaneConstants">ImagePlaneConstants</see> specifying which plane to get. </param>
            <returns>
            <para>The requested plane of this image as a new <see cref="T:Cognex.Vision.Image8Grey">Image8Grey</see>. The new image shares its underlying image memory with this original, so any changes to its pixel values will affect this image. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.GetRoots(Cognex.Vision.IImage8Root@,Cognex.Vision.IImage8Root@,Cognex.Vision.IImage8Root@)">
            <summary>
            <para>Gets all three root image objects containing the raw pixel data. </para>
            </summary>
            <param name="root0">(output param) The first root (red or hue). </param>
            <param name="root1">(output param) The second root (green or saturation). </param>
            <param name="root2">(output param) The third root (blue or intensity). </param>
            <remarks>
            <para>This function is intended for Cognex internal use. Use <see cref="M:Cognex.Vision.Image24PlanarColor.GetPlane(Cognex.Vision.ImagePlaneConstants)">GetPlane</see> to obtain an individual plane image. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.GetTransform(System.String,System.String)">
            <summary>
            <para>Returns a transformation that maps points from the 'From' coordinate space to the 'To' space. </para>
            </summary>
            <param name="toSpaceName">The name of the coordinate space to transform the point to. The special string "." is accepted as an alias for the <see cref="P:Cognex.Vision.IImage.SelectedSpaceName">SelectedSpaceName</see> of this image. </param>
            <param name="fromSpaceName">The name of the coordinate space to transform the point from. The special string "." is accepted as an alias for the <see cref="P:Cognex.Vision.IImage.SelectedSpaceName">SelectedSpaceName</see> of this image. </param>
            <returns>
            <para>The <see cref="T:Cognex.Vision.ITransform2D">transformation</see> that maps a point from the <b>fromSpaceName</b> to the <b>toSpaceName</b>. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ImageException">The coordinate space tree is missing. </exception>
            <exception cref="T:Cognex.Vision.ImageException">This image has no <see cref="P:Cognex.Vision.IImage.CoordinateSpaceTree">CoordinateSpaceTree</see>. </exception>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.SetPixel(System.Int32,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
            <para>Write the pixel values at the given location. </para>
            </summary>
            <param name="x">The pixel's x-coordinate. </param>
            <param name="y">The pixel's y-coordinate. </param>
            <param name="valuePlane0">The pixel value for the first plane (red or hue). </param>
            <param name="valuePlane1">The pixel value for the second plane (green or saturation). </param>
            <param name="valuePlane2">The pixel value for the third plane (blue or intensity). </param>
            <exception cref="T:Cognex.Vision.ImageException">
            <see cref="M:Cognex.Vision.Image24PlanarColor.Allocate(System.Int32,System.Int32)">Allocate</see> has not yet been called. </exception>
            <exception cref="T:Cognex.Vision.ImageException">
            <b>x</b> or <b>y</b> is outside the bounds of this image (less than 0, or greater than or equal to width or height) </exception>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.SetRoots(Cognex.Vision.IImage8Root,Cognex.Vision.IImage8Root,Cognex.Vision.IImage8Root)">
            <summary>
            <para>Set all three root image objects containing the raw pixel data. </para>
            </summary>
            <param name="root0">The first root (red or hue). </param>
            <param name="root1">The second root (green or saturation). </param>
            <param name="root2">The third root (blue or intensity). </param>
            <exception cref="T:Cognex.Vision.ArgumentNullException">One or two of the supplied arguments are NULL. (C++ only) </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The widths or heights of the supplied roots are not the same. </exception>
            <remarks>
            <para>
            <para>Set all three root image objects containing the raw pixel data. You can specify NULL for all three root objects to disconnect this image from its pixel storage.</para>
            <para>This function is intended for Cognex internal use only. </para>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.op_Equality(Cognex.Vision.Image24PlanarColor,Cognex.Vision.Image24PlanarColor)">
            <summary>Compares the equality of two Image24PlanarColor objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Image24PlanarColor.op_Inequality(Cognex.Vision.Image24PlanarColor,Cognex.Vision.Image24PlanarColor)">
            <summary>Compares the inequality of two Image24PlanarColor objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Image8Root">
            <summary>
            <para>An object that holds raw 8-bit pixel data of an image. </para>
            </summary>
            <para>
            <b>Note</b>
            <para>
            <para>This class is intended for Cognex use only. </para>
            </para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Image8Root.#ctor">
            <summary>
            <para>Constructs a new instance of this class with default values. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Image8Root.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Constructs a new instance of this class with the given storage allocated. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="P:Cognex.Vision.Image8Root.Height">
            <summary>
            <para>Returns the height of the pixel data. </para>
            </summary>
            <returns>
            <para>The height of the pixel data. </para>
            </returns>
        </member>
        <member name="P:Cognex.Vision.Image8Root.Width">
            <summary>
            <para>Returns the height of the pixel data. </para>
            </summary>
            <returns>
            <para>The height of the pixel data. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Image8Root.GetRawPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.Vision.IImage8PixelMemory@)">
            <summary>
            <para>Gets an object that can be used to directly access the raw pixel data. The caller MUST call Dispose on this object when finished with it. </para>
            </summary>
            <param name="dataMode">Specifies whether the pixel data are <see cref="T:Cognex.Vision.ImageDataModeConstants">read, write, or read/write</see>. </param>
            <param name="x">The x-coordinate of the portion of the image to get. </param>
            <param name="y">The y-coordinate of the portion of the image to get. </param>
            <param name="width">The width of the image to get. </param>
            <param name="height">The height of the image to get. </param>
            <param name="pixelMemory">(output param) An object that represents the pixel data.</param>
            <remarks>
            <para> This method is intended for Cognex use only. To access the pixel data directly, use <see cref="T:Cognex.Vision.Image8Grey">Image8Grey's</see>
            <see cref="M:Cognex.Vision.Image8Grey.Get8GreyPixelMemory(Cognex.Vision.ImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)">Get8GreyPixelMemory()</see> instead. </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ImageException">This Root Image has not been initialized. </exception>
            <exception cref="T:Cognex.Vision.ImageException">
            <b>x</b>, <b>y</b>, <b>width</b>, and <b>height</b> do not describe a region that is fully contained within this image. </exception>
        </member>
        <member name="M:Cognex.Vision.Image8Root.Initialize(System.Int32,System.Int32,System.IntPtr,System.Int32,Cognex.Rbbt.IObject)">
            <summary>
            <para>Initializes this <see cref="T:Cognex.Vision.IImage8RootBuffer">IImage8RootBuffer</see>. If <b>scan0</b> and <b>disposable</b> are provided, it is initialized with the provided data. Otherwise, it is initialized with undefined data. </para>
            </summary>
            <param name="width">The width of the data (in pixels) </param>
            <param name="height">The height of the data (in pixels) </param>
            <param name="scan0">A pointer to raw pixel data (optional) </param>
            <param name="stride">The stride of the image (in bytes) </param>
            <param name="disposable">A pointer to an object that owns scan0 (optional) </param>
            <exception cref="T:Cognex.Vision.ImageException">
            <b>width</b> or <b>height</b> is less than 1; or <b>stride</b> is less than <b>width</b>. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>scan0</b> is NULL, but <b>disposable</b> is not. </exception>
        </member>
        <member name="M:Cognex.Vision.Image8Root.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8Root.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8Root.Copy">
            <summary>
            <para>Make a deep copy of the image root, the pixel memory is copied. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8Root.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Image8Root.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Image8Root.op_Equality(Cognex.Vision.Image8Root,Cognex.Vision.Image8Root)">
            <summary>Compares the equality of two Image8Root objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Image8Root.op_Inequality(Cognex.Vision.Image8Root,Cognex.Vision.Image8Root)">
            <summary>Compares the inequality of two Image8Root objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Image8GreyCollection">
            <summary>
            <para>Class which holds a collection of <see cref="T:Cognex.Vision.Image8Grey">Image8Grey</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.Image8GreyCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Image8GreyCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Image8GreyCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Image8GreyCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Image8GreyCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Image8GreyCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Image8GreyCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Image8GreyCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Image8GreyCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Image8GreyCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Image8GreyCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Image8GreyCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Image8GreyCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Image8GreyCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Image8GreyCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.Add(Cognex.Vision.Image8Grey)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Image8GreyCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Image8GreyCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Image8GreyCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Image8GreyCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.Contains(Cognex.Vision.Image8Grey)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.IndexOf(Cognex.Vision.Image8Grey)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.Insert(System.Int32,Cognex.Vision.Image8Grey)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Image8GreyCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Image8GreyCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.setItem(System.Int32,Cognex.Vision.Image8Grey)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Image8GreyCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Image8GreyCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Image8GreyCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Image8GreyCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.Remove(Cognex.Vision.Image8Grey)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Image8GreyCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Image8GreyCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Image8GreyCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Image8GreyCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.op_Equality(Cognex.Vision.Image8GreyCollection,Cognex.Vision.Image8GreyCollection)">
            <summary>Compares the equality of two Image8GreyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.op_Inequality(Cognex.Vision.Image8GreyCollection,Cognex.Vision.Image8GreyCollection)">
            <summary>Compares the inequality of two Image8GreyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.CopyTo(Cognex.Vision.Image8Grey[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Image8GreyCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Image8Grey})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.Int32Collection">
            <summary>
            <para>Class which holds a collection of 32-bit integers. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.Int32Collection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int32Collection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int32Collection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int32Collection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int32Collection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int32Collection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int32Collection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int32Collection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int32Collection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int32Collection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int32Collection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Int32Collection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Int32Collection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Int32Collection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Int32Collection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.Add(System.Int32)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Int32Collection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Int32Collection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Int32Collection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Int32Collection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.Contains(System.Int32)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.IndexOf(System.Int32)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.Insert(System.Int32,System.Int32)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Int32Collection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Int32Collection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.setItem(System.Int32,System.Int32)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Int32Collection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Int32Collection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Int32Collection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Int32Collection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.Remove(System.Int32)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Int32Collection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Int32Collection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Int32Collection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Int32Collection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.op_Equality(Cognex.Vision.Int32Collection,Cognex.Vision.Int32Collection)">
            <summary>Compares the equality of two Int32Collection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.op_Inequality(Cognex.Vision.Int32Collection,Cognex.Vision.Int32Collection)">
            <summary>Compares the inequality of two Int32Collection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int32Collection.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.Int64Collection">
            <summary>
            <para>Class which holds a collection of 64-bit integers. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.Int64Collection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int64Collection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int64Collection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int64Collection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int64Collection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int64Collection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int64Collection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int64Collection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int64Collection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int64Collection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Int64Collection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Int64Collection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Int64Collection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Int64Collection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Int64Collection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.Add(System.Int64)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Int64Collection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Int64Collection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Int64Collection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Int64Collection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.Contains(System.Int64)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.IndexOf(System.Int64)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.Insert(System.Int32,System.Int64)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Int64Collection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Int64Collection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.setItem(System.Int32,System.Int64)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Int64Collection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Int64Collection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Int64Collection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Int64Collection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.Remove(System.Int64)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Int64Collection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Int64Collection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Int64Collection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Int64Collection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.op_Equality(Cognex.Vision.Int64Collection,Cognex.Vision.Int64Collection)">
            <summary>Compares the equality of two Int64Collection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.op_Inequality(Cognex.Vision.Int64Collection,Cognex.Vision.Int64Collection)">
            <summary>Compares the inequality of two Int64Collection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.CopyTo(System.Int64[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Int64Collection.AddRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.IOwnedParams">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IOwnedParams.GetOwner">
            <summary>
            </summary>
        </member>
        <member name="T:Cognex.Vision.IRegionCollection">
            <summary>
            <para>A collection of <see cref="!:Cognex.Vision.IRegionPtr">IRegion</see> objects. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.IRegionCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IRegionCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IRegionCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IRegionCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IRegionCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IRegionCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IRegionCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IRegionCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IRegionCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IRegionCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.IRegionCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IRegionCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IRegionCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IRegionCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.IRegionCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.Add(Cognex.Vision.IRegion)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IRegionCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.IRegionCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IRegionCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.IRegionCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.Contains(Cognex.Vision.IRegion)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.IndexOf(Cognex.Vision.IRegion)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.Insert(System.Int32,Cognex.Vision.IRegion)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IRegionCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.IRegionCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.setItem(System.Int32,Cognex.Vision.IRegion)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IRegionCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.IRegionCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IRegionCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.IRegionCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.Remove(Cognex.Vision.IRegion)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IRegionCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.IRegionCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IRegionCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.IRegionCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.op_Equality(Cognex.Vision.IRegionCollection,Cognex.Vision.IRegionCollection)">
            <summary>Compares the equality of two IRegionCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.op_Inequality(Cognex.Vision.IRegionCollection,Cognex.Vision.IRegionCollection)">
            <summary>Compares the inequality of two IRegionCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.CopyTo(Cognex.Vision.IRegion[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.IRegionCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.IRegion})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.ObjectBase">
            <summary>
            <para>This is the base class for non-shareable Vision classes. This class provides support for the <see cref="T:Cognex.Rbbt.IObject">IObject</see> interface. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ObjectBase.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.ObjectBase.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ObjectBase.op_Equality(Cognex.Vision.ObjectBase,Cognex.Vision.ObjectBase)">
            <summary>Compares the equality of two ObjectBase objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ObjectBase.op_Inequality(Cognex.Vision.ObjectBase,Cognex.Vision.ObjectBase)">
            <summary>Compares the inequality of two ObjectBase objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.PelRectCollection">
            <summary>
            <para>Class which holds a collection of <see cref="T:Cognex.Vision.PelRect">PelRect</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.PelRectCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.PelRectCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.PelRectCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.PelRectCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.PelRectCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.PelRectCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.PelRectCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.PelRectCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.PelRectCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.PelRectCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.PelRectCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PelRectCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PelRectCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PelRectCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.PelRectCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.Add(Cognex.Vision.PelRect)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.PelRectCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.PelRectCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.PelRectCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.PelRectCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.Contains(Cognex.Vision.PelRect)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.IndexOf(Cognex.Vision.PelRect)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.Insert(System.Int32,Cognex.Vision.PelRect)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.PelRectCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.PelRectCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.setItem(System.Int32,Cognex.Vision.PelRect)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.PelRectCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.PelRectCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.PelRectCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.PelRectCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.Remove(Cognex.Vision.PelRect)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.PelRectCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.PelRectCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.PelRectCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.PelRectCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.op_Equality(Cognex.Vision.PelRectCollection,Cognex.Vision.PelRectCollection)">
            <summary>Compares the equality of two PelRectCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.op_Inequality(Cognex.Vision.PelRectCollection,Cognex.Vision.PelRectCollection)">
            <summary>Compares the inequality of two PelRectCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.CopyTo(Cognex.Vision.PelRect[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.PelRectCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.PelRect})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.RecordDisplayMethod">
            <summary>
            <para>This class exists to be placed as content in a <see cref="T:Cognex.Vision.Record">Record</see>. This content may then be used by the RecordDisplay to drive the addition of an appropriately scaled coordinate space to the RecordDisplay's UserPixelTree. This can be useful when displaying standalone graphics such as a histogram diagram. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RecordDisplayMethod.#ctor(System.String,System.String,Cognex.Vision.ITransform2D)">
            <summary>
            <para>Construct a new instance of this class using the supplied arguments. </para>
            </summary>
            <param name="addSpaceParentName">The name of the parent space to which the child space will be added. </param>
            <param name="addSpaceChildName">The name of the child space to be added. Note that this name may start with the underscore character. </param>
            <param name="addSpaceParentFromChildTransform">The transform that maps from the new child space to the specified parent space. </param>
        </member>
        <member name="P:Cognex.Vision.RecordDisplayMethod.AddSpaceParentName">
            <summary>
            <para>Get the name of the parent space to which the child space will be added. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RecordDisplayMethod.AddSpaceChildName">
            <summary>
            <para>Get the name of the child space to be added. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RecordDisplayMethod.AddSpaceParentFromChildTransform">
            <summary>
            <para>Get the transform that maps from the new child space to the parent space. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RecordDisplayMethod.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RecordDisplayMethod.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RecordDisplayMethod.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.RecordDisplayMethod.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RecordDisplayMethod.op_Equality(Cognex.Vision.RecordDisplayMethod,Cognex.Vision.RecordDisplayMethod)">
            <summary>Compares the equality of two RecordDisplayMethod objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RecordDisplayMethod.op_Inequality(Cognex.Vision.RecordDisplayMethod,Cognex.Vision.RecordDisplayMethod)">
            <summary>Compares the inequality of two RecordDisplayMethod objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.RectangleAffineCollection">
            <summary>
            <para>Class which holds a collection of RectangleAffines. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.RectangleAffineCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleAffineCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleAffineCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleAffineCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleAffineCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleAffineCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleAffineCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleAffineCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleAffineCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleAffineCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleAffineCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffineCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffineCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffineCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleAffineCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.Add(Cognex.Vision.RectangleAffine)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RectangleAffineCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.RectangleAffineCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RectangleAffineCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.RectangleAffineCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.Contains(Cognex.Vision.RectangleAffine)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.IndexOf(Cognex.Vision.RectangleAffine)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.Insert(System.Int32,Cognex.Vision.RectangleAffine)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RectangleAffineCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.RectangleAffineCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.setItem(System.Int32,Cognex.Vision.RectangleAffine)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RectangleAffineCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.RectangleAffineCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RectangleAffineCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.RectangleAffineCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.Remove(Cognex.Vision.RectangleAffine)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RectangleAffineCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.RectangleAffineCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RectangleAffineCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.RectangleAffineCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.op_Equality(Cognex.Vision.RectangleAffineCollection,Cognex.Vision.RectangleAffineCollection)">
            <summary>Compares the equality of two RectangleAffineCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.op_Inequality(Cognex.Vision.RectangleAffineCollection,Cognex.Vision.RectangleAffineCollection)">
            <summary>Compares the inequality of two RectangleAffineCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.CopyTo(Cognex.Vision.RectangleAffine[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleAffineCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.RectangleAffine})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.RectangleCollection">
            <summary>
            <para>Class which holds a collection of Rectangles. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.RectangleCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.RectangleCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RectangleCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.Add(Cognex.Vision.Rectangle)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RectangleCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.RectangleCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RectangleCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.RectangleCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.Contains(Cognex.Vision.Rectangle)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.IndexOf(Cognex.Vision.Rectangle)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.Insert(System.Int32,Cognex.Vision.Rectangle)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RectangleCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.RectangleCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.setItem(System.Int32,Cognex.Vision.Rectangle)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RectangleCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.RectangleCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RectangleCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.RectangleCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.Remove(Cognex.Vision.Rectangle)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RectangleCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.RectangleCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.RectangleCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.RectangleCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.op_Equality(Cognex.Vision.RectangleCollection,Cognex.Vision.RectangleCollection)">
            <summary>Compares the equality of two RectangleCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.op_Inequality(Cognex.Vision.RectangleCollection,Cognex.Vision.RectangleCollection)">
            <summary>Compares the inequality of two RectangleCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.CopyTo(Cognex.Vision.Rectangle[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.RectangleCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Rectangle})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.UInt8Collection">
            <summary>
            <para>Class which holds a collection of 8-bit unsigned integers. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.UInt8Collection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt8Collection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt8Collection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt8Collection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt8Collection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt8Collection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt8Collection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt8Collection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt8Collection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt8Collection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt8Collection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.UInt8Collection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.UInt8Collection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.UInt8Collection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.UInt8Collection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.Add(System.Byte)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.UInt8Collection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.UInt8Collection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.UInt8Collection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.UInt8Collection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.Contains(System.Byte)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.IndexOf(System.Byte)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.Insert(System.Int32,System.Byte)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.UInt8Collection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.UInt8Collection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.setItem(System.Int32,System.Byte)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.UInt8Collection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.UInt8Collection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.UInt8Collection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.UInt8Collection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.Remove(System.Byte)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.UInt8Collection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.UInt8Collection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.UInt8Collection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.UInt8Collection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.op_Equality(Cognex.Vision.UInt8Collection,Cognex.Vision.UInt8Collection)">
            <summary>Compares the equality of two UInt8Collection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.op_Inequality(Cognex.Vision.UInt8Collection,Cognex.Vision.UInt8Collection)">
            <summary>Compares the inequality of two UInt8Collection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt8Collection.AddRange(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.SimpleColor">
            <summary>
            <para>Class of simple nominal color value. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SimpleColor.#ctor(Cognex.Vision.ImageColorSpaceConstants)">
            <summary>
            <para>Constructs a <see cref="T:Cognex.Vision.SimpleColor">SimpleColor</see> object with the specified color space. Sets each color plane value to be 0. </para>
            </summary>
            <param name="space">The color space for the new object </param>
        </member>
        <member name="M:Cognex.Vision.SimpleColor.#ctor(Cognex.Vision.ImageColorSpaceConstants,System.Double,System.Double,System.Double)">
            <summary>
            <para>Constructs a <see cref="T:Cognex.Vision.SimpleColor">SimpleColor</see> object taking the supplied color space and plane values. </para>
            </summary>
            <param name="space">The color space for the new object. </param>
            <param name="plane0">The value for the first color plane. </param>
            <param name="plane1">The value for the second color plane. </param>
            <param name="plane2">The value for the third color plane.</param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">if plane0, or plane1, or plane2 is less than zero. </exception>
        </member>
        <member name="E:Cognex.Vision.SimpleColor.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.SimpleColor.ColorSpace">
            <summary>
            <b>Get</b>
            <para>Gets the color space of this <see cref="T:Cognex.Vision.SimpleColor">SimpleColor</see> object. The color space specifies how the color values should be interpreted and used. </para>
            </summary>
            <remarks>
            <para>Note that changing this color space value will not affect the plane values. </para>
            </remarks>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.SimpleColor.ColorSpace">ColorSpace</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.SimpleColor.SfColorSpace">SfColorSpace</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">if the newValue is not a member of the enumeration. </exception>
        </member>
        <member name="P:Cognex.Vision.SimpleColor.Plane0">
            <summary>
            <b>Get</b>
            <para>Gets the value of the first color plane. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.SimpleColor.Plane0">Plane0</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.SimpleColor.SfPlane0">SfPlane0</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If you attempt to set this to a value less than zero. </exception>
        </member>
        <member name="P:Cognex.Vision.SimpleColor.Plane1">
            <summary>
            <b>Get</b>
            <para>Gets the value of the second color plane. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.SimpleColor.Plane1">Plane1</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.SimpleColor.SfPlane1">SfPlane1</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If you attempt to set this to a value less than zero. </exception>
        </member>
        <member name="P:Cognex.Vision.SimpleColor.Plane2">
            <summary>
            <b>Get</b>
            <para>Gets the value of the third color plane. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.SimpleColor.Plane2">Plane2</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.SimpleColor.SfPlane2">SfPlane2</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If you attempt to set this to a value less than zero. </exception>
        </member>
        <member name="P:Cognex.Vision.SimpleColor.ColorValue">
            <summary>
            <para>Gets the <see cref="T:Cognex.Vision.Color32">Color32</see> corresponding to this <see cref="T:Cognex.Vision.SimpleColor">SimpleColor</see> object. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.SimpleColor.Name">
            <summary>
            <b>Get</b>
            <para>Gets the name of the simple color value.It provides another way to distinguish color objects. </para>
            </summary>
            <value>
            <b>Default Value: </b> an empty string </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.SimpleColor.Name">Name</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.SimpleColor.SfName">SfName</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.SimpleColor.Selected">
            <summary>
            <b>Get</b>
            <para>Whether this object is selected for running. </para>
            </summary>
            <value>
            <b>Default Value: </b> true </value>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.SimpleColor.Selected">Selected</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.SimpleColor.SfSelected">SfSelected</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.SimpleColor.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SimpleColor.SetFromSimpleColor(Cognex.Vision.SimpleColor)">
            <summary>
            <para>Set the values of this <see cref="T:Cognex.Vision.SimpleColor">SimpleColor</see> object from the supplied <see cref="T:Cognex.Vision.SimpleColor">SimpleColor</see> object. </para>
            </summary>
            <param name="newColor">a <see cref="T:Cognex.Vision.SimpleColor">SimpleColor</see> object</param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.SimpleColor.SfPlane0">SfPlane0</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.SimpleColor.SfPlane1">SfPlane1</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.SimpleColor.SfPlane2">SfPlane2</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.SimpleColor.SfColorSpace">SfColorSpace</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.SimpleColor.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SimpleColor.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SimpleColor.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SimpleColor.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SimpleColor.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.SimpleColor.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.SimpleColor.op_Equality(Cognex.Vision.SimpleColor,Cognex.Vision.SimpleColor)">
            <summary>Compares the equality of two SimpleColor objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.SimpleColor.op_Inequality(Cognex.Vision.SimpleColor,Cognex.Vision.SimpleColor)">
            <summary>Compares the inequality of two SimpleColor objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.StringDictionary">
            <summary>
            <para>Class which holds a keyed collection of strings. </para>
            </summary>
            <remarks>
            <para>You can retrieve a string from the collection by specifying its key or zero-based index position. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.StringDictionary.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringDictionary.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringDictionary.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringDictionary.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringDictionary.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringDictionary.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringDictionary.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringDictionary.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.StringDictionary.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.StringDictionary.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.StringDictionary.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.StringDictionary.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.ContainsKey(System.String)">
            <summary>
            <para>Determines whether this dictionary contains the specified key. </para>
            </summary>
            <param name="key">The key to check. </param>
            <returns>
            <para>True if this dictionary contains <b>key</b>, otherwise False. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.Key(System.Int32)">
            <summary>
            <para>Get the key at the specified index. </para>
            </summary>
            <param name="index">The zero-based index to check. </param>
            <returns>
            <para>The key at the specified index. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.GetItemByKey(System.String)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>ByKey
        </member>
        <member name="M:Cognex.Vision.StringDictionary.TryGetValue(System.String,System.String@)">
            <summary>
            <para>Get the item associated with the specified key. </para>
            </summary>
            <param name="key">The key of the item to retrieve. </param>
            <param name="value">If the key is found, this will be the value associated with that key when this method returns. If the key is NOT found, this will equal the input value. </param>
            <returns>
            <para>true if this dictionary contains an element with the specified key, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.TryGetByIndex(System.Int32,System.String@,System.String@)">
            <summary>
            <para>Get the key and value associated with the specified index. </para>
            </summary>
            <param name="index">The index of the key and value to retrieve. </param>
            <param name="outKey">If the index is valid, this will be the key associated with that index when this method returns. If the index is invalid, this will equal the input key. </param>
            <param name="outValue">If the index is valid, this will be the value associated with that index when this method returns. If the index is invalid, this will equal the input value. </param>
            <returns>
            <para>true if this dictionary contains a key and value at the specified index, else false. </para>
            </returns>
            <remarks>
            <para>An index is invalid if it is less than zero or is greater than or equal to Count. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.Clear">
            <summary>
            <para>Remove all items from this dictionary. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.StringDictionary.Clearing">Clearing</see> Raises before the dictionary is cleared. <see cref="E:Cognex.Vision.StringDictionary.Cleared">Cleared</see> Raises after the dictionary is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.DictionaryBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.DictionaryBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.Remove(System.String)">
            <summary>
            <para>Remove the item with the specified key from this dictionary. </para>
            </summary>
            <param name="key">The key of the item to remove from this dictionary. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.StringDictionary.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.StringDictionary.RemovedItem">RemovedItem</see> Raises after the item is removed. </para>
            <para>
            <see cref="E:Cognex.Vision.StringDictionary.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.StringDictionary.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.DictionaryBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.DictionaryBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.Add(System.String,System.String)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">If <b>key</b> already exists in this dictionary </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.StringDictionary.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.StringDictionary.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.DictionaryBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.DictionaryBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.setItem(System.String,System.String)">
            <summary>
            <para>Replace the element with the specified key. If the key is not a member of this dictionary, insert the key/value pair. </para>
            </summary>
            <param name="key">The key of the item to replace. </param>
            <param name="value">The object that will replace the item at the specified key. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.StringDictionary.ReplacingItem">ReplacingItem</see> If <b>key</b> exists, raises before the item is replaced. <see cref="E:Cognex.Vision.StringDictionary.ReplacedItem">ReplacedItem</see> If <b>key</b> exists, raises after the item is replaced. <see cref="E:Cognex.Vision.StringDictionary.InsertingItem">InsertingItem</see> If <b>key</b> does NOT exist, raises before the item is inserted. <see cref="E:Cognex.Vision.StringDictionary.InsertedItem">InsertedItem</see> If <b>key</b> does NOT exist, raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.DictionaryBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.DictionaryBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.op_Equality(Cognex.Vision.StringDictionary,Cognex.Vision.StringDictionary)">
            <summary>Compares the equality of two StringDictionary objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.op_Inequality(Cognex.Vision.StringDictionary,Cognex.Vision.StringDictionary)">
            <summary>Compares the inequality of two StringDictionary objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            <para>Adds the specified item from this collection. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.StringReadOnlyCollection">
            <summary>
            <para>Class which holds a read-only collection of strings. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringReadOnlyCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="P:Cognex.Vision.StringReadOnlyCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringReadOnlyCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.StringReadOnlyCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.StringReadOnlyCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.StringReadOnlyCollection.op_Equality(Cognex.Vision.StringReadOnlyCollection,Cognex.Vision.StringReadOnlyCollection)">
            <summary>Compares the equality of two StringReadOnlyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.StringReadOnlyCollection.op_Inequality(Cognex.Vision.StringReadOnlyCollection,Cognex.Vision.StringReadOnlyCollection)">
            <summary>Compares the inequality of two StringReadOnlyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.StringReadOnlyCollection.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.StringReadOnlyCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.ToolCollection">
            <summary>
            <para>Class which holds a collection of Vision Tools. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.ToolCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ToolCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ToolCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ToolCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ToolCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.Add(Cognex.Vision.ITool)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.ToolCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.ToolCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.Contains(Cognex.Vision.ITool)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.IndexOf(Cognex.Vision.ITool)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.Insert(System.Int32,Cognex.Vision.ITool)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.ToolCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.setItem(System.Int32,Cognex.Vision.ITool)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.ToolCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.ToolCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.Remove(Cognex.Vision.ITool)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.ToolCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.ToolCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.op_Equality(Cognex.Vision.ToolCollection,Cognex.Vision.ToolCollection)">
            <summary>Compares the equality of two ToolCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.op_Inequality(Cognex.Vision.ToolCollection,Cognex.Vision.ToolCollection)">
            <summary>Compares the inequality of two ToolCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.CopyTo(Cognex.Vision.ITool[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.ITool})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.ToolTrackingCollection">
            <summary>
            <para>An ordered collection of Vision Tools that raises events whenever a change is made. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.#ctor(Cognex.Rbbt.IObject)">
            <summary>
            <para>Construct a new instance of the tracking collection class with a parent specified by the argument. </para>
            </summary>
            <param name="parent">The object containing this CogToolTrackingCollection. </param>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.ToolTrackingCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolTrackingCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolTrackingCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolTrackingCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolTrackingCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolTrackingCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolTrackingCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolTrackingCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolTrackingCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolTrackingCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolTrackingCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.ToolTrackingCollection.TrackedItemLastRunRecordChanged">
            <summary>
            <para>This event is raised when any of the contained tools raises a Changed event with the SfCreateLastRunRecord state flag. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ToolTrackingCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ToolTrackingCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ToolTrackingCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ToolTrackingCollection.Parent">
            <summary>
            <b>Get</b>
            <para>Gets the parent object of this CogToolTrackingCollection. </para>
            </summary>
            <returns>
            <para>Parent object of this CogToolTrackingCollection. Useful when determining an ICogTool's ancestry. </para>
            </returns>
            <summary>
            <b>Set</b>
            <para>Sets <see cref="P:Cognex.Vision.ToolTrackingCollection.Parent">Parent</see>. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Parent property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.ToolTrackingCollection.SfParent">SfParent</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ToolTrackingCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.ContainsKey(System.String)">
            <summary>
            <para>Determines whether this dictionary contains the specified <b>nameOrID</b>. </para>
            </summary>
            <param name="nameOrID">The name or ID to check. </param>
            <returns>
            <para>True if this dictionary contains <b>nameOrID</b>, otherwise False. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.Key(System.Int32)">
            <summary>
            <para>Get the key at the specified index. </para>
            </summary>
            <param name="index">The zero-based index to check. </param>
            <returns>
            <para>The key at the specified index. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.GetItemByKey(System.String)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>ByKey
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.TryGetValue(System.String,Cognex.Vision.ITool@)">
            <summary>
            <para>Get the item associated with the specified <b>nameOrID</b>. </para>
            </summary>
            <param name="nameOrID">The name or ID of the item to retrieve. </param>
            <param name="outValue">If the name or ID is found, this will be the value associated with that name or ID when this method returns. If the name or ID is NOT found, this will equal the input value. </param>
            <returns>
            <para>true if this dictionary contains an element with the specified name or ID, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.TryGetByIndex(System.Int32,System.String@,Cognex.Vision.ITool@)">
            <summary>
            <para>Get the key and value associated with the specified index. </para>
            </summary>
            <param name="index">The index of the key and value to retrieve. </param>
            <param name="outKey">If the index is valid, this will be the key associated with that index when this method returns. If the index is invalid, this will equal the input key. </param>
            <param name="outValue">If the index is valid, this will be the value associated with that index when this method returns. If the index is invalid, this will equal the input value. </param>
            <returns>
            <para>true if this dictionary contains a key and value at the specified index, else false. </para>
            </returns>
            <remarks>
            <para>An index is invalid if it is less than zero or is greater than or equal to Count. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.Add(Cognex.Vision.ITool)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolTrackingCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.ToolTrackingCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolTrackingCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.ToolTrackingCollection.Cleared">Cleared</see> Raises after the collection is cleared. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.Contains(Cognex.Vision.ITool)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.IndexOf(Cognex.Vision.ITool)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.Insert(System.Int32,Cognex.Vision.ITool)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolTrackingCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.ToolTrackingCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.setItem(System.Int32,Cognex.Vision.ITool)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolTrackingCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.ToolTrackingCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolTrackingCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.ToolTrackingCollection.MovedItem">MovedItem</see> Raises after the item is moved. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.Remove(Cognex.Vision.ITool)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolTrackingCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.ToolTrackingCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolTrackingCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.ToolTrackingCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.Remove(System.String)">
            <summary>
            <para>Remove the item with the specified <b>nameOrID</b> from this dictionary. </para>
            </summary>
            <param name="nameOrID">The name or ID of the item to remove from this dictionary. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.ToolTrackingCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.ToolTrackingCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.TrackingCollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.TrackingCollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity to be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.InsertFromToolTypeName(System.Int32,System.String)">
            <summary>
            <para>Insert a tool of the type specified by the input <b>toolTypeName</b>. Generate and assign this tool a unique name using its type. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the tool. Providing a value of -1 will insert at the end of this collection. </param>
            <param name="toolTypeName">The name of the type of tool to insert. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">If <b>toolTypeName</b> is not the name of a type of tool.</exception>
            <remarks>
            <para>See <see cref="M:Cognex.Vision.ToolTrackingCollection.GenerateUniqueToolName(System.String)">GenerateUniqueToolName</see> for details on how the tool's name is determined. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.GenerateUniqueToolName(System.String)">
            <summary>
            <para>Generates a unique name for the input tool type name. </para>
            </summary>
            <param name="toolTypeName">the tool type name to generate a unique name for. </param>
            <returns>
            <para>A string with the generated unique name. </para>
            </returns>
            <remarks>
            <para>For example, if the <b>toolTypeName</b> is "Cognex.Vision.ImageProcessing.HistogramTool", this will return the name "HistogramTool1". If there is already another tool with this name, then the function could return "HistogramTool2". </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.op_Equality(Cognex.Vision.ToolTrackingCollection,Cognex.Vision.ToolTrackingCollection)">
            <summary>Compares the equality of two ToolTrackingCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.op_Inequality(Cognex.Vision.ToolTrackingCollection,Cognex.Vision.ToolTrackingCollection)">
            <summary>Compares the inequality of two ToolTrackingCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.CopyTo(Cognex.Vision.ITool[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.ITool})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="M:Cognex.Vision.ToolTrackingCollection.Contains(System.Collections.Generic.KeyValuePair{System.String,Cognex.Vision.ITool})">
            <summary>
            <para>Determines whether this dictionary contains the specified <b>nameOrID</b>. </para>
            </summary>
            <param name="nameOrID">The name or ID to check. </param>
            <returns>
            <para>True if this dictionary contains <b>nameOrID</b>, otherwise False. </para>
            </returns>
        </member>
        <member name="T:Cognex.Vision.Transform2DComposed">
            <summary>
            <para>A <see cref="T:Cognex.Vision.Transform2DComposed">Transform2DComposed</see> is a transform object that can compose transforms of different types. The composed transform maps points through all its contained transformations (from 'Right' to 'Left'), and thus acts as their composition. </para>
            </summary>
            <remarks>
            <para>A 2D transform object that can <A href="../../en/UserGuide/Content/Topics/users-guide/vision-tools-guide/fixtures-calibration/coordinate-spaces-composed-transformation.htm">compose transforms</A> of different types. The composed transform maps points through all its contained transformations (from 'Right' to 'Left'), acting as their composition even if the individual transformations are not mathematically composable. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="E:Cognex.Vision.Transform2DComposed.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Transform2DComposed.Count">
            <summary>
            <para>Returns the number of transforms contained in this composed transform's sequence. This is the number of transforms that can be retrieved by the indexed Transform property. </para>
            </summary>
            <remarks>
            <para>This is the number of transforms that can be retrieved by the <see cref="M:Cognex.Vision.Transform2DComposed.GetTransform(System.Int32)">GetTransform</see> method. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Transform2DComposed.Linear">
            <summary>
            <para>Returns true if this is a linear transform. </para>
            </summary>
            <remarks>
            <para>This function always returns True if the transform is of type <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>; it may return True for other types if they implement a transformation that is mathematically equivalent to a linear transformation. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Transform2DComposed.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.BestFitLinearTransform(Cognex.Vision.Vect2Collection,System.Double@)">
            <summary>
            <para>Returns a new linear transform which best describes this transform over the given set of points. The points must be expressed in 'from' coordinates. </para>
            </summary>
            <param name="fromPoints">A collection of points, expressed in From coordinates, for which to apply. </param>
            <param name="rmsError">Sets it to the RMS error of the points against the returned linear transformation. A value of 0 indicates that the returned transformation exactly maps the points. Note that the RMS error is measured in <b>To</b> space. <b>
            </b>. is the Root Mean Square (RMS) unweighted Euclidian error between two sets of corresponding points. Set A is composed of the given points (in <b>From</b> space) after they have been mapped through this transform into <b>To</b> space. Set B is the same points after they have been mapped to <b>To</b> space using the <b>linear</b> transform returned by this function. </param>
            <exception cref="T:Cognex.Vision.TransformException">Too few points were provided to compute a best fit linear transform. </exception>
            <remarks>
            <para>Returns a new linear transform that best describes this transform over the given set of points. These points must be expressed in <b>From</b> coordinates. The returned transform is called the "best-fit linear transform" because it is guaranteed to produce the smallest RMSError of any linear transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.Canonize(System.Boolean)">
            <summary>
            <para>Returns the canonical form of this composed transform. This is the mathematically equivalent form that has the fewest number of transforms. If TypeSimplify is True, the returned type may be reduced to a type simpler than this. </para>
            </summary>
            <param name="typeSimplify">Specify False to force this function to return a transformation of type <see cref="T:Cognex.Vision.Transform2DComposed">Transform2DComposed</see>. If you specify True, then the returned transformation may be of a simpler type. </param>
            <remarks>
            <para>This is the mathematically equivalent form that has the fewest number of transforms. Canonization may include each of the following operations:<list type="bullet">
            <item>
            <description>If this <see cref="T:Cognex.Vision.Transform2DComposed">Transform2DComposed</see> contains other <see cref="T:Cognex.Vision.Transform2DComposed">Transform2DComposed</see> transformations (effectively a tree of transformations where the non-leaf nodes are composed transformations), the Canonical form will flatten this tree by arranging all the leaf nodes linearly within the canonical form of the composed transformation.</description>
            </item>
            <item>
            <description>Any adjacent transformations that are mathematically composable (such as <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> objects) are composed.</description>
            </item>
            <item>
            <description>If the effect of applying the preceding two operations is to produce a composed transformation that contains a single transformation, the Canonical form will be of that type (typically <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see> ). You can prevent this conversion by specifying False for the <b>typeSimplify</b> argument. </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.Compose(Cognex.Vision.ITransform2D)">
            <summary>
            <para>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side). </para>
            </summary>
            <param name="rightSide">The transformation to compose with this one. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>rightSide</b> is null. </exception>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.ComposeBase(Cognex.Vision.ITransform2D)">
            <summary>
            <para>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side). </para>
            </summary>
            <param name="rightSide">The transform object to compose with this one. </param>
            <remarks>
            <para>Returns a new transform that is the composition of this transform and the specified transform. This function performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.Compose(Cognex.Vision.Transform2DLinear)">Compose</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. However, this method returns the transform of most suitable type based on the types of the transform objects being composed. For example, if you compose two linear transforms, the resulting transform is linear. The order in which you compose transformations is important. If you have a transform that maps AFromB and another that maps BFromC, you compose the two to get a single transform that maps AFromC as follows: AFromB.ComposeBase(BFromC). You do <b>not</b> use: BFromC.ComposeBase(AFromB). </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.Copy">
            <summary>
            <para>Returns a new copy of this composed transform. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.CopyBase">
            <summary>
            <para>Returns a new copy of this transform. </para>
            </summary>
            <remarks>
            <para>Returns a copy of this transformation object. This function performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.Copy">Copy</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. The only difference is the type of the returned transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.GetTransform(System.Int32)">
            <summary>
            <para>Returns a reference to the transform at the specified index in the contained sequence. </para>
            </summary>
            <param name="index">The zero-based index of the transformation to return. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> is &lt; 0 or &gt; <see cref="P:Cognex.Vision.Transform2DComposed.Count">Count</see> -1 </exception>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.Invert">
            <summary>
            <para>Returns a new transform that is the inverse of this one. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.InvertBase">
            <summary>
            <para>Returns a new transform which is the inverse of this one. </para>
            </summary>
            <remarks>
            <para>Returns a transform that is the inverse of this transform. If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A. <see cref="M:Cognex.Vision.ITransform2D.InvertBase">InvertBase</see> performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.Invert">Invert</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. The only difference is the type of the returned transform. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.LinearTransform(System.Double,System.Double)">
            <summary>
            <para>Returns a new linear transform which best describes this transform at the given point. The point must be expressed in 'from' coordinates. </para>
            </summary>
            <param name="x">The x-coordinate for the point, expressed in <b>Fromcoordinates</b>. </param>
            <param name="y">The y-coordinate for the point, expressed in <b>From</b> coordinates. </param>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.MapPoint(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            <para>Maps the given x,y point through this transform, filling in the mapped x,y coordinates. </para>
            </summary>
            <param name="x">The x-coordinate of the original point in <b>From</b> space. </param>
            <param name="y">The y-coordinate of the original point in <b>From</b> space. </param>
            <param name="mappedX">The resulting mapped x-coordinate in <b>To</b> space. </param>
            <param name="mappedY">The resulting mapped y-coordinate in <b>To</b> space. </param>
            <remarks>
            <para>Maps the given <b>from</b> space point through this transform, filling in the mapped <b>to</b> space (x, y) coordinates. This method performs the same operation as the <see cref="M:Cognex.Vision.Transform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)">MapPoint</see> method of <see cref="T:Cognex.Vision.Transform2DLinear">Transform2DLinear</see>. This method is provided on both interfaces as a convenience to users. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.MapPoints(Cognex.Vision.Vect2Collection)">
            <summary>
            <para>Map the supplied points through this transform. </para>
            </summary>
            <param name="coordinatesXY">A row-major two dimensional array of X,Y point coordinates to be mapped. These elements must be of type double. </param>
            <remarks>
            <para>A row-major two dimensional array of the mapped X,Y point coordinates. The size of this array is equal to the size of the input array </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">If coordinatesXY is not an array of doubles. </exception>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.Merge(Cognex.Vision.Transform2DComposed,System.Boolean)">
            <summary>
            <para>Merges the RightSide composed transform into this composed transform, on right. This is the opposite of Split. If Copy is true, RightSide's contained transforms are added to the sequence by value, otherwise they are added by reference. </para>
            </summary>
            <param name="rightSide">The transformation to merge with this one. </param>
            <param name="copy">If true, the transformations within <b>rightSide</b> are copied into this object. Otherwise, they are added by reference. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the transformations are merged.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfCount">SfCount</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>rightSide</b> is null. </exception>
            <remarks>
            <para>Merges the supplied composed transformation with this one. The supplied transform is composed on the right side of this transformation. This function is the opposite of <see cref="M:Cognex.Vision.Transform2DComposed.Split(System.Int32)">Split</see>. If <b>copy</b> is true, the transformations contained within <b>rightSide</b> are added by value (copied). If <b>copy</b> is false, then they are added by reference. Unlike <see cref="M:Cognex.Vision.Transform2DComposed.Compose(Cognex.Vision.ITransform2D)">Compose</see>, this function modifies the state of this object; it does not return a new transformation. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.PopFromLeft">
            <summary>
            <para>Removes and returns the left-most transform from the contained sequence. Note that this will decrease the index of all remaining transforms in the contained sequence by one. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when a transformation is popped.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfCount">SfCount</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.TransformException">
            <see cref="P:Cognex.Vision.Transform2DComposed.Count">Count</see> is 0. </exception>
            <remarks>
            <para>Removes and returns the left-most transformation from the list of transformations in this object. Note that this will decrease the index of all remaining transforms in the contained sequence by one. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.PopFromRight">
            <summary>
            <para>Removes and returns the right-most transform from the contained sequence. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when a transformation is popped.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfCount">SfCount</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.TransformException">
            <see cref="P:Cognex.Vision.Transform2DComposed.Count">Count</see> is 0. </exception>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.PushOntoLeft(Cognex.Vision.ITransform2D,System.Boolean)">
            <summary>
            <para>Composes the LeftSide transform into this composed transform on the left. If Copy is True, the transform is added to the sequence by value, otherwise it's added by reference. Note that this will increase the index of all contained transforms by one. </para>
            </summary>
            <param name="leftSide">The transformation to push onto this one. </param>
            <param name="copy">If true, <b>leftSide</b> is copied into this object. Otherwise, it is added by reference. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when a transformation is pushed.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfCount">SfCount</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>leftSide</b> is null. </exception>
            <remarks>
            <para>Composes the <b>leftSide</b> transform into this composed transform on the left side of this transformation. If <b>copy</b> is true, the <b>leftSide</b> transformation is added by value (copied). If <b>copy</b> is false, then it is added by reference. Note that this will increase the index of all contained transforms by one. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.PushOntoLeft(Cognex.Vision.ITransform2D)">
            <summary>
            <para>Composes the LeftSide transform into this composed transform on the left. The transform is added to the sequence by copy. </para>
            </summary>
            <param name="leftSide">The transformation to push onto this one. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when a transformation is pushed.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfCount">SfCount</see>
            </description>
            </item>
            </list>
            </para>
            <para>Composes the <b>leftSide</b> transform into this composed transform on the left side of this transformation. Transformation is added by value (copied) Note that this will increase the index of all contained transforms by one. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.PushOntoRight(Cognex.Vision.ITransform2D,System.Boolean)">
            <summary>
            <para>Composes the RightSide transform into this composed transform on the right. If Copy is True, the transform is added to the sequence by value, otherwise it's added by reference. </para>
            </summary>
            <param name="rightSide">The transformation to push onto this one. </param>
            <param name="copy">If true, <b>rightSide</b> is copied into this object. Otherwise, it is added by reference. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when a transformation is pushed.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfCount">SfCount</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>rightSide</b> is null. </exception>
            <remarks>
            <para>Composes the <b>rightSide</b> transform into this composed transform on the right side of this transformation. If <b>copy</b> is true, the <b>rightSide</b> transformation is added by value (copied). If <b>copy</b> is false, then it is added by reference. Note that this will increase the index of all contained transforms by one. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.PushOntoRight(Cognex.Vision.ITransform2D)">
            <summary>
            <para>Composes the RightSide transform into this composed transform on the right. The transform is added to the sequence by copy. </para>
            </summary>
            <param name="rightSide">The transformation to push onto this one. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when a transformation is pushed.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfCount">SfCount</see>
            </description>
            </item>
            </list>
            </para>
            <para>Composes the <b>rightSide</b> transform into this composed transform on the right side of this transformation. Transformation is added by value (copied) Note that this will increase the index of all contained transforms by one. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.Replace(System.Int32,Cognex.Vision.ITransform2D,System.Boolean)">
            <summary>
            <para>Replaces the transform at the given index with the passed Replacement transform. If Copy is True, the Replacement transform is added by value, otherwise, it is added by reference. </para>
            </summary>
            <param name="index">The zero-based index of the transformation to replace. </param>
            <param name="replacement">The new transformation. </param>
            <param name="copy">If true, <b>replacement</b> is copied into this object. Otherwise, it is added by reference. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the transformation is replaced.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfCount">SfCount</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> is &lt; 0 or &gt; <see cref="P:Cognex.Vision.Transform2DComposed.Count">Count</see> -1 </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>replacement</b> is null. </exception>
            <remarks>
            <para>Replaces the specified transformation in this composed transformation's list of transformations with the supplied transformation. If <b>copy</b> is true, the <b>replacement</b> transformation is added by value (copied). If <b>copy</b> is false, then it is added by reference. This function returns the transformation being replaced. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.Split(System.Int32)">
            <summary>
            <para>Splits this composed transform into two composed transforms just before Index. This object becomes the left part and the right part is returned. </para>
            </summary>
            <param name="index">The zero-based index at which to split this transformation. Transforms with indices up to but not including <b>index</b> are retained in this object; the remaining transformations become the returned object. </param>
            <returns>
            <para>The returned transformation, which contains all transforms from this object with indices greater than or equal to <b>index</b>. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the transformation is split.<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfLinear">SfLinear</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Cognex.Vision.Transform2DComposed.SfCount">SfCount</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:Cognex.Vision.ArgumentException">
            <b>index</b> is &lt; 0 or &gt; <see cref="P:Cognex.Vision.Transform2DComposed.Count">Count</see> -1 </exception>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.op_Equality(Cognex.Vision.Transform2DComposed,Cognex.Vision.Transform2DComposed)">
            <summary>Compares the equality of two Transform2DComposed objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DComposed.op_Inequality(Cognex.Vision.Transform2DComposed,Cognex.Vision.Transform2DComposed)">
            <summary>Compares the inequality of two Transform2DComposed objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Transform2DLinearCollection">
            <summary>
            <para>Class which holds a collection of Transform2DLinears. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.Transform2DLinearCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DLinearCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DLinearCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DLinearCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DLinearCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DLinearCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DLinearCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DLinearCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DLinearCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DLinearCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DLinearCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinearCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinearCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinearCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Transform2DLinearCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.Add(Cognex.Vision.Transform2DLinear)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Transform2DLinearCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Transform2DLinearCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Transform2DLinearCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Transform2DLinearCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.Contains(Cognex.Vision.Transform2DLinear)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.IndexOf(Cognex.Vision.Transform2DLinear)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.Insert(System.Int32,Cognex.Vision.Transform2DLinear)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Transform2DLinearCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Transform2DLinearCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.setItem(System.Int32,Cognex.Vision.Transform2DLinear)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Transform2DLinearCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Transform2DLinearCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Transform2DLinearCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Transform2DLinearCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.Remove(Cognex.Vision.Transform2DLinear)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Transform2DLinearCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Transform2DLinearCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Transform2DLinearCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Transform2DLinearCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.op_Equality(Cognex.Vision.Transform2DLinearCollection,Cognex.Vision.Transform2DLinearCollection)">
            <summary>Compares the equality of two Transform2DLinearCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.op_Inequality(Cognex.Vision.Transform2DLinearCollection,Cognex.Vision.Transform2DLinearCollection)">
            <summary>Compares the inequality of two Transform2DLinearCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.CopyTo(Cognex.Vision.Transform2DLinear[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DLinearCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Transform2DLinear})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.Transform2DRigidCollection">
            <summary>
            <para>Class which holds a collection of Transform2DRigids. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.Transform2DRigidCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DRigidCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DRigidCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DRigidCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DRigidCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DRigidCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DRigidCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DRigidCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DRigidCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DRigidCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Transform2DRigidCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Transform2DRigidCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Transform2DRigidCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Transform2DRigidCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Transform2DRigidCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.Add(Cognex.Vision.Transform2DRigid)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Transform2DRigidCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Transform2DRigidCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Transform2DRigidCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Transform2DRigidCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.Contains(Cognex.Vision.Transform2DRigid)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.IndexOf(Cognex.Vision.Transform2DRigid)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.Insert(System.Int32,Cognex.Vision.Transform2DRigid)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Transform2DRigidCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Transform2DRigidCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.setItem(System.Int32,Cognex.Vision.Transform2DRigid)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Transform2DRigidCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Transform2DRigidCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Transform2DRigidCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Transform2DRigidCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.Remove(Cognex.Vision.Transform2DRigid)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Transform2DRigidCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Transform2DRigidCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Transform2DRigidCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Transform2DRigidCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.op_Equality(Cognex.Vision.Transform2DRigidCollection,Cognex.Vision.Transform2DRigidCollection)">
            <summary>Compares the equality of two Transform2DRigidCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.op_Inequality(Cognex.Vision.Transform2DRigidCollection,Cognex.Vision.Transform2DRigidCollection)">
            <summary>Compares the inequality of two Transform2DRigidCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.CopyTo(Cognex.Vision.Transform2DRigid[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Transform2DRigidCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Transform2DRigid})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.UInt16Collection">
            <summary>
            <para>Class which holds a collection of 16-bit unsigned integers. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.UInt16Collection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt16Collection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt16Collection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt16Collection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt16Collection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt16Collection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt16Collection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt16Collection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt16Collection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt16Collection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.UInt16Collection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.UInt16Collection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.UInt16Collection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.UInt16Collection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.UInt16Collection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.Add(System.UInt16)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.UInt16Collection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.UInt16Collection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.UInt16Collection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.UInt16Collection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.Contains(System.UInt16)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.IndexOf(System.UInt16)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.Insert(System.Int32,System.UInt16)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.UInt16Collection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.UInt16Collection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.setItem(System.Int32,System.UInt16)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.UInt16Collection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.UInt16Collection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.UInt16Collection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.UInt16Collection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.Remove(System.UInt16)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.UInt16Collection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.UInt16Collection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.UInt16Collection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.UInt16Collection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.op_Equality(Cognex.Vision.UInt16Collection,Cognex.Vision.UInt16Collection)">
            <summary>Compares the equality of two UInt16Collection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.op_Inequality(Cognex.Vision.UInt16Collection,Cognex.Vision.UInt16Collection)">
            <summary>Compares the inequality of two UInt16Collection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.CopyTo(System.UInt16[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.UInt16Collection.AddRange(System.Collections.Generic.IEnumerable{System.UInt16})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.Vect2SetCollection">
            <summary>
            <para>Class which holds a collection of <see cref="T:Cognex.Vision.Vect2Collection">Vect2Collection</see> objects. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.Vect2SetCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2SetCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2SetCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2SetCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2SetCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2SetCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2SetCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2SetCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2SetCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2SetCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Vect2SetCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Vect2SetCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Vect2SetCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Vect2SetCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Vect2SetCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.Add(Cognex.Vision.Vect2Collection)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Vect2SetCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Vect2SetCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Vect2SetCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Vect2SetCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.Contains(Cognex.Vision.Vect2Collection)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.IndexOf(Cognex.Vision.Vect2Collection)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.Insert(System.Int32,Cognex.Vision.Vect2Collection)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Vect2SetCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Vect2SetCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.setItem(System.Int32,Cognex.Vision.Vect2Collection)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Vect2SetCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Vect2SetCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Vect2SetCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Vect2SetCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.Remove(Cognex.Vision.Vect2Collection)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Vect2SetCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Vect2SetCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Vect2SetCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Vect2SetCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.op_Equality(Cognex.Vision.Vect2SetCollection,Cognex.Vision.Vect2SetCollection)">
            <summary>Compares the equality of two Vect2SetCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.op_Inequality(Cognex.Vision.Vect2SetCollection,Cognex.Vision.Vect2SetCollection)">
            <summary>Compares the inequality of two Vect2SetCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.CopyTo(Cognex.Vision.Vect2Collection[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Vect2SetCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Vect2Collection})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.GenericException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GenericException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.GenericException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GenericException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.GenericException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.GenericException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GenericException.op_Equality(Cognex.Vision.GenericException,Cognex.Vision.GenericException)">
            <summary>Compares the equality of two GenericException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.GenericException.op_Inequality(Cognex.Vision.GenericException,Cognex.Vision.GenericException)">
            <summary>Compares the inequality of two GenericException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.SecurityViolationException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.SecurityViolationException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.SecurityViolationException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SecurityViolationException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SecurityViolationException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.SecurityViolationException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.SecurityViolationException.op_Equality(Cognex.Vision.SecurityViolationException,Cognex.Vision.SecurityViolationException)">
            <summary>Compares the equality of two SecurityViolationException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.SecurityViolationException.op_Inequality(Cognex.Vision.SecurityViolationException,Cognex.Vision.SecurityViolationException)">
            <summary>Compares the inequality of two SecurityViolationException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.OutOfMemoryException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.OutOfMemoryException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.OutOfMemoryException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.OutOfMemoryException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.OutOfMemoryException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.OutOfMemoryException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.OutOfMemoryException.op_Equality(Cognex.Vision.OutOfMemoryException,Cognex.Vision.OutOfMemoryException)">
            <summary>Compares the equality of two OutOfMemoryException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.OutOfMemoryException.op_Inequality(Cognex.Vision.OutOfMemoryException,Cognex.Vision.OutOfMemoryException)">
            <summary>Compares the inequality of two OutOfMemoryException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.TimeoutExpiredException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.TimeoutExpiredException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.TimeoutExpiredException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.TimeoutExpiredException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.TimeoutExpiredException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.TimeoutExpiredException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.TimeoutExpiredException.op_Equality(Cognex.Vision.TimeoutExpiredException,Cognex.Vision.TimeoutExpiredException)">
            <summary>Compares the equality of two TimeoutExpiredException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.TimeoutExpiredException.op_Inequality(Cognex.Vision.TimeoutExpiredException,Cognex.Vision.TimeoutExpiredException)">
            <summary>Compares the inequality of two TimeoutExpiredException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.OperatorNotTrainedException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.OperatorNotTrainedException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.OperatorNotTrainedException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.OperatorNotTrainedException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.OperatorNotTrainedException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.OperatorNotTrainedException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.OperatorNotTrainedException.op_Equality(Cognex.Vision.OperatorNotTrainedException,Cognex.Vision.OperatorNotTrainedException)">
            <summary>Compares the equality of two OperatorNotTrainedException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.OperatorNotTrainedException.op_Inequality(Cognex.Vision.OperatorNotTrainedException,Cognex.Vision.OperatorNotTrainedException)">
            <summary>Compares the inequality of two OperatorNotTrainedException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.ArgumentNullException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ArgumentNullException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ArgumentNullException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ArgumentNullException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ArgumentNullException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.ArgumentNullException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ArgumentNullException.op_Equality(Cognex.Vision.ArgumentNullException,Cognex.Vision.ArgumentNullException)">
            <summary>Compares the equality of two ArgumentNullException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ArgumentNullException.op_Inequality(Cognex.Vision.ArgumentNullException,Cognex.Vision.ArgumentNullException)">
            <summary>Compares the inequality of two ArgumentNullException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.InvalidOperationException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.InvalidOperationException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.InvalidOperationException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.InvalidOperationException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.InvalidOperationException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.InvalidOperationException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.InvalidOperationException.op_Equality(Cognex.Vision.InvalidOperationException,Cognex.Vision.InvalidOperationException)">
            <summary>Compares the equality of two InvalidOperationException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.InvalidOperationException.op_Inequality(Cognex.Vision.InvalidOperationException,Cognex.Vision.InvalidOperationException)">
            <summary>Compares the inequality of two InvalidOperationException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.ArgumentException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ArgumentException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ArgumentException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ArgumentException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ArgumentException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.ArgumentException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ArgumentException.op_Equality(Cognex.Vision.ArgumentException,Cognex.Vision.ArgumentException)">
            <summary>Compares the equality of two ArgumentException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ArgumentException.op_Inequality(Cognex.Vision.ArgumentException,Cognex.Vision.ArgumentException)">
            <summary>Compares the inequality of two ArgumentException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.ArgumentOutOfRangeException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ArgumentOutOfRangeException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ArgumentOutOfRangeException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ArgumentOutOfRangeException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ArgumentOutOfRangeException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.ArgumentOutOfRangeException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ArgumentOutOfRangeException.op_Equality(Cognex.Vision.ArgumentOutOfRangeException,Cognex.Vision.ArgumentOutOfRangeException)">
            <summary>Compares the equality of two ArgumentOutOfRangeException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ArgumentOutOfRangeException.op_Inequality(Cognex.Vision.ArgumentOutOfRangeException,Cognex.Vision.ArgumentOutOfRangeException)">
            <summary>Compares the inequality of two ArgumentOutOfRangeException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.KeyNotFoundException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.KeyNotFoundException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.KeyNotFoundException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.KeyNotFoundException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.KeyNotFoundException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.KeyNotFoundException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.KeyNotFoundException.op_Equality(Cognex.Vision.KeyNotFoundException,Cognex.Vision.KeyNotFoundException)">
            <summary>Compares the equality of two KeyNotFoundException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.KeyNotFoundException.op_Inequality(Cognex.Vision.KeyNotFoundException,Cognex.Vision.KeyNotFoundException)">
            <summary>Compares the inequality of two KeyNotFoundException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.InternalErrorException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.InternalErrorException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.InternalErrorException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.InternalErrorException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.InternalErrorException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.InternalErrorException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.InternalErrorException.op_Equality(Cognex.Vision.InternalErrorException,Cognex.Vision.InternalErrorException)">
            <summary>Compares the equality of two InternalErrorException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.InternalErrorException.op_Inequality(Cognex.Vision.InternalErrorException,Cognex.Vision.InternalErrorException)">
            <summary>Compares the inequality of two InternalErrorException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.ImageException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ImageException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ImageException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ImageException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ImageException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.ImageException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ImageException.op_Equality(Cognex.Vision.ImageException,Cognex.Vision.ImageException)">
            <summary>Compares the equality of two ImageException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ImageException.op_Inequality(Cognex.Vision.ImageException,Cognex.Vision.ImageException)">
            <summary>Compares the inequality of two ImageException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.TransformException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.TransformException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.TransformException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.TransformException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.TransformException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.TransformException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.TransformException.op_Equality(Cognex.Vision.TransformException,Cognex.Vision.TransformException)">
            <summary>Compares the equality of two TransformException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.TransformException.op_Inequality(Cognex.Vision.TransformException,Cognex.Vision.TransformException)">
            <summary>Compares the inequality of two TransformException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.NotImplementedException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.NotImplementedException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.NotImplementedException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.NotImplementedException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.NotImplementedException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.NotImplementedException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.NotImplementedException.op_Equality(Cognex.Vision.NotImplementedException,Cognex.Vision.NotImplementedException)">
            <summary>Compares the equality of two NotImplementedException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.NotImplementedException.op_Inequality(Cognex.Vision.NotImplementedException,Cognex.Vision.NotImplementedException)">
            <summary>Compares the inequality of two NotImplementedException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.FileOpenException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.FileOpenException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.FileOpenException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.FileOpenException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.FileOpenException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.FileOpenException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.FileOpenException.op_Equality(Cognex.Vision.FileOpenException,Cognex.Vision.FileOpenException)">
            <summary>Compares the equality of two FileOpenException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.FileOpenException.op_Inequality(Cognex.Vision.FileOpenException,Cognex.Vision.FileOpenException)">
            <summary>Compares the inequality of two FileOpenException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.FileReadException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.FileReadException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.FileReadException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.FileReadException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.FileReadException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.FileReadException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.FileReadException.op_Equality(Cognex.Vision.FileReadException,Cognex.Vision.FileReadException)">
            <summary>Compares the equality of two FileReadException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.FileReadException.op_Inequality(Cognex.Vision.FileReadException,Cognex.Vision.FileReadException)">
            <summary>Compares the inequality of two FileReadException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.FileWriteException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.FileWriteException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.FileWriteException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.FileWriteException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.FileWriteException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.FileWriteException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.FileWriteException.op_Equality(Cognex.Vision.FileWriteException,Cognex.Vision.FileWriteException)">
            <summary>Compares the equality of two FileWriteException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.FileWriteException.op_Inequality(Cognex.Vision.FileWriteException,Cognex.Vision.FileWriteException)">
            <summary>Compares the inequality of two FileWriteException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.NoFileOpenException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.NoFileOpenException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.NoFileOpenException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.NoFileOpenException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.NoFileOpenException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.NoFileOpenException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.NoFileOpenException.op_Equality(Cognex.Vision.NoFileOpenException,Cognex.Vision.NoFileOpenException)">
            <summary>Compares the equality of two NoFileOpenException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.NoFileOpenException.op_Inequality(Cognex.Vision.NoFileOpenException,Cognex.Vision.NoFileOpenException)">
            <summary>Compares the inequality of two NoFileOpenException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.BadFileFormatException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.BadFileFormatException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.BadFileFormatException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.BadFileFormatException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.BadFileFormatException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.BadFileFormatException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.BadFileFormatException.op_Equality(Cognex.Vision.BadFileFormatException,Cognex.Vision.BadFileFormatException)">
            <summary>Compares the equality of two BadFileFormatException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.BadFileFormatException.op_Inequality(Cognex.Vision.BadFileFormatException,Cognex.Vision.BadFileFormatException)">
            <summary>Compares the inequality of two BadFileFormatException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.BadFileModeException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.BadFileModeException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.BadFileModeException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.BadFileModeException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.BadFileModeException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.BadFileModeException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.BadFileModeException.op_Equality(Cognex.Vision.BadFileModeException,Cognex.Vision.BadFileModeException)">
            <summary>Compares the equality of two BadFileModeException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.BadFileModeException.op_Inequality(Cognex.Vision.BadFileModeException,Cognex.Vision.BadFileModeException)">
            <summary>Compares the inequality of two BadFileModeException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.SpaceTreeException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.SpaceTreeException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.SpaceTreeException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SpaceTreeException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SpaceTreeException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.SpaceTreeException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.SpaceTreeException.op_Equality(Cognex.Vision.SpaceTreeException,Cognex.Vision.SpaceTreeException)">
            <summary>Compares the equality of two SpaceTreeException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.SpaceTreeException.op_Inequality(Cognex.Vision.SpaceTreeException,Cognex.Vision.SpaceTreeException)">
            <summary>Compares the inequality of two SpaceTreeException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.ShapeException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ShapeException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ShapeException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ShapeException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ShapeException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.ShapeException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ShapeException.op_Equality(Cognex.Vision.ShapeException,Cognex.Vision.ShapeException)">
            <summary>Compares the equality of two ShapeException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ShapeException.op_Inequality(Cognex.Vision.ShapeException,Cognex.Vision.ShapeException)">
            <summary>Compares the inequality of two ShapeException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.OperatorNoInputImageException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.OperatorNoInputImageException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.OperatorNoInputImageException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.OperatorNoInputImageException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.OperatorNoInputImageException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.OperatorNoInputImageException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.OperatorNoInputImageException.op_Equality(Cognex.Vision.OperatorNoInputImageException,Cognex.Vision.OperatorNoInputImageException)">
            <summary>Compares the equality of two OperatorNoInputImageException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.OperatorNoInputImageException.op_Inequality(Cognex.Vision.OperatorNoInputImageException,Cognex.Vision.OperatorNoInputImageException)">
            <summary>Compares the inequality of two OperatorNoInputImageException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.OperatorInvalidRegionException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.OperatorInvalidRegionException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.OperatorInvalidRegionException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.OperatorInvalidRegionException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.OperatorInvalidRegionException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.OperatorInvalidRegionException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.OperatorInvalidRegionException.op_Equality(Cognex.Vision.OperatorInvalidRegionException,Cognex.Vision.OperatorInvalidRegionException)">
            <summary>Compares the equality of two OperatorInvalidRegionException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.OperatorInvalidRegionException.op_Inequality(Cognex.Vision.OperatorInvalidRegionException,Cognex.Vision.OperatorInvalidRegionException)">
            <summary>Compares the inequality of two OperatorInvalidRegionException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.OperatorNoTrainImageException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.OperatorNoTrainImageException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.OperatorNoTrainImageException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.OperatorNoTrainImageException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.OperatorNoTrainImageException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.OperatorNoTrainImageException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.OperatorNoTrainImageException.op_Equality(Cognex.Vision.OperatorNoTrainImageException,Cognex.Vision.OperatorNoTrainImageException)">
            <summary>Compares the equality of two OperatorNoTrainImageException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.OperatorNoTrainImageException.op_Inequality(Cognex.Vision.OperatorNoTrainImageException,Cognex.Vision.OperatorNoTrainImageException)">
            <summary>Compares the inequality of two OperatorNoTrainImageException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.OperatorNoRunParamsException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.OperatorNoRunParamsException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.OperatorNoRunParamsException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.OperatorNoRunParamsException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.OperatorNoRunParamsException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.OperatorNoRunParamsException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.OperatorNoRunParamsException.op_Equality(Cognex.Vision.OperatorNoRunParamsException,Cognex.Vision.OperatorNoRunParamsException)">
            <summary>Compares the equality of two OperatorNoRunParamsException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.OperatorNoRunParamsException.op_Inequality(Cognex.Vision.OperatorNoRunParamsException,Cognex.Vision.OperatorNoRunParamsException)">
            <summary>Compares the inequality of two OperatorNoRunParamsException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.OperatorInvalidShapeException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.OperatorInvalidShapeException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.OperatorInvalidShapeException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.OperatorInvalidShapeException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.OperatorInvalidShapeException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.OperatorInvalidShapeException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.OperatorInvalidShapeException.op_Equality(Cognex.Vision.OperatorInvalidShapeException,Cognex.Vision.OperatorInvalidShapeException)">
            <summary>Compares the equality of two OperatorInvalidShapeException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.OperatorInvalidShapeException.op_Inequality(Cognex.Vision.OperatorInvalidShapeException,Cognex.Vision.OperatorInvalidShapeException)">
            <summary>Compares the inequality of two OperatorInvalidShapeException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.ToolNoOperatorException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ToolNoOperatorException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ToolNoOperatorException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolNoOperatorException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolNoOperatorException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.ToolNoOperatorException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ToolNoOperatorException.op_Equality(Cognex.Vision.ToolNoOperatorException,Cognex.Vision.ToolNoOperatorException)">
            <summary>Compares the equality of two ToolNoOperatorException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ToolNoOperatorException.op_Inequality(Cognex.Vision.ToolNoOperatorException,Cognex.Vision.ToolNoOperatorException)">
            <summary>Compares the inequality of two ToolNoOperatorException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.ToolNoResultException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ToolNoResultException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ToolNoResultException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolNoResultException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ToolNoResultException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.ToolNoResultException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ToolNoResultException.op_Equality(Cognex.Vision.ToolNoResultException,Cognex.Vision.ToolNoResultException)">
            <summary>Compares the equality of two ToolNoResultException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ToolNoResultException.op_Inequality(Cognex.Vision.ToolNoResultException,Cognex.Vision.ToolNoResultException)">
            <summary>Compares the inequality of two ToolNoResultException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.NoDataAvailableToProcessException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.NoDataAvailableToProcessException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.NoDataAvailableToProcessException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.NoDataAvailableToProcessException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.NoDataAvailableToProcessException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.NoDataAvailableToProcessException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.NoDataAvailableToProcessException.op_Equality(Cognex.Vision.NoDataAvailableToProcessException,Cognex.Vision.NoDataAvailableToProcessException)">
            <summary>Compares the equality of two NoDataAvailableToProcessException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.NoDataAvailableToProcessException.op_Inequality(Cognex.Vision.NoDataAvailableToProcessException,Cognex.Vision.NoDataAvailableToProcessException)">
            <summary>Compares the inequality of two NoDataAvailableToProcessException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.RegionSizeMismatchException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RegionSizeMismatchException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.RegionSizeMismatchException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RegionSizeMismatchException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.RegionSizeMismatchException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.RegionSizeMismatchException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RegionSizeMismatchException.op_Equality(Cognex.Vision.RegionSizeMismatchException,Cognex.Vision.RegionSizeMismatchException)">
            <summary>Compares the equality of two RegionSizeMismatchException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.RegionSizeMismatchException.op_Inequality(Cognex.Vision.RegionSizeMismatchException,Cognex.Vision.RegionSizeMismatchException)">
            <summary>Compares the inequality of two RegionSizeMismatchException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.SerializationException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.SerializationException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.SerializationException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SerializationException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.SerializationException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.SerializationException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.SerializationException.op_Equality(Cognex.Vision.SerializationException,Cognex.Vision.SerializationException)">
            <summary>Compares the equality of two SerializationException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.SerializationException.op_Inequality(Cognex.Vision.SerializationException,Cognex.Vision.SerializationException)">
            <summary>Compares the inequality of two SerializationException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.InvalidCastException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.InvalidCastException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.InvalidCastException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.InvalidCastException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.InvalidCastException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.InvalidCastException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.InvalidCastException.op_Equality(Cognex.Vision.InvalidCastException,Cognex.Vision.InvalidCastException)">
            <summary>Compares the equality of two InvalidCastException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.InvalidCastException.op_Inequality(Cognex.Vision.InvalidCastException,Cognex.Vision.InvalidCastException)">
            <summary>Compares the inequality of two InvalidCastException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.CompositeException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CompositeException.InnerException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CompositeException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.CompositeException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CompositeException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.CompositeException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.CompositeException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CompositeException.op_Equality(Cognex.Vision.CompositeException,Cognex.Vision.CompositeException)">
            <summary>Compares the equality of two CompositeException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.CompositeException.op_Inequality(Cognex.Vision.CompositeException,Cognex.Vision.CompositeException)">
            <summary>Compares the inequality of two CompositeException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.ScriptException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ScriptException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ScriptException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ScriptException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.ScriptException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.ScriptException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ScriptException.op_Equality(Cognex.Vision.ScriptException,Cognex.Vision.ScriptException)">
            <summary>Compares the equality of two ScriptException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.ScriptException.op_Inequality(Cognex.Vision.ScriptException,Cognex.Vision.ScriptException)">
            <summary>Compares the inequality of two ScriptException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.NotSupportedException">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.NotSupportedException.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.NotSupportedException.Message">
            <summary>
            </summary>
        </member>
        <member name="M:Cognex.Vision.NotSupportedException.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.NotSupportedException.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.NotSupportedException.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.NotSupportedException.op_Equality(Cognex.Vision.NotSupportedException,Cognex.Vision.NotSupportedException)">
            <summary>Compares the equality of two NotSupportedException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.NotSupportedException.op_Inequality(Cognex.Vision.NotSupportedException,Cognex.Vision.NotSupportedException)">
            <summary>Compares the inequality of two NotSupportedException objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.ColorConstants">
            <summary>
            <para>Implements a set of predefined colors. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.Black">
            <summary>
            </summary>
            <remarks>
            <para>Black </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.DarkRed">
            <summary>
            </summary>
            <remarks>
            <para>Dark Red </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.Red">
            <summary>
            </summary>
            <remarks>
            <para>Red </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.DarkGreen">
            <summary>
            </summary>
            <remarks>
            <para>Dark Green </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.Orange">
            <summary>
            </summary>
            <remarks>
            <para>Orange </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.Green">
            <summary>
            </summary>
            <remarks>
            <para>Green </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.Yellow">
            <summary>
            </summary>
            <remarks>
            <para>Yellow </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.DarkGrey">
            <summary>
            </summary>
            <remarks>
            <para>Dark Grey </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.Grey">
            <summary>
            </summary>
            <remarks>
            <para>Grey </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.LightGrey">
            <summary>
            </summary>
            <remarks>
            <para>Light Grey </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.Blue">
            <summary>
            </summary>
            <remarks>
            <para>Blue </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.Purple">
            <summary>
            </summary>
            <remarks>
            <para>Purple </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.Magenta">
            <summary>
            </summary>
            <remarks>
            <para>Magenta </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.Cyan">
            <summary>
            </summary>
            <remarks>
            <para>Cyan </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.White">
            <summary>
            </summary>
            <remarks>
            <para>White </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.ColorConstants.None">
            <summary>
            <para>Special color for hidden objects, or to indicate that no graphics should be drawn. </para>
            </summary>
            <remarks>
            <para>Special color for hidden objects, or to indicate that no graphics should be drawn. </para>
            </remarks>
        </member>
        <member name="T:Cognex.Vision.Serializer">
            <summary>
            <para>This class provides convenient functions for serializing Vision objects. It allows you to save (load) an object to (from) files or streams. You should use these functions for serializing all Vision objects. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Serializer.DeepCopyObject(Cognex.Rbbt.IObject)">
            <summary>
            <para>Make a deep copy of the supplied object. </para>
            </summary>
            <returns>
            <para>A deep copy of the input object. </para>
            </returns>
            <param name="originalPtr">The Vision object to be copied. </param>
            <exception cref="T:Cognex.Vision.SerializationException">An error occurred during serialization. </exception>
        </member>
        <member name="M:Cognex.Vision.Serializer.SaveObjectToFile(Cognex.Rbbt.IObject,System.String,Cognex.Vision.SerializerOptionsConstants)">
            <summary>
            <para>Save an object to a file, with option bits that cause fields to be selectively persisted. </para>
            </summary>
            <param name="obj">The object to save. </param>
            <param name="path">The path to the file. </param>
            <param name="option">The option bits specifying what should be persisted. </param>
            <exception cref="T:Cognex.Vision.FileOpenException">An error occurred while opening the specified file. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The supplied object reference is null. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The <b>path</b> argument is not a valid file name. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The <b>option</b> argument is not valid. </exception>
        </member>
        <member name="M:Cognex.Vision.Serializer.SaveObjectToFile(Cognex.Rbbt.IObject,System.String)">
            <summary>
            <para>Save an object to a file. </para>
            </summary>
            <param name="obj">The object to save. </param>
            <param name="path">The path to the file. </param>
            <exception cref="T:Cognex.Vision.FileOpenException">An error occurred while opening the specified file. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The supplied object reference is null. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The <b>path</b> argument is not a valid file name. </exception>
        </member>
        <member name="M:Cognex.Vision.Serializer.LoadObjectFromFile(System.String,Cognex.Vision.SerializerOptionsConstants)">
            <summary>
            <para>Load an object from a file, with option bits that cause fields to be selectively depersisted. </para>
            </summary>
            <param name="path">The path to the input file. </param>
            <param name="option">The option bits specifying what should be depersisted. </param>
            <returns>
            <para>The loaded object. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentException">The <b>path</b> argument is not a valid file name. </exception>
            <exception cref="T:Cognex.Vision.FileOpenException">An error occurred while opening the specified file. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The <b>option</b> argument is not valid. </exception>
        </member>
        <member name="M:Cognex.Vision.Serializer.LoadObjectFromFile(System.String)">
            <summary>
            <para>Load an object from a file. </para>
            </summary>
            <param name="path">The path to the input file. </param>
            <returns>
            <para>The loaded object. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentException">The <b>path</b> argument is not a valid file name. </exception>
            <exception cref="T:Cognex.Vision.FileOpenException">An error occurred while opening the specified file. </exception>
        </member>
        <member name="M:Cognex.Vision.Serializer.LoadObjectFromStream(System.IO.Stream)">
            <summary>
            <para>Load an object from a stream. </para>
            </summary>
            <param name="stream">The input stream. </param>
            <returns>
            <para>The loaded object. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Serializer.SaveObjectToStream(Cognex.Rbbt.IObject,System.IO.Stream)">
            <summary>
            <para>Save an object to a stream. </para>
            </summary>
            <param name="obj">The object to save. </param>
            <param name="stream">The output stream. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">The supplied object reference is null. </exception>
        </member>
        <member name="M:Cognex.Vision.Serializer.LoadObjectFromStream(System.IO.Stream,Cognex.Vision.SerializerOptionsConstants)">
            <summary>
            <para>Save an object to a stream. </para>
            </summary>
            <param name="obj">The object to save. </param>
            <param name="stream">The output stream. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">The supplied object reference is null. </exception>
        </member>
        <member name="M:Cognex.Vision.Serializer.SaveObjectToStream(Cognex.Rbbt.IObject,System.IO.Stream,Cognex.Vision.SerializerOptionsConstants)">
            <summary>
            <para>Load an object from a stream, with option bits that cause fields to be selectively depersisted. </para>
            </summary>
            <param name="stream">The input stream. </param>
            <param name="option">The option bits specifying what should be depersisted. </param>
            <returns>
            <para>The loaded object. </para>
            </returns>
            <exception cref="T:Cognex.Vision.SerializationException">An error occurred during deserialization. </exception>
        </member>
        <member name="M:Cognex.Vision.Serializer.SaveObjectToBytes(Cognex.Rbbt.IObject,Cognex.Vision.SerializerOptionsConstants)">
            <summary>
            <para>Save an object to bytes. </para>
            </summary>
            <param name="obj">The object to save. </param>
            <returns>
            <para>The bytes. </para>
            </returns>
            <param name="option">The option bits specifying what should be persisted. <b>Default Value: </b>
            <see cref="F:Cognex.Vision.SerializerOptionsConstants.All">Cognex.Vision.SerializerOptionsConstants.All</see>. </param>
            <exception cref="T:Cognex.Vision.ArgumentException">The supplied object reference is null. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The <b>option</b> argument is not valid. </exception>
        </member>
        <member name="M:Cognex.Vision.Serializer.LoadObjectFromBytes(Cognex.Vision.UInt8Collection,Cognex.Vision.SerializerOptionsConstants)">
            <summary>
            <para>Load an object from bytes. </para>
            </summary>
            <param name="bytes">The input bytes. </param>
            <param name="option">The option bits specifying what should be depersisted.</param>
            <returns>
            <para>The loaded object.</para>
            </returns>
            <exception cref="T:Cognex.Vision.SerializationException">An error occurred during deserialization. </exception>
            <exception cref="T:Cognex.Vision.ArgumentNullException">When the input byte collection is null. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The <b>option</b> argument is not valid.</exception>
            <value>
            <b>Default Value: </b>
            <see cref="F:Cognex.Vision.SerializerOptionsConstants.All">Cognex.Vision.SerializerOptionsConstants.All</see>. </value>
        </member>
        <member name="M:Cognex.Vision.Serializer.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Serializer.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Serializer.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Serializer.op_Equality(Cognex.Vision.Serializer,Cognex.Vision.Serializer)">
            <summary>Compares the equality of two Serializer objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Serializer.op_Inequality(Cognex.Vision.Serializer,Cognex.Vision.Serializer)">
            <summary>Compares the inequality of two Serializer objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfstring">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfstring.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfstring.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfstring.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfstring.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfstring.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfstring.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfstring.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfstring.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfstring.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfstring.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfstring.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfstring.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfstring.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfstring.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfstring.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfstring.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfstring.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfstring.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfstring.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfvariant">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfvariant.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfvariant.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfvariant.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfvariant.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfvariant.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfvariant.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfvariant.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfvariant.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfvariant.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfvariant.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfvariant.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfvariant.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfvariant.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfvariant.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfvariant.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfvariant.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfvariant.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfvariant.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfvariant.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.ITrackingCollectionTrackedItem">
            <summary>
            <para>Items in a tracking collection must implement this interface. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ITrackingCollectionTrackedItem.NameChanging">
            <summary>
            <para>This event is raised when the <see cref="P:Cognex.Vision.Implementation.ITrackingCollectionTrackedItem.Name">Name</see> is about to change. Note that this is a cancellable event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ITrackingCollectionTrackedItem.ID">
            <summary>
            <para>Gets the ID of the tracked item. </para>
            </summary>
            <remarks>
            <para>
            <para>The ID holds a GUID string which identifies a particular tracked item instance. A new GUID is created and assigned to the ID property when the tracked item is constructed.</para>
            <para>The ID property may be used as an index into the containing tracking collection. The ID property provides an unchanging path to the tracked object for use in linking / data binding.</para>
            <para>The ID property is serialized. Deserializing a tracked object will result in a new object instance with the same ID as the original. This is desirable so that links / data binding that use the ID property in their paths will continue to work after deserialization.</para>
            <para>This means that it is possible to create multiple tracked items with the same ID property. However, the ID field will always be unique within a containing tracking collection. </para>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Implementation.ITrackingCollectionTrackedItem.Name">
            <summary>
            <b>Get</b>
            <para>Get the name of the tracked item. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Set the <see cref="P:Cognex.Vision.Implementation.ITrackingCollectionTrackedItem.Name">Name</see>. </para>
            </summary>
            <remarks>
            <para>The name may be used to index into the containing tracking collection. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property has changed.</para>
            </remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ITrackingCollectionTrackedItem.NameChanging">NameChanging</see> Raised when the value of this property is about to change. Note that this is a cancellable event.</para>
            <exception cref="T:Cognex.Vision.ArgumentException">If the name is not a valid.NET variable name. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">If the name is not unique within the containing tracking collection. </exception>
        </member>
        <member name="P:Cognex.Vision.Implementation.ITrackingCollectionTrackedItem.Parent">
            <summary>
            <b>Get</b>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>For Cognex Internal Use Only. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.TrackedItemBase">
            <summary>
            <para>Base class for any class that will eventually implement <see cref="T:Cognex.Vision.Implementation.ITrackingCollectionTrackedItem">ITrackingCollectionTrackedItem</see>. </para>
            </summary>
            <remarks>
            <para>Provides common state flags for all <see cref="T:Cognex.Vision.Implementation.ITrackingCollectionTrackedItem">ITrackingCollectionTrackedItem</see> implementers. </para>
            </remarks>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackedItemBase.NameChanging">
            <summary>
            <para>This event is raised when the <see cref="P:Cognex.Vision.Implementation.TrackedItemBase.Name">Name</see> is about to change. Note that this is a cancellable event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.TrackedItemBase.ID">
            <summary>
            <para>Gets the ID of the tracked item. </para>
            </summary>
            <remarks>
            <para>
            <para>The ID holds a GUID string which identifies a particular tracked item instance. A new GUID is created and assigned to the ID property when the tracked item is constructed.</para>
            <para>The ID property may be used as an index into the containing tracking collection. The ID property provides an unchanging path to the tracked object for use in linking / data binding.</para>
            <para>The ID property is serialized. Deserializing a tracked object will result in a new object instance with the same ID as the original. This is desirable so that links / data binding that use the ID property in their paths will continue to work after deserialization.</para>
            <para>This means that it is possible to create multiple tracked items with the same ID property. However, the ID field will always be unique within a containing tracking collection. </para>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Implementation.TrackedItemBase.Name">
            <summary>
            <b>Get</b>
            <para>Get the name of the tracked item. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Set the <see cref="P:Cognex.Vision.Implementation.TrackedItemBase.Name">Name</see>. </para>
            </summary>
            <remarks>
            <para>The name may be used to index into the containing tracking collection. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property has changed.</para>
            </remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ITrackingCollectionTrackedItem.NameChanging">NameChanging</see> Raised when the value of this property is about to change. Note that this is a cancellable event.</para>
            <exception cref="T:Cognex.Vision.ArgumentException">If the name is not a valid.NET variable name. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">If the name is not unique within the containing tracking collection. </exception>
        </member>
        <member name="P:Cognex.Vision.Implementation.TrackedItemBase.Parent">
            <summary>
            <b>Get</b>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>For Cognex Internal Use Only. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.TrackedItemBase.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.TrackedItemBase.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.TrackedItemBase.op_Equality(Cognex.Vision.Implementation.TrackedItemBase,Cognex.Vision.Implementation.TrackedItemBase)">
            <summary>Compares the equality of two TrackedItemBase objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.TrackedItemBase.op_Inequality(Cognex.Vision.Implementation.TrackedItemBase,Cognex.Vision.Implementation.TrackedItemBase)">
            <summary>Compares the inequality of two TrackedItemBase objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Implementation.ToolPin">
            <summary>
            <para>Class used to expose Tool Input and Output data for linking in the GUI. </para>
            </summary>
            <para>Configure the ToolPins contained within a Tool's <see cref="P:Cognex.Vision.ITool.Inputs">Inputs</see> and <see cref="P:Cognex.Vision.ITool.Outputs">Outputs</see> properties to configure/ control which ToolProperties are exposed as Pins (Pins are generally used for interaction with the GUI). </para>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.#ctor(System.String)">
            <summary>
            <para>Constructs a <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> with the given name and path. </para>
            </summary>
            <param name="nameAndPath">Value to use for both the Pin's <see cref="P:Cognex.Vision.Implementation.ToolPin.Name">Name</see> and <see cref="P:Cognex.Vision.Implementation.ToolPin.Path">Path</see>
            </param>
            <remarks>
            <para>Note: This constructor creates a <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> with <see cref="P:Cognex.Vision.Implementation.ToolPin.Mode">Mode</see> set to <see cref="F:Cognex.Vision.PinModeConstants.FetchValue">FetchValue</see> and is meant for use with Inputs and Outputs of Tools which are <b>not</b> ToolBlocks. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.#ctor(System.String,System.String)">
            <summary>
            <para>Constructs a <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> with the given name and path. </para>
            </summary>
            <param name="name">Value to use for the Pin's <see cref="P:Cognex.Vision.Implementation.ToolPin.Name">Name</see>
            </param>
            <param name="path">Value to use for the Pin's <see cref="P:Cognex.Vision.Implementation.ToolPin.Path">Path</see>
            </param>
            <remarks>
            <para>Note: This constructor creates a <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> with <see cref="P:Cognex.Vision.Implementation.ToolPin.Mode">Mode</see> set to <see cref="F:Cognex.Vision.PinModeConstants.FetchValue">FetchValue</see> and is meant for use with Inputs and Outputs of Tools which are <b>not</b> ToolBlocks. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.#ctor(System.String,Cognex.Vision.Meta.TypeMeta)">
            <summary>
            <para>Constructs a <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> with the given name and pinType. </para>
            </summary>
            <param name="name">Value to use for the Pin's <see cref="P:Cognex.Vision.Implementation.ToolPin.Name">Name</see>
            </param>
            <param name="pinType">Value to use for the Pin's <see cref="P:Cognex.Vision.Implementation.ToolPin.PinType">PinType</see>
            </param>
            <remarks>
            <para>Note: This constructor creates a <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> with <see cref="P:Cognex.Vision.Implementation.ToolPin.Mode">Mode</see> set to <see cref="F:Cognex.Vision.PinModeConstants.StoreValue">StoreValue</see> and is meant for use with a ToolBlock's Inputs and Outputs collection. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.#ctor(System.String,System.Object)">
            <summary>
            <para>Constructs a <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> with the given name and value. </para>
            </summary>
            <param name="name">Value to use for the Pin's <see cref="P:Cognex.Vision.Implementation.ToolPin.Name">Name</see>
            </param>
            <param name="value">Value to use for the Pin's <see cref="P:Cognex.Vision.Implementation.ToolPin.Value">Value</see>
            </param>
            <remarks>
            <para>Note: This constructor creates a <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> with <see cref="P:Cognex.Vision.Implementation.ToolPin.Mode">Mode</see> set to <see cref="F:Cognex.Vision.PinModeConstants.StoreValue">StoreValue</see> and is meant for use with a ToolBlock's Inputs and Outputs collection. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.#ctor(System.String,Cognex.Vision.Meta.TypeMeta,System.Object)">
            <summary>
            <para>Constructs a <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> with the given name and value. </para>
            </summary>
            <param name="name">Value to use for the Pin's <see cref="P:Cognex.Vision.Implementation.ToolPin.Name">Name</see>
            </param>
            <param name="pinType">Value to use for the Pin's <see cref="P:Cognex.Vision.Implementation.ToolPin.PinType">PinType</see>
            </param>
            <param name="value">Value to use for the Pin's <see cref="P:Cognex.Vision.Implementation.ToolPin.Value">Value</see>
            </param>
            <remarks>
            <para>Note: This constructor creates a <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> with <see cref="P:Cognex.Vision.Implementation.ToolPin.Mode">Mode</see> set to <see cref="F:Cognex.Vision.PinModeConstants.StoreValue">StoreValue</see> and is meant for use with a ToolBlock's Inputs and Outputs collection. </para>
            </remarks>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPin.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPin.NameChanging">
            <summary>
            <para>This event is raised when the <see cref="P:Cognex.Vision.Implementation.TrackedItemBase.Name">Name</see> is about to change. Note that this is a cancellable event. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPin.Mode">
            <summary>
            <para>Gets/sets whether the <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> has dedicated storage for its value or fetches its value from the given <see cref="P:Cognex.Vision.Implementation.ToolPin.Path">Path</see> of the Tool. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPin.Name">
            <summary>
            <b>Get</b>
            <para>Gets the name of the pin. </para>
            </summary>
            <para>The <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see>'s Name appears in the GUI and can be changed at anytime without affecting ToolBlock Links. </para>
            <summary>
            <b>Set</b>
            <para>Gets the name of the pin. </para>
            </summary>
            <para>The <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see>'s Name appears in the GUI and can be changed at anytime without affecting ToolBlock Links. </para>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPin.Path">
            <summary>
            <b>Get</b>
            <para>Gets/sets the string path to the property of the Tool which this pin exposes. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Gets/sets the string path to the property of the Tool which this pin exposes. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPin.PinType">
            <summary>
            <para>Gets the type of the <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see>'s value, used when determining compatibility of two pins for linking. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPin.Value">
            <summary>
            <b>Get</b>
            <para>Gets/sets the actual value that this <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> exposes. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Gets/sets the actual value that this <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> exposes. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPin.ID">
            <summary>
            <para>Gets the ID of the tracked item. </para>
            </summary>
            <remarks>
            <para>
            <para>The ID holds a GUID string which identifies a particular tracked item instance. A new GUID is created and assigned to the ID property when the tracked item is constructed.</para>
            <para>The ID property may be used as an index into the containing tracking collection. The ID property provides an unchanging path to the tracked object for use in linking / data binding.</para>
            <para>The ID property is serialized. Deserializing a tracked object will result in a new object instance with the same ID as the original. This is desirable so that links / data binding that use the ID property in their paths will continue to work after deserialization.</para>
            <para>This means that it is possible to create multiple tracked items with the same ID property. However, the ID field will always be unique within a containing tracking collection. </para>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPin.Parent">
            <summary>
            <para>Return a reference to the containing tracking collection. May be null. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPin.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.AddLink(Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Adds a link between this pin and pinToLink. </para>
            </summary>
            <remarks>
            <para>To be linkable two pins must:<list type="bullet">
            <item>
            <description>Be within the same ToolBlock scope determined by their <see cref="M:Cognex.Vision.Implementation.ToolPin.GetContainerAsILinkManager">owner</see>
            </description>
            </item>
            <item>
            <description>Have compatible directionality (one pin must be a valid link source and the other must be a valid link destination)</description>
            </item>
            <item>
            <description>Be of compatible types (Image to Image, double to double, etc...) </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.CanLink(Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Determines if two pins can be linked. </para>
            </summary>
            <remarks>
            <para>To be linkable two pins must:<list type="bullet">
            <item>
            <description>Be within the same ToolBlock scope determined by their <see cref="M:Cognex.Vision.Implementation.ToolPin.GetContainerAsILinkManager">owner</see>
            </description>
            </item>
            <item>
            <description>Have compatible directionality (one pin must be a valid link source and the other must be a valid link destination)</description>
            </item>
            <item>
            <description>Be of compatible types (Image to Image, double to double, etc...) </description>
            </item>
            </list>
            </para>
            </remarks>
            <returns>
            <para>True if the this pin can be linked to pin, otherwise false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.GetLinkablePins">
            <summary>
            <para>Gets all the pins that may be linked with this pin. </para>
            </summary>
            <remarks>
            <para>To be linkable two pins must:<list type="bullet">
            <item>
            <description>Be within the same ToolBlock scope determined by their <see cref="M:Cognex.Vision.Implementation.ToolPin.GetContainerAsILinkManager">owner</see>
            </description>
            </item>
            <item>
            <description>Have compatible directionality (one pin must be a valid link source and the other must be a valid link destination)</description>
            </item>
            <item>
            <description>Be of compatible types (Image to Image, double to double, etc...) </description>
            </item>
            </list>
            </para>
            </remarks>
            <returns>
            <para>A Collection of pins that can be linked to this <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see>
            </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.GetLinkedPins">
            <summary>
            <para>Gets all the pins that are linked to/from this pin. </para>
            </summary>
            <returns>
            <para>Collection of linked pins </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.GetLinkedPins(Cognex.Vision.LinkStateConstants)">
            <summary>
            <para>Gets all the pins that are linked to/from this pin that match the given linkState. </para>
            </summary>
            <param name="linkState">Filter to only return links which match the given linkState(s) </param>
            <returns>
            <para>Collection of linked pins that match the linkState </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.GetContainerAsILinkManager">
            <summary>
            <para>Get the container which contains the Tool which contains this <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see>. </para>
            </summary>
            <returns>
            <para>The owning class implementing <see cref="T:Cognex.Vision.Implementation.ILinkManager">ILinkManager</see>, or nullptr if this <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> is not currently part of a Tool contained within a <see cref="T:Cognex.Vision.Implementation.ILinkManager">ILinkManager</see>
            </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.GetToolOwner">
            <summary>
            <para>Gets the Tool which contains this pin. </para>
            </summary>
            <returns>
            <para>The owning Tool, or nullptr if this pin is not currently part of a Tool contained within a ToolBlock </para>
            </returns>
            <remarks>
            <para>
            <para>A pin is owned by a Tool if it is a member of that Tool's Inputs or Outputs collection.</para>
            <para>A pin may only be owned by a single Tool at one time. Note: the owning Tool may actually be a ToolBlock. </para>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.IsInput">
            <summary>
            <para>Gets whether the pin is an input. </para>
            </summary>
            <returns>
            <para>True if the pin is a member of the <see cref="P:Cognex.Vision.ITool.Inputs">Cognex.Vision.ITool.Inputs</see> collection of a ToolOwner, otherwise false </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.IsOutput">
            <summary>
            <para>Gets whether the pin is an output. </para>
            </summary>
            <returns>
            <para>True if the pin is a member of the <see cref="P:Cognex.Vision.ITool.Outputs">Cognex.Vision.ITool.Outputs</see> collection of a ToolOwner, otherwise false </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.RemoveLink(Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Removes any links from this <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> to/from the <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> provided as an argument. </para>
            </summary>
            <returns>
            <para>True if a link was successfully removed, otherwise false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.RemoveLinks">
            <summary>
            <para>Removes all links from this <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> to/from any other ToolPins. </para>
            </summary>
            <returns>
            <para>The number of links that were removed. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.IsValidName(System.String,Cognex.Vision.PinModeConstants)">
            <summary>
            <para>COGNEX INTERNAL USE ONLY. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.CheckTypeCompatibilty(Cognex.Vision.Meta.TypeMeta,Cognex.Vision.Meta.TypeMeta)">
            <summary>
            <para>Check two Vision types for compatibility. </para>
            </summary>
            <returns>
            <para>True if the two types are compatible (can be assigned via a ToolBlock link), otherwise false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.op_Equality(Cognex.Vision.Implementation.ToolPin,Cognex.Vision.Implementation.ToolPin)">
            <summary>Compares the equality of two ToolPin objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPin.op_Inequality(Cognex.Vision.Implementation.ToolPin,Cognex.Vision.Implementation.ToolPin)">
            <summary>Compares the inequality of two ToolPin objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfToolPinPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfToolPinPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfToolPinPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfToolPinPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfToolPinPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfToolPinPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfToolPinPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfToolPinPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfToolPinPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfToolPinPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfToolPinPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfToolPinPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfToolPinPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfToolPinPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfToolPinPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfToolPinPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfToolPinPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfToolPinPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfToolPinPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfToolPinPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.ToolPinCollection">
            <summary>
            <para>Collection of ToolPins. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.#ctor">
            <summary>
            <para>Constructs an instance of <see cref="T:Cognex.Vision.Implementation.ToolPinCollection">ToolPinCollection</see>. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs an instance of <see cref="T:Cognex.Vision.Implementation.ToolPinCollection">ToolPinCollection</see>. </para>
            </summary>
            <param name="minimumCapacity">initial minimum capacity </param>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPinCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPinCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPinCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPinCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.Add(Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Implementation.ToolPinCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Implementation.ToolPinCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.Contains(Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.IndexOf(Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.Insert(System.Int32,Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Implementation.ToolPinCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.setItem(System.Int32,Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Implementation.ToolPinCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Implementation.ToolPinCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.Remove(Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Implementation.ToolPinCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Implementation.ToolPinCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.op_Equality(Cognex.Vision.Implementation.ToolPinCollection,Cognex.Vision.Implementation.ToolPinCollection)">
            <summary>Compares the equality of two ToolPinCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.op_Inequality(Cognex.Vision.Implementation.ToolPinCollection,Cognex.Vision.Implementation.ToolPinCollection)">
            <summary>Compares the inequality of two ToolPinCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.CopyTo(Cognex.Vision.Implementation.ToolPin[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Implementation.ToolPin})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.Implementation.ILinkManager">
            <summary>
            <para>This interface is implemented by tool containers. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ILinkManager.AddLink(Cognex.Vision.Implementation.ToolPin,Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Adds a link between pinA and pinB to the LinkManager. </para>
            </summary>
            <param name="pinA">A pin to link </param>
            <param name="pinB">Another pin to link </param>
            <exception cref="T:Cognex.Vision.InvalidOperationException">if:<list type="bullet">
            <item>
            <description>pinA or pinB is null</description>
            </item>
            <item>
            <description>pinA or pinB are have incompatible PinTypes</description>
            </item>
            <item>
            <description>pinA and pinB are both source pins</description>
            </item>
            <item>
            <description>pinA and pinB are both destination pins</description>
            </item>
            <item>
            <description>pinA and pinB are not part of the same LinkManager scope </description>
            </item>
            </list>
            </exception>
            <returns>
            <para>true if a Link was successfully created </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ILinkManager.CanLink(Cognex.Vision.Implementation.ToolPin,Cognex.Vision.Implementation.ToolPin,System.Boolean)">
            <summary>
            <para>Returns true if pinA and pinB are compatible meaning pinA and pinB can be linked. </para>
            </summary>
            <param name="pinA">A pin to link </param>
            <param name="pinB">Another pin to link </param>
            <param name="throwIfFalse">Throw a helpful exception if the two pins cannot be linked </param>
            <exception cref="T:Cognex.Vision.InvalidOperationException">if:<list type="bullet">
            <item>
            <description>pinA or pinB is null</description>
            </item>
            <item>
            <description>pinA or pinB are have incompatible PinTypes</description>
            </item>
            <item>
            <description>pinA and pinB are both source pins</description>
            </item>
            <item>
            <description>pinA and pinB are both destination pins</description>
            </item>
            <item>
            <description>pinA and pinB are not part of the same LinkManager scope </description>
            </item>
            </list>
            </exception>
            <returns>
            <para>true if the two pins can be successfully linked </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ILinkManager.RemoveLink(Cognex.Vision.Implementation.ToolPin,Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Remove a link between pinA and pinB from the LinkManager. </para>
            </summary>
            <param name="pinA">A pin to unlink </param>
            <param name="pinB">Another pin to unlink </param>
            <returns>
            <para>true if the two pins were successfully unlinked </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ILinkManager.RemoveLinks(Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Remove all links between the given pin and all other pins. </para>
            </summary>
            <param name="pin">A pin to unlink </param>
            <returns>
            <para>The number of links that were removed from the LinkManager </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ILinkManager.RemoveLinks(Cognex.Vision.ITool)">
            <summary>
            <para>Remove all links between the pins of the given tool arguments and all other pins. </para>
            </summary>
            <param name="tool">A tool to unlink </param>
            <returns>
            <para>The number of links that were removed from the LinkManager </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ILinkManager.RemoveAllLinks">
            <summary>
            <para>Remove all links owned by this LinkManager. </para>
            </summary>
            <returns>
            <para>The number of links that were removed from the LinkManager </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ILinkManager.GetLinkablePins(Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Return a snapshot collection of all the pins that are compatible with the given pin argument. Compatible pins may be linked to the given pin argument. </para>
            </summary>
            <param name="pin">The pin to use when searching for compatible pins </param>
            <remarks>
            <para>Note: Adding or removing items from the returned collection has no impact, however, modifying the actual pins in the returned collection will modify the LinkManager </para>
            </remarks>
            <returns>
            <para>Snapshot collection of all pins that can be linked to or from the given pin argument </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ILinkManager.GetLinkedPins(Cognex.Vision.Implementation.ToolPin,Cognex.Vision.LinkStateConstants)">
            <summary>
            <para>Returns a snapshot collection of all the pins linked to or from the pin argument. </para>
            </summary>
            <param name="pin">The pin to use when searching for links </param>
            <param name="linkState">Only return pins with links that match the linkState flags </param>
            <remarks>
            <para>Note: Adding or removing items from the returned collection has no impact, however, modifying the actual pins in the returned collection will modify the LinkManager </para>
            </remarks>
            <returns>
            <para>Snapshot collection of all pins currently linked to or from the pin argument </para>
            </returns>
        </member>
        <member name="T:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.GetItemByKey(System.String)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>ByKey
        </member>
        <member name="M:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.TrackingCollectionOfToolPinPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.ToolPinTrackingCollection">
            <summary>
            <para>ToolPinTracking Collection is a "live" Collection that holds a Tool's <see cref="P:Cognex.Vision.ITool.Inputs">Inputs</see> or <see cref="P:Cognex.Vision.ITool.Outputs">Outputs</see>. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.#ctor">
            <summary>
            <para>Constructs a <see cref="T:Cognex.Vision.Implementation.ToolPinTrackingCollection">ToolPinTrackingCollection</see> instance. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.#ctor(Cognex.Vision.PinModeConstants)">
            <summary>
            <para>Constructs a <see cref="T:Cognex.Vision.Implementation.ToolPinTrackingCollection">ToolPinTrackingCollection</see> instance with the given pinMode. </para>
            </summary>
            <param name="pinMode">Set to <see cref="F:Cognex.Vision.PinModeConstants.FetchValue">Cognex.Vision.PinModeConstants.FetchValue</see> when used with a "regular" Tool and <see cref="F:Cognex.Vision.PinModeConstants.StoreValue">Cognex.Vision.PinModeConstants.StoreValue</see> when used with a ToolBlock. </param>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPinTrackingCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPinTrackingCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPinTrackingCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPinTrackingCollection.Parent">
            <summary>
            <b>Get</b>
            <para>The Tool that owns or holds this collection of Pins. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>The Tool that owns or holds this collection of Pins. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPinTrackingCollection.PinMode">
            <summary>
            <para>Gets the PinMode of this PinCollection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolPinTrackingCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.ContainsKey(System.String)">
            <summary>
            <para>Determines whether this dictionary contains the specified <b>nameOrID</b>. </para>
            </summary>
            <param name="nameOrID">The name or ID to check. </param>
            <returns>
            <para>True if this dictionary contains <b>nameOrID</b>, otherwise False. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.Key(System.Int32)">
            <summary>
            <para>Get the key at the specified index. </para>
            </summary>
            <param name="index">The zero-based index to check. </param>
            <returns>
            <para>The key at the specified index. </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.GetItemByKey(System.String)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>ByKey
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.TryGetValue(System.String,Cognex.Vision.Implementation.ToolPin@)">
            <summary>
            <para>Get the item associated with the specified <b>nameOrID</b>. </para>
            </summary>
            <param name="nameOrID">The name or ID of the item to retrieve. </param>
            <param name="outValue">If the name or ID is found, this will be the value associated with that name or ID when this method returns. If the name or ID is NOT found, this will equal the input value. </param>
            <returns>
            <para>true if this dictionary contains an element with the specified name or ID, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.TryGetByIndex(System.Int32,System.String@,Cognex.Vision.Implementation.ToolPin@)">
            <summary>
            <para>Get the key and value associated with the specified index. </para>
            </summary>
            <param name="index">The index of the key and value to retrieve. </param>
            <param name="outKey">If the index is valid, this will be the key associated with that index when this method returns. If the index is invalid, this will equal the input key. </param>
            <param name="outValue">If the index is valid, this will be the value associated with that index when this method returns. If the index is invalid, this will equal the input value. </param>
            <returns>
            <para>true if this dictionary contains a key and value at the specified index, else false. </para>
            </returns>
            <remarks>
            <para>An index is invalid if it is less than zero or is greater than or equal to Count. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.Add(Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.Cleared">Cleared</see> Raises after the collection is cleared. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.Contains(Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.IndexOf(Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.Insert(System.Int32,Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.setItem(System.Int32,Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.MovedItem">MovedItem</see> Raises after the item is moved. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.Remove(Cognex.Vision.Implementation.ToolPin)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.Remove(System.String)">
            <summary>
            <para>Remove the item with the specified <b>nameOrID</b> from this dictionary. </para>
            </summary>
            <param name="nameOrID">The name or ID of the item to remove from this dictionary. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Implementation.ToolPinTrackingCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.TrackingCollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.TrackingCollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity to be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.op_Equality(Cognex.Vision.Implementation.ToolPinTrackingCollection,Cognex.Vision.Implementation.ToolPinTrackingCollection)">
            <summary>Compares the equality of two ToolPinTrackingCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.op_Inequality(Cognex.Vision.Implementation.ToolPinTrackingCollection,Cognex.Vision.Implementation.ToolPinTrackingCollection)">
            <summary>Compares the inequality of two ToolPinTrackingCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.CopyTo(Cognex.Vision.Implementation.ToolPin[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Implementation.ToolPin})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolPinTrackingCollection.Contains(System.Collections.Generic.KeyValuePair{System.String,Cognex.Vision.Implementation.ToolPin})">
            <summary>
            <para>Determines whether this dictionary contains the specified <b>nameOrID</b>. </para>
            </summary>
            <param name="nameOrID">The name or ID to check. </param>
            <returns>
            <para>True if this dictionary contains <b>nameOrID</b>, otherwise False. </para>
            </returns>
        </member>
        <member name="T:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.GetItemByKey(System.String)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>ByKey
        </member>
        <member name="M:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.KeyedCollectionOfRecordPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.ToolBase">
            <summary>
            <para>A base class that implements the <see cref="T:Cognex.Vision.ITool">ITool</see> interface. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolBase.Ran">
            <summary>
            <para>Event that is raised at the end of the tool's <see cref="M:Cognex.Vision.ITool.Run">Run</see> method. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.ToolBase.Running">
            <summary>
            <para>Event that is raised at the start of the tool's <see cref="M:Cognex.Vision.ITool.Run">Run</see> method. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolBase.FailOnInvalidDataBinding">
            <summary>
            <b>Get</b>
            <para>Whether the tool's <see cref="M:Cognex.Vision.ITool.Run">Run</see> method is to fail if executed while one or more DataBindings (aka Links) are Invalid. </para>
            </summary>
            <summary>
            <b>Set</b>
            </summary>
            <para>Set the <see cref="P:Cognex.Vision.Implementation.ToolBase.FailOnInvalidDataBinding">FailOnInvalidDataBinding</see> property. </para>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="F:Cognex.Vision.Implementation.ToolBase.SfFailOnInvalidDataBinding">SfFailOnInvalidDataBinding</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolBase.Inputs">
            <summary>
            <para>A collection of named Input Pin values. </para>
            </summary>
            <remarks>
            <para>Add or remove ToolPins to the Inputs collection to control which Tool properties are exposed as Inputs in the GUI (for linking). </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolBase.Outputs">
            <summary>
            <para>A collection of named Output Pin values. </para>
            </summary>
            <remarks>
            <para>Add or remove ToolPins to the Outputs collection to control which Tool properties are exposed as Outputs in the GUI (for linking). </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolBase.RunStatus">
            <summary>
            <para>Gets general information about the last call to the tool's <see cref="M:Cognex.Vision.ITool.Run">Run</see> method. Note that serious errors that occur within the tool's <see cref="M:Cognex.Vision.ITool.Run">Run</see> method may only be detected by examining the <see cref="P:Cognex.Vision.ITool.RunStatus">RunStatus</see> after calling <see cref="M:Cognex.Vision.ITool.Run">Run</see>. It is the user's responsibility to examine the tool's <see cref="P:Cognex.Vision.ITool.RunStatus">RunStatus</see> after calling <see cref="M:Cognex.Vision.ITool.Run">Run</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ToolBase.Enabled">
            <summary>
            <b>Get</b>
            <para>Whether the tool is enabled to run. If false, calling the tool's <see cref="M:Cognex.Vision.ITool.Run">Run</see> function will not actually run the tool and will cause no change in the tool's state. </para>
            </summary>
            <summary>
            <b>Set</b>
            <para>Set the <see cref="P:Cognex.Vision.ITool.Enabled">Enabled</see> property. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the value of this property changes. The following state flag may be affected:<list type="bullet">
            <item>
            <description>SfEnabled</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolBase.CreateCurrentRecord">
            <summary>
            <para>Creates a new set of records that represents the tool's current state. </para>
            </summary>
            <returns>
            <para>IRecord instance containing a set of records representing the tool's current state. The records created are specified by the CurrentRecordEnable property. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolBase.CreateLastRunRecord">
            <summary>
            <para>Creates a new set of records that represents the tool's last-run state. </para>
            </summary>
            <returns>
            <para>IRecord instance containing a set of records representing the tool's last-run state. The records created are specified by the LastRunRecordEnable and LastRunRecordDiagEnable properties. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolBase.Run">
            <summary>
            <para>Runs the tool. This method is guaranteed to not throw an exception. Any exception generated in the course of running the tool will be caught and a string representation of that exception will be packaged in the <see cref="P:Cognex.Vision.IRunStatus.Message">Message</see> property of the tool's <see cref="P:Cognex.Vision.ITool.RunStatus">RunStatus</see>. Should this occur, the <see cref="P:Cognex.Vision.IRunStatus.Result">Result</see> property of the tool's <see cref="P:Cognex.Vision.ITool.RunStatus">RunStatus</see> will be set to <see cref="F:Cognex.Vision.ToolResultConstants.Error">Error</see>. It is the user's responsibility to examine the tool's <see cref="P:Cognex.Vision.ITool.RunStatus">RunStatus</see> after calling <see cref="M:Cognex.Vision.ITool.Run">Run</see>. </para>
            </summary>
            <remarks>
            <para>
            <list type="bullet">
            <item>
            <description>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raised when the state of this tool changes.</description>
            </item>
            <item>
            <description>
            <see cref="E:Cognex.Vision.ITool.Running">Running</see> Raised at the start of the <see cref="M:Cognex.Vision.ITool.Run">Run</see> method.</description>
            </item>
            <item>
            <description>
            <see cref="E:Cognex.Vision.ITool.Ran">Ran</see> Raised at the end of the <see cref="M:Cognex.Vision.ITool.Run">Run</see> method.</description>
            </item>
            </list>
            </para>
            <code>
            Imports Cognex.Vision
            Private Function RunTool() As Boolean
              mTool.Run() ' a previously created and configured tool...
              Dim aRunStatus As Cognex.Vision.IRunStatus = mTool.RunStatus
              If (aRunStatus.Result = ToolResultConstants.Error) Then
                If (Not aRunStatus.Message Is Nothing) Then
                  MessageBox.Show(aRunStatus.Message)
                End If
                RunTool = False
              Else
                RunTool = True
              End If
            End Function
            </code>
            <code>
            using Cognex.Vision;
            private Boolean RunTool()
            {
              mTool.Run(); // a previously created and configured tool
              <see cref="T:Cognex.Vision.IRunStatus">IRunStatus</see> aRunStatus = mTool.RunStatus;
              if (aRunStatus.<see cref="P:Cognex.Vision.IRunStatus.Result">Result</see> == <see cref="T:Cognex.Vision.ToolResultConstants">ToolResultConstants</see>.Error)
              {
                if (aRunStatus.<see cref="P:Cognex.Vision.IRunStatus.Message">Message</see> != null)
                {
                  MessageBox.Show(aRunStatus.<see cref="P:Cognex.Vision.IRunStatus.Message">Message</see>);
                }
                return false;
              }
              else
              {
                return true;
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolBase.CopyBase(Cognex.Vision.ToolCopyModeConstants)">
            <summary>
            <para>Create a copy of this tool. </para>
            </summary>
            <param name="copyMode">The desired mode in which to copy this tool. </param>
            <returns>
            <para>A copy of this tool. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolBase.GetContainerAsILinkManager">
            <summary>
            <para>Get the container which contains the Tool. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolBase.CheckRunConditionsSelf">
            <summary>
            <para>Performs RunCondition check by the tool itself. </para>
            </summary>
            <remarks>
            <para>The tool can check if it meets the condition to be run by itself. </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolBase.IsCheckRunConditionsDelegateToOwner">
            <summary>
            <para>Check if tool checks its RunCondition by its owner. </para>
            </summary>
            <remarks>
            <para>The tool can delegate its RunCondition check to a owner like a container having the capacity to check the condition for its <see cref="T:Cognex.Vision.ITool">ITool</see>. </para>
            </remarks>
            <returns>
            <para>bool True if check is delegated by owner, False otherwise. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolBase.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolBase.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolBase.op_Equality(Cognex.Vision.Implementation.ToolBase,Cognex.Vision.Implementation.ToolBase)">
            <summary>Compares the equality of two ToolBase objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ToolBase.op_Inequality(Cognex.Vision.Implementation.ToolBase,Cognex.Vision.Implementation.ToolBase)">
            <summary>Compares the inequality of two ToolBase objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Implementation.RunStatus">
            <summary>
            <para>This class provides an implementation of the <see cref="T:Cognex.Vision.IRunStatus">IRunStatus</see> interface. A tool's <see cref="T:Cognex.Vision.Implementation.RunStatus">RunStatus</see> property is of type <see cref="T:Cognex.Vision.IRunStatus">IRunStatus</see>. This property provides general information about the last call to the tool's Run method. Note that serious errors that occur within the tool's Run method may only be detected by examining the <see cref="T:Cognex.Vision.Implementation.RunStatus">RunStatus</see> after calling Run. It is the user's responsibility to examine the tool's <see cref="T:Cognex.Vision.Implementation.RunStatus">RunStatus</see> after calling Run. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.RunStatus.#ctor">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Implementation.RunStatus.#ctor(Cognex.Vision.ToolResultConstants,System.String,System.Double,System.Double)">
            <summary>
            <para>Constructs a new instance of the <see cref="T:Cognex.Vision.Implementation.RunStatus">RunStatus</see> class. </para>
            </summary>
            <param name="result">Run status tool result. </param>
            <param name="message">Message describing or explaining run status. </param>
            <param name="processingTime">Time to execute Vision tools. Excludes time used by clients to process Changed events. </param>
            <param name="totalTime">Time to execute Vision tools and execute Changed events. This time includes such overhead as updating tool edit controls. </param>
        </member>
        <member name="P:Cognex.Vision.Implementation.RunStatus.Message">
            <summary>
            <para>Returns an empty string if the result was Accept, and otherwise returns a string that provides additional information about the Warning, Reject, or Error condition. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.RunStatus.ProcessingTime">
            <summary>
            <para>Returns the time in milliseconds taken to perform the tool's processing when its Run function was called. This excludes the time taken by event handlers connected to the tool. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.RunStatus.Result">
            <summary>
            <para>Gets a result code that indicates the overall result of running the tool. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.RunStatus.TotalTime">
            <summary>
            <para>Returns the total time in milliseconds taken by the tool's Run function. This includes the time taken by event handlers connected to the tool. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.RunStatus.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.RunStatus.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.RunStatus.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.RunStatus.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.RunStatus.op_Equality(Cognex.Vision.Implementation.RunStatus,Cognex.Vision.Implementation.RunStatus)">
            <summary>Compares the equality of two RunStatus objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.RunStatus.op_Inequality(Cognex.Vision.Implementation.RunStatus,Cognex.Vision.Implementation.RunStatus)">
            <summary>Compares the inequality of two RunStatus objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfVect2Ptr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2Ptr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2Ptr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2Ptr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2Ptr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2Ptr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2Ptr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2Ptr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2Ptr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2Ptr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2Ptr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2Ptr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfVect2Ptr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfVect2Ptr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfVect2Ptr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfVect2Ptr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfVect2Ptr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfVect2Ptr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfVect2Ptr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfVect2Ptr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.ReadOnlyCollectionOfstring">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ReadOnlyCollectionOfstring.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ReadOnlyCollectionOfstring.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.ReadOnlyCollectionOfstring.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.DictionaryOfstring">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.DictionaryOfstring.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.DictionaryOfstring.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.DictionaryOfstring.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.DictionaryOfstring.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.DictionaryOfstring.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.DictionaryOfstring.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.DictionaryOfstring.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.DictionaryOfstring.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.DictionaryOfstring.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.DictionaryOfstring.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.DictionaryOfstring.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.DictionaryOfstring.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.DictionaryOfstring.GetItemByKey(System.String)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>ByKey
        </member>
        <member name="M:Cognex.Vision.Implementation.DictionaryOfstring.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.DictionaryOfstring.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.DictionaryOfstring.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.DictionaryOfstring.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.DictionaryOfstring.op_Equality(Cognex.Vision.Implementation.DictionaryOfstring,Cognex.Vision.Implementation.DictionaryOfstring)">
            <summary>Compares the equality of two DictionaryOfstring objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.DictionaryOfstring.op_Inequality(Cognex.Vision.Implementation.DictionaryOfstring,Cognex.Vision.Implementation.DictionaryOfstring)">
            <summary>Compares the inequality of two DictionaryOfstring objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfRecordPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRecordPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRecordPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRecordPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRecordPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRecordPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRecordPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRecordPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRecordPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRecordPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRecordPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRecordPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfRecordPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfRecordPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfRecordPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfRecordPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfRecordPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfRecordPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfRecordPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfRecordPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.ReadOnlyCollectionOfIGraphicParentChildPtr">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ReadOnlyCollectionOfIGraphicParentChildPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ReadOnlyCollectionOfIGraphicParentChildPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.ReadOnlyCollectionOfIGraphicParentChildPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIGraphicParentChildPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.ChangedEventSuspender">
            <summary>
            <para>This class is intended to be used in cases where paired calls to ChangedEventSuspended and ResumeAndRaiseChangedEvent are needed. Class users will instantiate the class in a C# using statement. The constructor will automatically call ChangedEventSuspended; Dispose will call ResumeAndRaiseChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ChangedEventSuspender.#ctor(Cognex.Vision.IChangedEvent)">
            <summary>
            <para>Constructs an instance of this class and manage the flow of ChangedEvent from the supplied object. </para>
            </summary>
            <param name="suspendableObject">The event source to be managed. </param>
        </member>
        <member name="M:Cognex.Vision.Implementation.ChangedEventSuspender.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ChangedEventSuspender.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ChangedEventSuspender.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ChangedEventSuspender.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ChangedEventSuspender.op_Equality(Cognex.Vision.Implementation.ChangedEventSuspender,Cognex.Vision.Implementation.ChangedEventSuspender)">
            <summary>Compares the equality of two ChangedEventSuspender objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.ChangedEventSuspender.op_Inequality(Cognex.Vision.Implementation.ChangedEventSuspender,Cognex.Vision.Implementation.ChangedEventSuspender)">
            <summary>Compares the inequality of two ChangedEventSuspender objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfbool">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfbool.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfbool.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfbool.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfbool.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfbool.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfbool.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfbool.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfbool.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfbool.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfbool.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfbool.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfbool.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfbool.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfbool.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfbool.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfbool.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfbool.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfbool.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfbool.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfDataBindingPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfDataBindingPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.ReadOnlyCollectionOfdouble">
            <summary>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.ReadOnlyCollectionOfdouble.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.ReadOnlyCollectionOfdouble.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.ReadOnlyCollectionOfdouble.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfdouble">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfdouble.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfdouble.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfdouble.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfdouble.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfdouble.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfdouble.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfdouble.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfdouble.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfdouble.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfdouble.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfdouble.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfdouble.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfdouble.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfdouble.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfdouble.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfdouble.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfdouble.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfdouble.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfdouble.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfIGraphicPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIGraphicPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIGraphicInteractivePtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfIImagePtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIImagePtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIImagePtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIImagePtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIImagePtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIImagePtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIImagePtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIImagePtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIImagePtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIImagePtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIImagePtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIImagePtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIImagePtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIImagePtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIImagePtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIImagePtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIImagePtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIImagePtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIImagePtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIImagePtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfImage8GreyPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfint32_t">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint32_t.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint32_t.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint32_t.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint32_t.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint32_t.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint32_t.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint32_t.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint32_t.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint32_t.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint32_t.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint32_t.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfint32_t.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfint32_t.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfint32_t.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfint32_t.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfint32_t.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfint32_t.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfint32_t.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfint32_t.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfint64_t">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint64_t.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint64_t.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint64_t.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint64_t.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint64_t.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint64_t.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint64_t.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint64_t.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint64_t.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint64_t.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfint64_t.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfint64_t.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfint64_t.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfint64_t.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfint64_t.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfint64_t.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfint64_t.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfint64_t.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfint64_t.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfIRegionPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIRegionPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIRegionPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIRegionPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIRegionPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIRegionPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIRegionPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIRegionPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIRegionPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIRegionPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIRegionPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIRegionPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIRegionPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIRegionPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIRegionPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIRegionPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIRegionPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIRegionPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIRegionPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIRegionPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfIToolPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIToolPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIToolPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIToolPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIToolPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIToolPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIToolPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIToolPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIToolPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIToolPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIToolPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfIToolPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIToolPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIToolPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIToolPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfIToolPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIToolPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIToolPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIToolPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfIToolPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.GetItemByKey(System.String)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>ByKey
        </member>
        <member name="M:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.TrackingCollectionOfIToolPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfPelRectPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfPelRectPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfPelRectPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfPelRectPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfPelRectPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfPelRectPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfPelRectPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfPelRectPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfPelRectPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfPelRectPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfPelRectPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfPelRectPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfPelRectPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfPelRectPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfPelRectPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfPelRectPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfPelRectPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfPelRectPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfPelRectPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfPelRectPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfRectanglePtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectanglePtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectanglePtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectanglePtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectanglePtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectanglePtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectanglePtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectanglePtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectanglePtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectanglePtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectanglePtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectanglePtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfRectanglePtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfRectanglePtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfRectanglePtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfRectanglePtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfRectanglePtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfRectanglePtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfRectanglePtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfRectanglePtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfRectangleAffinePtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfTransform2DLinearPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfTransform2DRigidPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfuint16_t">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint16_t.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint16_t.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint16_t.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint16_t.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint16_t.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint16_t.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint16_t.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint16_t.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint16_t.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint16_t.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint16_t.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfuint16_t.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfuint16_t.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfuint16_t.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfuint16_t.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfuint16_t.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfuint16_t.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfuint16_t.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfuint16_t.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfuint8_t">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint8_t.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint8_t.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint8_t.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint8_t.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint8_t.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint8_t.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint8_t.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint8_t.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint8_t.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint8_t.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfuint8_t.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfuint8_t.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfuint8_t.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfuint8_t.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfuint8_t.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfuint8_t.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfuint8_t.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfuint8_t.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfuint8_t.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr">
            <summary>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.CollectionOfVect2CollectionPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.TestHelpers.TestHelperTool.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.TestHelpers.TestHelperTool.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.TestHelpers.TestHelperTool.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.TestHelpers.TestHelperTool.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.TestHelpers.TestHelperTool.op_Equality(Cognex.Vision.Implementation.Internal.TestHelpers.TestHelperTool,Cognex.Vision.Implementation.Internal.TestHelpers.TestHelperTool)">
            <summary>Compares the equality of two TestHelperTool objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.TestHelpers.TestHelperTool.op_Inequality(Cognex.Vision.Implementation.Internal.TestHelpers.TestHelperTool,Cognex.Vision.Implementation.Internal.TestHelpers.TestHelperTool)">
            <summary>Compares the inequality of two TestHelperTool objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.MultiPropertyWatcher.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.MultiPropertyWatcher.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.MultiPropertyWatcher.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.MultiPropertyWatcher.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.MultiPropertyWatcher.op_Equality(Cognex.Vision.Implementation.Internal.MultiPropertyWatcher,Cognex.Vision.Implementation.Internal.MultiPropertyWatcher)">
            <summary>Compares the equality of two MultiPropertyWatcher objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.MultiPropertyWatcher.op_Inequality(Cognex.Vision.Implementation.Internal.MultiPropertyWatcher,Cognex.Vision.Implementation.Internal.MultiPropertyWatcher)">
            <summary>Compares the inequality of two MultiPropertyWatcher objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContour.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContour.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContour.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContour.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContour.op_Equality(Cognex.Vision.Implementation.Internal.GeneralContour,Cognex.Vision.Implementation.Internal.GeneralContour)">
            <summary>Compares the equality of two GeneralContour objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContour.op_Inequality(Cognex.Vision.Implementation.Internal.GeneralContour,Cognex.Vision.Implementation.Internal.GeneralContour)">
            <summary>Compares the inequality of two GeneralContour objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourSegmentIterator.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourSegmentIterator.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourSegmentIterator.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourSegmentIterator.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourSegmentIterator.op_Equality(Cognex.Vision.Implementation.Internal.GeneralContourSegmentIterator,Cognex.Vision.Implementation.Internal.GeneralContourSegmentIterator)">
            <summary>Compares the equality of two GeneralContourSegmentIterator objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourSegmentIterator.op_Inequality(Cognex.Vision.Implementation.Internal.GeneralContourSegmentIterator,Cognex.Vision.Implementation.Internal.GeneralContourSegmentIterator)">
            <summary>Compares the inequality of two GeneralContourSegmentIterator objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourEllipticalArcSegmentIterator.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourEllipticalArcSegmentIterator.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourEllipticalArcSegmentIterator.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourEllipticalArcSegmentIterator.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourEllipticalArcSegmentIterator.op_Equality(Cognex.Vision.Implementation.Internal.GeneralContourEllipticalArcSegmentIterator,Cognex.Vision.Implementation.Internal.GeneralContourEllipticalArcSegmentIterator)">
            <summary>Compares the equality of two GeneralContourEllipticalArcSegmentIterator objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourEllipticalArcSegmentIterator.op_Inequality(Cognex.Vision.Implementation.Internal.GeneralContourEllipticalArcSegmentIterator,Cognex.Vision.Implementation.Internal.GeneralContourEllipticalArcSegmentIterator)">
            <summary>Compares the inequality of two GeneralContourEllipticalArcSegmentIterator objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourLineSegmentIterator.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourLineSegmentIterator.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourLineSegmentIterator.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourLineSegmentIterator.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourLineSegmentIterator.op_Equality(Cognex.Vision.Implementation.Internal.GeneralContourLineSegmentIterator,Cognex.Vision.Implementation.Internal.GeneralContourLineSegmentIterator)">
            <summary>Compares the equality of two GeneralContourLineSegmentIterator objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GeneralContourLineSegmentIterator.op_Inequality(Cognex.Vision.Implementation.Internal.GeneralContourLineSegmentIterator,Cognex.Vision.Implementation.Internal.GeneralContourLineSegmentIterator)">
            <summary>Compares the inequality of two GeneralContourLineSegmentIterator objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentAddedEventArgs.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentAddedEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentAddedEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentAddedEventArgs.op_Equality(Cognex.Vision.Implementation.Internal.SegmentAddedEventArgs,Cognex.Vision.Implementation.Internal.SegmentAddedEventArgs)">
            <summary>Compares the equality of two SegmentAddedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentAddedEventArgs.op_Inequality(Cognex.Vision.Implementation.Internal.SegmentAddedEventArgs,Cognex.Vision.Implementation.Internal.SegmentAddedEventArgs)">
            <summary>Compares the inequality of two SegmentAddedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentsChangedEventArgs.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentsChangedEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentsChangedEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentsChangedEventArgs.op_Equality(Cognex.Vision.Implementation.Internal.SegmentsChangedEventArgs,Cognex.Vision.Implementation.Internal.SegmentsChangedEventArgs)">
            <summary>Compares the equality of two SegmentsChangedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentsChangedEventArgs.op_Inequality(Cognex.Vision.Implementation.Internal.SegmentsChangedEventArgs,Cognex.Vision.Implementation.Internal.SegmentsChangedEventArgs)">
            <summary>Compares the inequality of two SegmentsChangedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentsRemovedEventArgs.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentsRemovedEventArgs.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentsRemovedEventArgs.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentsRemovedEventArgs.op_Equality(Cognex.Vision.Implementation.Internal.SegmentsRemovedEventArgs,Cognex.Vision.Implementation.Internal.SegmentsRemovedEventArgs)">
            <summary>Compares the equality of two SegmentsRemovedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.SegmentsRemovedEventArgs.op_Inequality(Cognex.Vision.Implementation.Internal.SegmentsRemovedEventArgs,Cognex.Vision.Implementation.Internal.SegmentsRemovedEventArgs)">
            <summary>Compares the inequality of two SegmentsRemovedEventArgs objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GraphicMultiPen.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GraphicMultiPen.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GraphicMultiPen.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GraphicMultiPen.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GraphicMultiPen.op_Equality(Cognex.Vision.Implementation.Internal.GraphicMultiPen,Cognex.Vision.Implementation.Internal.GraphicMultiPen)">
            <summary>Compares the equality of two GraphicMultiPen objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.GraphicMultiPen.op_Inequality(Cognex.Vision.Implementation.Internal.GraphicMultiPen,Cognex.Vision.Implementation.Internal.GraphicMultiPen)">
            <summary>Compares the inequality of two GraphicMultiPen objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.Image16PixelMemory.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.Image16PixelMemory.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.Image16PixelMemory.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.Image16PixelMemory.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.Image16PixelMemory.op_Equality(Cognex.Vision.Implementation.Internal.Image16PixelMemory,Cognex.Vision.Implementation.Internal.Image16PixelMemory)">
            <summary>Compares the equality of two Image16PixelMemory objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.Image16PixelMemory.op_Inequality(Cognex.Vision.Implementation.Internal.Image16PixelMemory,Cognex.Vision.Implementation.Internal.Image16PixelMemory)">
            <summary>Compares the inequality of two Image16PixelMemory objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.Image8PixelMemory.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.Image8PixelMemory.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.Image8PixelMemory.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.Image8PixelMemory.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.Image8PixelMemory.op_Equality(Cognex.Vision.Implementation.Internal.Image8PixelMemory,Cognex.Vision.Implementation.Internal.Image8PixelMemory)">
            <summary>Compares the equality of two Image8PixelMemory objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Implementation.Internal.Image8PixelMemory.op_Inequality(Cognex.Vision.Implementation.Internal.Image8PixelMemory,Cognex.Vision.Implementation.Internal.Image8PixelMemory)">
            <summary>Compares the inequality of two Image8PixelMemory objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Implementation.ShapePolarityAdornmentConstants">
            <summary>
            <para>Enumeration of adornments for a ShapeModel. </para>
            </summary>
            <remarks>
            <para>Enumeration of adornments for a ShapeModel. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.Implementation.ShapePolarityAdornmentConstants.None">
            <summary>
            <para>Show no adornments on the shape model. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.Implementation.ShapePolarityAdornmentConstants.SolidArrow">
            <summary>
            <para>Show a solid arrow pointing in the direction expected to be brighter, according to shape's polarity. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.Implementation.ShapePolarityAdornmentConstants.SolidArrowWithTangentArrow">
            <summary>
            <para>Show a solid arrow pointing in the tangent direction, and a solid arrow normal vector, pointing to the side expected to be brighter, according to the shape's polarity. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.Implementation.ShapePolarityAdornmentConstants.SolidDiamond">
            <summary>
            <para>Show a diamond shape with the two triangular halves filled oppositely black or white, with black on the side expected to be darker, and white on the side expected to be brighter, based on the shape's polarity. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.Implementation.ShapePolarityConstants">
            <summary>
            <para>Enumeration of possible polarity values for model features. </para>
            </summary>
            <remarks>
            <para>Enumeration of possible polarity values for model features. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.Implementation.ShapePolarityConstants.Undefined">
            <summary>
            <para>The polarity of the feature is not defined. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.Implementation.ShapePolarityConstants.PositiveOne">
            <summary>
            <para>If the feature is a closed shape, a polarity of positive one means the image is brighter outside the shape than inside. For open shapes, positive polarity means that following the tangent vector along the shape, brighter pixels are on the left. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.Implementation.ShapePolarityConstants.NegativeOne">
            <summary>
            <para>If the feature is a closed shape, a polarity of negative one means the image is brighter inside the shape than outside. For open shapes, negative polarity means that following the tangent vector along the shape, brighter pixels are on the right. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.Meta.IMemberMeta">
            <summary>
            <para>Interface shared by all Vision Reflection/Introspection Meta Classes. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.IMemberMeta.IsClass">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing a Class. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.IMemberMeta.IsConstructor">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> representing a Constructor. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.IMemberMeta.IsEnum">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing an Enum. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.IMemberMeta.IsFake">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see> representing a Method of a class that behaves like a property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.IMemberMeta.IsInterface">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing an Interface. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.IMemberMeta.IsMethod">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> representing a Method. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.IMemberMeta.IsParameter">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.ParameterMeta">ParameterMeta</see> representing a Parameter to a Method. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.IMemberMeta.IsProperty">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.PropertyMeta">PropertyMeta</see> representing a Property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.IMemberMeta.IsStatic">
            <summary>
            <para>Returns true if this is a static Member. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.IMemberMeta.IsType">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.IMemberMeta.Name">
            <summary>
            <para>Returns the name of this member. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.IMemberMeta.FormatNameForPath">
            <summary>
            <para>Returns the name of this member formatted as a string for use within a Vision property path. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.IMemberMeta.GetDeclaringType">
            <summary>
            <para>Get a Meta instance describing the type which declares this member. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.Meta.TypeMeta">
            <summary>
            <para>Provides the runtime type Reflection/Introspection API for the Vision type system. </para>
            </summary>
            <para>
            <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> is the central class for working with the Vision type Reflection and Introspection.</para>
            <para>The design is heavily influenced by the.NET System.Reflection.TypeInfo class and mirrors the C++ RTTR library which is used for the C++ implementation. </para>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.#ctor(System.Type)">
            <summary>
            <para>Constructs a new instance of this class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMeta.Id">
            <summary>
            <para>Unique identifier for a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> instance. </para>
            </summary>
            <remarks>
            <para>Unique for a single process execution, changes each time a process is executed. </para>
            </remarks>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMeta.IsClass">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing a Class. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMeta.IsConstructor">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> representing a Constructor. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMeta.IsEnum">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing an Enum. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMeta.IsFake">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see> representing a Method of a class that behaves like a property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMeta.IsInterface">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing an Interface. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMeta.IsMethod">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> representing a Method. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMeta.IsParameter">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.ParameterMeta">ParameterMeta</see> representing a Parameter to a Method. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMeta.IsProperty">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.PropertyMeta">PropertyMeta</see> representing a Property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMeta.IsStatic">
            <summary>
            <para>Returns true if this is a static Member. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMeta.IsType">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMeta.Name">
            <summary>
            <para>Returns the name of this member. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.FormatNameForPath">
            <summary>
            <para>Returns the name of this member formatted as a string for use within a Vision property path. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetBaseClass">
            <summary>
            <para>Returns the concrete base class of this Type. </para>
            </summary>
            <remarks>
            <para>The Vision type system only allows for a single non-virtual base class </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetDeclaringType">
            <summary>
            <para>Returns nullptr as the Vision type system does not support nesting types. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetDerivedClasses">
            <summary>
            <para>Returns a collection of the classes which have this class as a base class. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetEnumName(System.Object)">
            <summary>
            <para>Returns the name of the constant that has the supplied value, for the current enumeration type. </para>
            </summary>
            <para>If the supplied value is not a defined enumeration value, an empty string is returned.</para>
            <para>If the current enumeration type has an underlying unsigned integer type and the supplied value is a valid bitwise combination of defined values, the returned string will be comprised of the corresponding names separated by a "|" delimiter.</para>
            <param name="enumValue">The supplied constant value to obtain the name of.</param>
            <exception cref="T:Cognex.Vision.ArgumentNullException">The supplied argument is null. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The current type is not an enumeration. </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The type of the supplied argument cannot be converted to the underlying type of this type </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetEnumNames">
            <summary>
            <para>Returns the names of the members of the current enumeration type. </para>
            </summary>
            <exception cref="T:Cognex.Vision.ArgumentException">The current type is not an enumeration </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetEnumUnderlyingType">
            <summary>
            <para>Returns the underlying type of the current enumeration type. </para>
            </summary>
            <exception cref="T:Cognex.Vision.ArgumentException">The current type is not an enumeration </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetEnumValues">
            <summary>
            <para>Returns a collection of the values of the constants in the current enumeration type. </para>
            </summary>
            <exception cref="T:Cognex.Vision.ArgumentException">The current type is not an enumeration. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetFakeProperties(System.Object)">
            <summary>
            <para>Return a collection of <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see> instances that stand in for methods that behave much like observable properties. </para>
            </summary>
            <remarks>
            <para>FakeProperties are used to facilitate creating DataBindings and PropertyWatchers to property paths for methods that would otherwise not be bindable. </para>
            </remarks>
            <param name="instanceOfType">An instance of this <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> used to retrieve any available <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see>. </param>
            <exception cref="T:Cognex.Vision.InvalidOperationException">instanceOfType is not actually an instance of this type. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetFakePropertyByName(System.String)">
            <summary>
            <para>Creates a <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see> for a method given a properly formatted method name. </para>
            </summary>
            <param name="name">A properly formatted name for a <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see>. For example "Item(0)". </param>
            <exception cref="T:Cognex.Vision.ArgumentException">name is empty </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">name is not properly formatted. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetInterfaces">
            <summary>
            <para>Gets a list of the Interfaces supported by this Type. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetMethods">
            <summary>
            <para>Gets a list of Methods available on this Type. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetProperties">
            <summary>
            <para>Gets a list of Properties available on this Type. </para>
            </summary>
            <remarks>
            <para>The returned list does not include any <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetPropertyByName(System.String)">
            <summary>
            <para>Gets a <see cref="T:Cognex.Vision.Meta.PropertyMeta">PropertyMeta</see> for the given property name. </para>
            </summary>
            <returns>
            <para>the <see cref="T:Cognex.Vision.Meta.PropertyMeta">PropertyMeta</see> for the given property name if it exists. nullptr if no property with that name exists on this type. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.IsAssignableFrom(Cognex.Vision.Meta.TypeMeta)">
            <summary>
            <para>Checks if this type can be assigned from sourceType based on the inheritance pattern. </para>
            </summary>
            <returns>
            <para>true if sourceType can be assigned to a variable, property, or parameter of this type. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.IsPrimitive">
            <summary>
            <para>Return true if this <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> describes a primitive type. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.IsValueType">
            <summary>
            <para>Return true if this <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> describes a value type. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.ConvertMemberMetaCollectionToPath(Cognex.Vision.Meta.MemberMetaCollection,System.Object)">
            <summary>
            <para>Converts an ordered list of <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> to a dotted string "property path". </para>
            </summary>
            <param name="memberMetaCollection">Ordered list of MemberMeta items to convert </param>
            <param name="subject">object instance that forms the root of the property path. </param>
            <returns>
            <para>Dotted string property path which is equivalent to the memberMetaCollection </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentNullException">memberMetaCollection is nullptr </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.ConvertMemberMetaCollectionToPath(Cognex.Vision.Meta.MemberMetaCollection)">
            <summary>
            <para>Converts an ordered list of <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> to a dotted string "property path". </para>
            </summary>
            <param name="memberMetaCollection">Ordered list of MemberMeta items to convert </param>
            <returns>
            <para>Dotted string property path which is equivalent to the memberMetaCollection </para>
            </returns>
            <exception cref="T:Cognex.Vision.ArgumentNullException">memberMetaCollection is nullptr </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.ConvertPathToMemberMetaCollection(System.Object,Cognex.Vision.Meta.TypeMeta,System.String,System.Boolean,Cognex.Vision.Meta.InvalidCastConstants)">
            <summary>
            <para>Converts a dotted string "property path" to an equivalent ordered list of MemberMeta instances. </para>
            </summary>
            <param name="subject">object instance at the root of the path (may be nullptr if no instance is available) </param>
            <param name="type">subject type at the root of the path (may <b>not</b> be nullptr) </param>
            <param name="path">The dotted property path </param>
            <param name="requireStateFlagsForMethods">
            </param>
            <param name="invalidCastBehavior">
            </param>
            <exception cref="T:Cognex.Vision.ArgumentException">Failed to parse the dotted property path into tokens </exception>
            <exception cref="T:Cognex.Vision.InvalidCastException">invalidCastBehavior = <see cref="F:Cognex.Vision.Meta.InvalidCastConstants.Throw">InvalidCastConstants.Throw</see> and the path contains an Invalid Cast </exception>
            <exception cref="T:Cognex.Vision.InvalidOperationException">Part of the path could not be converted, likely because it does not match the actual types. See error message for details. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.CanConvertPrimitive(Cognex.Vision.Meta.TypeMeta,Cognex.Vision.Meta.TypeMeta)">
            <summary>
            <para>Return true if it's "safe" to attempt a conversion between two primitive types. </para>
            </summary>
            <remarks>
            <para>Note that <see cref="M:Cognex.Vision.Meta.TypeMeta.ConvertPrimitive(System.Object,Cognex.Vision.Meta.TypeMeta,Cognex.Vision.Meta.TypeMeta)">ConvertPrimitive()</see> may succeed (or fail) even when <see cref="M:Cognex.Vision.Meta.TypeMeta.CanConvertPrimitive(Cognex.Vision.Meta.TypeMeta,Cognex.Vision.Meta.TypeMeta)">CanConvertPrimitive()</see> returns false </para>
            </remarks>
            <param name="sourceType">The type to convert from </param>
            <param name="destinationType">The type to convert to </param>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.ConvertPrimitive(System.Object,Cognex.Vision.Meta.TypeMeta,Cognex.Vision.Meta.TypeMeta)">
            <summary>
            <para>Attempt to convert value from sourceType to destinationType. </para>
            </summary>
            <returns>
            <para>The converted value </para>
            </returns>
            <remarks>
            <para>Note that <see cref="M:Cognex.Vision.Meta.TypeMeta.ConvertPrimitive(System.Object,Cognex.Vision.Meta.TypeMeta,Cognex.Vision.Meta.TypeMeta)">ConvertPrimitive()</see> may succeed (or fail) even when <see cref="M:Cognex.Vision.Meta.TypeMeta.CanConvertPrimitive(Cognex.Vision.Meta.TypeMeta,Cognex.Vision.Meta.TypeMeta)">CanConvertPrimitive()</see> returns false </para>
            </remarks>
            <param name="value">The value to convert </param>
            <param name="sourceType">The type to convert from </param>
            <param name="destinationType">The type to convert to </param>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.CanConvertType(Cognex.Vision.Meta.TypeMeta,Cognex.Vision.Meta.TypeMeta)">
            <summary>
            <para>Returns true if it's "safe" to attempt conversion between two types, one of which is not primitive. </para>
            </summary>
            <remarks>
            <para>Note that <see cref="M:Cognex.Vision.Meta.TypeMeta.ConvertValue(System.Object,Cognex.Vision.Meta.TypeMeta,Cognex.Vision.Meta.TypeMeta)">ConvertValue()</see> may succeed (or fail) even when <see cref="M:Cognex.Vision.Meta.TypeMeta.CanConvertType(Cognex.Vision.Meta.TypeMeta,Cognex.Vision.Meta.TypeMeta)">CanConvertType()</see> returns false </para>
            </remarks>
            <param name="sourceType">The type to convert from </param>
            <param name="destinationType">The type to convert to </param>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.ConvertValue(System.Object,Cognex.Vision.Meta.TypeMeta,Cognex.Vision.Meta.TypeMeta)">
            <summary>
            <para>Attempt to convert value from sourceType to destinationType when the sourceType or destinationType is not primitive. </para>
            </summary>
            <remarks>
            <para>Note that <see cref="M:Cognex.Vision.Meta.TypeMeta.ConvertValue(System.Object,Cognex.Vision.Meta.TypeMeta,Cognex.Vision.Meta.TypeMeta)">ConvertValue()</see> may succeed (or fail) even when <see cref="M:Cognex.Vision.Meta.TypeMeta.CanConvertType(Cognex.Vision.Meta.TypeMeta,Cognex.Vision.Meta.TypeMeta)">CanConvertType()</see> returns false </para>
            </remarks>
            <param name="value">The value to convert </param>
            <param name="sourceType">The type to convert from </param>
            <param name="destinationType">The type to convert to </param>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetMemberMetas(System.Object,Cognex.Vision.Meta.TypeMeta)">
            <summary>
            <para>Return all bindable property members given an object instance and its type. </para>
            </summary>
            <remarks>
            <para>Bindable members are the PropertyMetas and FakePropertyMetas of the subject. PropertyWatchers and DataBindings can bind to paths that behave like observable properties. </para>
            </remarks>
            <param name="subject">An object instance to aid in the discovery of bindable property members. subject may be null if no instance is available when looking for members </param>
            <param name="type">A type to use when looking for bindable members. </param>
            <returns>
            <para>A collection of the bindable members for the given subject and type </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetMemberMetas(System.Object,Cognex.Vision.Meta.TypeMeta,System.Boolean)">
            <summary>
            <para>Return all bindable property members given an object instance and its type. </para>
            </summary>
            <remarks>
            <para>Bindable members are the PropertyMetas and FakePropertyMetas of the subject. PropertyWatchers and DataBindings can bind to paths that behave like observable properties. </para>
            </remarks>
            <param name="subject">An object instance to aid in the discovery of bindable property members. subject may be null if no instance is available when looking for members </param>
            <param name="type">A type to use when looking for bindable members. type may <b>not</b> be null. </param>
            <param name="requireStateFlagsForMethods">Switch to control whether to include FakeProperties for methods that do not have associated stateflags and are less likely to behave like observable properties (These methods are more likely to have side effects or return different object instances when called twice in succession and may be poor candidates for binding within a property path). </param>
            <returns>
            <para>A collection of the bindable members for the given subject and type </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetTypeMetaByName(System.String)">
            <summary>
            <para>Return a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> instance for the (fully namespace qualified) typeName. </para>
            </summary>
            <param name="typeName">A fully namespace qualified Vision type name (i.e. "Cognex.Vision.Image"). </param>
            <returns>
            <para>A <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> instance that represents the supplied typeName </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetTypeMetaFromObject(System.Object)">
            <summary>
            <para>Return the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> of the given object instance. </para>
            </summary>
            <param name="subject">The instance to examine and determine its type </param>
            <returns>
            <para>A <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> instance that represents the actual type of subject </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetTypeMetaFromPath(System.Object,Cognex.Vision.Meta.TypeMeta,System.String,System.Boolean,Cognex.Vision.Meta.InvalidCastConstants)">
            <summary>
            <para>Convenience method to determine the type of the last node in a property path. </para>
            </summary>
            <remarks>
            <para>COGNEX INTERNAL USE ONLY! </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetTypeMetas">
            <summary>
            <para>Return a list of all known Vision types. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetValue(System.Object,System.String,System.Boolean)">
            <summary>
            <para>Evaluates a property path and returns the value. </para>
            </summary>
            <param name="subject">The object instance at the root of the path to evaluate </param>
            <param name="path">The dotted string property path to evaluate </param>
            <param name="throwOnError">When true, throw an exception with a descriptive error message if the path could not be evaluated, if false return nullptr when a path could not be evaluated. </param>
            <returns>
            <para>The value obtained by evaluating the dotted property path </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.IsFormattedAsCast(System.String)">
            <summary>
            <para>Returns true if a string is formatted as a "cast" node in a property path. </para>
            </summary>
            <remarks>
            <para>Cast nodes consist of a type name wrapped in parens (i.e "(Cognex.Vision.Image)") </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.IsFormattedAsMethod(System.String)">
            <summary>
            <para>Returns true if a string is formatted as a Method or "FakeProperty" node in a property path. </para>
            </summary>
            <remarks>
            <para>Method or "FakeProperty" nodes consist of the name of the Method followed by open and close parens (i.e. "GetVertexX()") </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.SetValue(System.Object,System.String,System.Object)">
            <summary>
            <para>Evaluates a property path and sets the value at the end of the expression. </para>
            </summary>
            <param name="subject">The object instance at the root of the path to evaluate </param>
            <param name="path">The dotted string property path to the property to set </param>
            <param name="value">The value to set the property path to </param>
            <exception cref="T:Cognex.Vision.ArgumentNullException">subject is null </exception>
            <exception cref="T:Cognex.Vision.InvalidCastException">Evaluating the path resulted in an Invalid Cast </exception>
            <param name="??">Calling the property setter throws an exception </param>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetHashCode">
            <summary>
            <para>Serves as the default hash function. </para>
            </summary>
            <returns>
            <para>A hash code for the current object. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetTypeImpl_">
            <summary>
            <para>COGNEX INTERNAL USE ONLY! </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMeta.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Meta.TypeMetaReadOnlyCollection">
            <summary>
            <para>A read only collection of <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> instances. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaReadOnlyCollection.#ctor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Meta.TypeMetaReadOnlyCollection">TypeMetaReadOnlyCollection</see> Constructor </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMetaReadOnlyCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaReadOnlyCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaReadOnlyCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaReadOnlyCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaReadOnlyCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaReadOnlyCollection.op_Equality(Cognex.Vision.Meta.TypeMetaReadOnlyCollection,Cognex.Vision.Meta.TypeMetaReadOnlyCollection)">
            <summary>Compares the equality of two TypeMetaReadOnlyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaReadOnlyCollection.op_Inequality(Cognex.Vision.Meta.TypeMetaReadOnlyCollection,Cognex.Vision.Meta.TypeMetaReadOnlyCollection)">
            <summary>Compares the inequality of two TypeMetaReadOnlyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaReadOnlyCollection.CopyTo(Cognex.Vision.Meta.TypeMeta[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaReadOnlyCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Meta.IPropertyMeta">
            <summary>
            <para>Interface for Meta classes that behave like observable properties. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.IPropertyMeta.IsReadOnly">
            <summary>
            <para>Returns true if the property is read only, otherwise false. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.IPropertyMeta.PropertyType">
            <summary>
            <para>Returns the static Type of this property. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.IPropertyMeta.GetValue(System.Object)">
            <summary>
            <para>Returns the value of this property. </para>
            </summary>
            <param name="subject">The object on which to invoke the getter for the given property </param>
        </member>
        <member name="M:Cognex.Vision.Meta.IPropertyMeta.SetValue(System.Object,System.Object)">
            <summary>
            <para>Sets the value of this property. </para>
            </summary>
            <param name="subject">The object on which to invoke the setter for the given property </param>
            <param name="value">The value to set the property to</param>
            <exception cref="T:Cognex.Vision.InvalidOperationException">The property is read only </exception>
            <param name="??">The property setter throws </param>
        </member>
        <member name="T:Cognex.Vision.Meta.FakePropertyMeta">
            <summary>
            <para>The <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see> class is used to represent methods of a type that behave generally like properties. Exposing <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see> for a method allows creating <see cref="T:Cognex.Vision.DataBinding">DataBindings/Links</see> and <see cref="T:Cognex.Vision.PropertyWatcher">PropertyWatchers</see> that use these methods. This, in turn, allows creating <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPins</see> that expose paths which include these members for linking in the GUI. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMeta.#ctor(Cognex.Vision.Meta.MethodMeta,Cognex.Vision.Meta.MethodMeta)">
            <summary>
            <para>Constructs a <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see> instance. </para>
            </summary>
            <param name="getterMethodMeta">A <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> to act as the property getter. </param>
            <param name="setterMethodMeta">A <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> to act as the property setter. The setterMethodMeta can be null to create a read only <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see>. </param>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMeta.#ctor(Cognex.Vision.Meta.MethodMeta,Cognex.Vision.Meta.MethodMeta,System.Object,System.String)">
            <summary>
            <para>Constructs a <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see> instance. </para>
            </summary>
            <param name="getterMethodMeta">A <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> to act as the property getter. </param>
            <param name="setterMethodMeta">A <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> to act as the property setter. The setterMethodMeta can be null to create a read only <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see>. </param>
            <param name="methodArg">A string or integer to provide as first argument when invoking the setter and getter, usually an integer that acts like an "index" </param>
            <param name="name">The name of the property. It is optional. </param>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMeta.IsReadOnly">
            <summary>
            <para>Returns true if the property is read only, otherwise false. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMeta.PropertyType">
            <summary>
            <para>Returns the static Type of this property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMeta.IsClass">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing a Class. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMeta.IsConstructor">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> representing a Constructor. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMeta.IsEnum">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing an Enum. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMeta.IsFake">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see> representing a Method of a class that behaves like a property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMeta.IsInterface">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing an Interface. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMeta.IsMethod">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> representing a Method. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMeta.IsParameter">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.ParameterMeta">ParameterMeta</see> representing a Parameter to a Method. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMeta.IsProperty">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.PropertyMeta">PropertyMeta</see> representing a Property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMeta.IsStatic">
            <summary>
            <para>Returns true if this is a static Member. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMeta.IsType">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMeta.Name">
            <summary>
            <para>Returns the name of this member. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMeta.IsPropertyForIndexer">
            <summary>
            <para>Returns true if this is a FakeProperty to expose an indexer for a collection's "Item" method. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMeta.IsPropertyForMethod">
            <summary>
            <para>Return true if this is a FakeProperty for a "normal" method which is not an indexer for a collection's "Item" method. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMeta.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMeta.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMeta.GetValue(System.Object)">
            <summary>
            <para>Returns the value of this property. </para>
            </summary>
            <param name="subject">The object on which to invoke the getter for the given property </param>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMeta.SetValue(System.Object,System.Object)">
            <summary>
            <para>Sets the value of this property. </para>
            </summary>
            <param name="subject">The object on which to invoke the setter for the given property </param>
            <param name="value">The value to set the property to</param>
            <exception cref="T:Cognex.Vision.InvalidOperationException">The property is read only </exception>
            <param name="??">The property setter throws </param>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMeta.FormatNameForPath">
            <summary>
            <para>Returns the name of this member formatted as a string for use within a Vision property path. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMeta.GetDeclaringType">
            <summary>
            <para>Get a Meta instance describing the type which declares this member. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMeta.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMeta.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMeta.op_Equality(Cognex.Vision.Meta.FakePropertyMeta,Cognex.Vision.Meta.FakePropertyMeta)">
            <summary>Compares the equality of two FakePropertyMeta objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMeta.op_Inequality(Cognex.Vision.Meta.FakePropertyMeta,Cognex.Vision.Meta.FakePropertyMeta)">
            <summary>Compares the inequality of two FakePropertyMeta objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Meta.MethodMeta">
            <summary>
            <para>Class used to describe and invoke Methods as part of Vision's support for type Reflection/Introspection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMeta.IsClass">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing a Class. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMeta.IsConstructor">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> representing a Constructor. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMeta.IsEnum">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing an Enum. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMeta.IsFake">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see> representing a Method of a class that behaves like a property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMeta.IsInterface">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing an Interface. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMeta.IsMethod">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> representing a Method. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMeta.IsParameter">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.ParameterMeta">ParameterMeta</see> representing a Parameter to a Method. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMeta.IsProperty">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.PropertyMeta">PropertyMeta</see> representing a Property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMeta.IsStatic">
            <summary>
            <para>Returns true if this is a static Member. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMeta.IsType">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMeta.Name">
            <summary>
            <para>Returns the name of this member. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMeta.ReturnType">
            <summary>
            <para>The return type of the method described by this <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> instance. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.FormatNameForPath">
            <summary>
            <para>Returns the name of this member formatted as a string for use within a Vision property path. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.GetDeclaringType">
            <summary>
            <para>Get a Meta instance describing the type which declares this member. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.GetParameters">
            <summary>
            <para>Gets the ordered list of Parameters supported by this method. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.Invoke(System.Object)">
            <summary>
            <para>Invoke the method. </para>
            </summary>
            <param name="subject">The object on which to invoke the given method (use nullptr for static methods) </param>
            <param name="Cognex.Vision.Cognex.Vision.InvalidOperationException.Vision.Cognex.Vision.InvalidOperationException">The Method does not accept 0 arguments </param>
            <exception cref="T:Cognex.Vision.ArgumentException">The subject is null or invalid </exception>
            <param name="??">The method being invoked throws </param>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.Invoke(System.Object,System.Object)">
            <summary>
            <para>Invoke the method. </para>
            </summary>
            <param name="subject">The object on which to invoke the given method (use nullptr for static methods) </param>
            <param name="arg0">The 0th argument passed to the invokee </param>
            <exception cref="T:Cognex.Vision.InvalidOperationException">The Method does not accept 1 argument </exception>
            <exception cref="T:Cognex.Vision.InvalidCastException">The Method arguments are not the correct type </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The subject is null or invalid </exception>
            <param name="??">The method being invoked throws </param>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.Invoke(System.Object,System.Object,System.Object)">
            <summary>
            <para>Invoke the method. </para>
            </summary>
            <param name="subject">The object on which to invoke the given method (use nullptr for static methods) </param>
            <param name="arg0">The 0th argument passed to the invokee </param>
            <param name="arg1">The 1st argument passed to the invokee </param>
            <exception cref="T:Cognex.Vision.InvalidOperationException">The Method does not accept 2 arguments </exception>
            <exception cref="T:Cognex.Vision.InvalidCastException">The Method arguments are not the correct type </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The subject is null or invalid </exception>
            <param name="??">The method being invoked throws </param>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.Invoke(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Invoke the method. </para>
            </summary>
            <param name="subject">The object on which to invoke the given method (use nullptr for static methods) </param>
            <param name="arg0">The 0th argument passed to the invokee </param>
            <param name="arg1">The 1st argument passed to the invokee </param>
            <param name="arg2">The 2nd argument passed to the invokee </param>
            <exception cref="T:Cognex.Vision.InvalidOperationException">The Method does not accept 3 arguments </exception>
            <exception cref="T:Cognex.Vision.InvalidCastException">The Method arguments are not the correct type </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The subject is null or invalid </exception>
            <param name="??">The method being invoked throws </param>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Invoke the method. </para>
            </summary>
            <param name="subject">The object on which to invoke the given method (use nullptr for static methods) </param>
            <param name="arg0">The 0th argument passed to the invokee </param>
            <param name="arg1">The 1st argument passed to the invokee </param>
            <param name="arg2">The 2nd argument passed to the invokee </param>
            <param name="arg3">The 3rd argument passed to the invokee </param>
            <exception cref="T:Cognex.Vision.InvalidOperationException">The Method does not accept 4 arguments </exception>
            <exception cref="T:Cognex.Vision.InvalidCastException">The Method arguments are not the correct type </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The subject is null or invalid </exception>
            <param name="??">The method being invoked throws </param>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Invoke the method. </para>
            </summary>
            <param name="subject">The object on which to invoke the given method (use nullptr for static methods) </param>
            <param name="arg0">The 0th argument passed to the invokee </param>
            <param name="arg1">The 1st argument passed to the invokee </param>
            <param name="arg2">The 2nd argument passed to the invokee </param>
            <param name="arg3">The 3rd argument passed to the invokee </param>
            <param name="arg4">The 4th argument passed to the invokee </param>
            <exception cref="T:Cognex.Vision.InvalidOperationException">The Method does not accept 5 arguments </exception>
            <exception cref="T:Cognex.Vision.InvalidCastException">The Method arguments are not the correct type </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The subject is null or invalid </exception>
            <param name="??">The method being invoked throws </param>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Invoke the method. </para>
            </summary>
            <param name="subject">The object on which to invoke the given method (use nullptr for static methods) </param>
            <param name="arg0">The 0th argument passed to the invokee </param>
            <param name="arg1">The 1st argument passed to the invokee </param>
            <param name="arg2">The 2nd argument passed to the invokee </param>
            <param name="arg3">The 3rd argument passed to the invokee </param>
            <param name="arg4">The 4th argument passed to the invokee </param>
            <param name="arg5">The 5th argument passed to the invokee </param>
            <exception cref="T:Cognex.Vision.InvalidOperationException">The Method does not accept 6 arguments </exception>
            <exception cref="T:Cognex.Vision.InvalidCastException">The Method arguments are not the correct type </exception>
            <exception cref="T:Cognex.Vision.ArgumentException">The subject is null or invalid </exception>
            <param name="??">The method being invoked throws </param>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.op_Equality(Cognex.Vision.Meta.MethodMeta,Cognex.Vision.Meta.MethodMeta)">
            <summary>Compares the equality of two MethodMeta objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMeta.op_Inequality(Cognex.Vision.Meta.MethodMeta,Cognex.Vision.Meta.MethodMeta)">
            <summary>Compares the inequality of two MethodMeta objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Meta.ParameterMeta">
            <summary>
            <para>Class used to describe and interact with parameters to methods as part of Vision's support for type Reflection/Introspection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMeta.ParameterType">
            <summary>
            <para>The type of this parameter. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMeta.Position">
            <summary>
            <para>The ordered location of this parameter in the method argument list. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMeta.IsClass">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing a Class. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMeta.IsConstructor">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> representing a Constructor. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMeta.IsEnum">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing an Enum. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMeta.IsFake">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see> representing a Method of a class that behaves like a property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMeta.IsInterface">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing an Interface. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMeta.IsMethod">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> representing a Method. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMeta.IsParameter">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.ParameterMeta">ParameterMeta</see> representing a Parameter to a Method. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMeta.IsProperty">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.PropertyMeta">PropertyMeta</see> representing a Property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMeta.IsStatic">
            <summary>
            <para>Returns true if this is a static Member. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMeta.IsType">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMeta.Name">
            <summary>
            <para>Returns the name of this member. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMeta.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMeta.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMeta.FormatNameForPath">
            <summary>
            <para>Returns the name of this member formatted as a string for use within a Vision property path. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMeta.GetDeclaringType">
            <summary>
            <para>Get a Meta instance describing the type which declares this member. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMeta.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMeta.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMeta.op_Equality(Cognex.Vision.Meta.ParameterMeta,Cognex.Vision.Meta.ParameterMeta)">
            <summary>Compares the equality of two ParameterMeta objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMeta.op_Inequality(Cognex.Vision.Meta.ParameterMeta,Cognex.Vision.Meta.ParameterMeta)">
            <summary>Compares the inequality of two ParameterMeta objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Meta.ParameterMetaReadOnlyCollection">
            <summary>
            <para>A read only collection of <see cref="T:Cognex.Vision.Meta.ParameterMeta">ParameterMeta</see> instances. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaReadOnlyCollection.#ctor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Meta.ParameterMetaReadOnlyCollection">ParameterMetaReadOnlyCollection</see> Constructor. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMetaReadOnlyCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaReadOnlyCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaReadOnlyCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaReadOnlyCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaReadOnlyCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaReadOnlyCollection.op_Equality(Cognex.Vision.Meta.ParameterMetaReadOnlyCollection,Cognex.Vision.Meta.ParameterMetaReadOnlyCollection)">
            <summary>Compares the equality of two ParameterMetaReadOnlyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaReadOnlyCollection.op_Inequality(Cognex.Vision.Meta.ParameterMetaReadOnlyCollection,Cognex.Vision.Meta.ParameterMetaReadOnlyCollection)">
            <summary>Compares the inequality of two ParameterMetaReadOnlyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaReadOnlyCollection.CopyTo(Cognex.Vision.Meta.ParameterMeta[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaReadOnlyCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Meta.FakePropertyMetaCollection">
            <summary>
            <para>A collection of <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see> instances. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.Meta.FakePropertyMetaCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.FakePropertyMetaCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.FakePropertyMetaCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.FakePropertyMetaCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.FakePropertyMetaCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.FakePropertyMetaCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.FakePropertyMetaCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.FakePropertyMetaCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.FakePropertyMetaCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.FakePropertyMetaCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.FakePropertyMetaCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMetaCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMetaCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMetaCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.FakePropertyMetaCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.Add(Cognex.Vision.Meta.FakePropertyMeta)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.FakePropertyMetaCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Meta.FakePropertyMetaCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.FakePropertyMetaCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Meta.FakePropertyMetaCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.Contains(Cognex.Vision.Meta.FakePropertyMeta)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.IndexOf(Cognex.Vision.Meta.FakePropertyMeta)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.Insert(System.Int32,Cognex.Vision.Meta.FakePropertyMeta)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.FakePropertyMetaCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Meta.FakePropertyMetaCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.setItem(System.Int32,Cognex.Vision.Meta.FakePropertyMeta)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.FakePropertyMetaCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Meta.FakePropertyMetaCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.FakePropertyMetaCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Meta.FakePropertyMetaCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.Remove(Cognex.Vision.Meta.FakePropertyMeta)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.FakePropertyMetaCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Meta.FakePropertyMetaCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.FakePropertyMetaCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Meta.FakePropertyMetaCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.op_Equality(Cognex.Vision.Meta.FakePropertyMetaCollection,Cognex.Vision.Meta.FakePropertyMetaCollection)">
            <summary>Compares the equality of two FakePropertyMetaCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.op_Inequality(Cognex.Vision.Meta.FakePropertyMetaCollection,Cognex.Vision.Meta.FakePropertyMetaCollection)">
            <summary>Compares the inequality of two FakePropertyMetaCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.CopyTo(Cognex.Vision.Meta.FakePropertyMeta[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.FakePropertyMetaCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Meta.FakePropertyMeta})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.Meta.MethodMetaReadOnlyCollection">
            <summary>
            <para>A read only collection of <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> instances. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaReadOnlyCollection.#ctor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Meta.MethodMetaReadOnlyCollection">MethodMetaReadOnlyCollection</see> Constructor. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMetaReadOnlyCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaReadOnlyCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaReadOnlyCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaReadOnlyCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaReadOnlyCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaReadOnlyCollection.op_Equality(Cognex.Vision.Meta.MethodMetaReadOnlyCollection,Cognex.Vision.Meta.MethodMetaReadOnlyCollection)">
            <summary>Compares the equality of two MethodMetaReadOnlyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaReadOnlyCollection.op_Inequality(Cognex.Vision.Meta.MethodMetaReadOnlyCollection,Cognex.Vision.Meta.MethodMetaReadOnlyCollection)">
            <summary>Compares the inequality of two MethodMetaReadOnlyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaReadOnlyCollection.CopyTo(Cognex.Vision.Meta.MethodMeta[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaReadOnlyCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Meta.PropertyMeta">
            <summary>
            <para>Class used to describe and interact with properties as part of Vision's support for type Reflection/Introspection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMeta.IsClass">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing a Class. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMeta.IsConstructor">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> representing a Constructor. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMeta.IsEnum">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing an Enum. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMeta.IsFake">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see> representing a Method of a class that behaves like a property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMeta.IsInterface">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> representing an Interface. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMeta.IsMethod">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> representing a Method. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMeta.IsParameter">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.ParameterMeta">ParameterMeta</see> representing a Parameter to a Method. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMeta.IsProperty">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.PropertyMeta">PropertyMeta</see> representing a Property. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMeta.IsReadOnly">
            <summary>
            <para>Returns true if the property is read only, otherwise false. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMeta.IsStatic">
            <summary>
            <para>Returns true if this is a static Member. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMeta.IsType">
            <summary>
            <para>Returns true if this is a <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see>. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMeta.Name">
            <summary>
            <para>Returns the name of this member. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMeta.PropertyType">
            <summary>
            <para>Returns the static Type of this property. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMeta.FormatNameForPath">
            <summary>
            <para>Returns the name of this member formatted as a string for use within a Vision property path. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMeta.GetDeclaringType">
            <summary>
            <para>Get a Meta instance describing the type which declares this member. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMeta.GetValue(System.Object)">
            <summary>
            <para>Returns the value of this property. </para>
            </summary>
            <param name="subject">The object on which to invoke the getter for the given property </param>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMeta.SetValue(System.Object,System.Object)">
            <summary>
            <para>Sets the value of this property. </para>
            </summary>
            <param name="subject">The object on which to invoke the setter for the given property </param>
            <param name="value">The value to set the property to</param>
            <exception cref="T:Cognex.Vision.InvalidOperationException">The property is read only </exception>
            <param name="??">The property setter throws </param>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMeta.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMeta.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMeta.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMeta.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMeta.op_Equality(Cognex.Vision.Meta.PropertyMeta,Cognex.Vision.Meta.PropertyMeta)">
            <summary>Compares the equality of two PropertyMeta objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMeta.op_Inequality(Cognex.Vision.Meta.PropertyMeta,Cognex.Vision.Meta.PropertyMeta)">
            <summary>Compares the inequality of two PropertyMeta objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="T:Cognex.Vision.Meta.PropertyMetaReadOnlyCollection">
            <summary>
            <para>A read only collection of <see cref="T:Cognex.Vision.Meta.PropertyMeta">PropertyMeta</see> instances. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaReadOnlyCollection.#ctor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Meta.PropertyMetaReadOnlyCollection">PropertyMetaReadOnlyCollection</see> constructor </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMetaReadOnlyCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaReadOnlyCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaReadOnlyCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaReadOnlyCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaReadOnlyCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaReadOnlyCollection.op_Equality(Cognex.Vision.Meta.PropertyMetaReadOnlyCollection,Cognex.Vision.Meta.PropertyMetaReadOnlyCollection)">
            <summary>Compares the equality of two PropertyMetaReadOnlyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaReadOnlyCollection.op_Inequality(Cognex.Vision.Meta.PropertyMetaReadOnlyCollection,Cognex.Vision.Meta.PropertyMetaReadOnlyCollection)">
            <summary>Compares the inequality of two PropertyMetaReadOnlyCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaReadOnlyCollection.CopyTo(Cognex.Vision.Meta.PropertyMeta[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaReadOnlyCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Meta.MemberMetaCollection">
            <summary>
            <para>A Collection of MemberMeta instances. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.#ctor">
            <summary>
            <para>Constructs a new instance of the collection class. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new instance of the collection class with an initial capacity specified by the argument. </para>
            </summary>
            <param name="minimumCapacity">The collection is created with a capacity sufficient to hold this many items without reallocating storage. </param>
        </member>
        <member name="E:Cognex.Vision.Meta.MemberMetaCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MemberMetaCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MemberMetaCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MemberMetaCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MemberMetaCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MemberMetaCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MemberMetaCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MemberMetaCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MemberMetaCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MemberMetaCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MemberMetaCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MemberMetaCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MemberMetaCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MemberMetaCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MemberMetaCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.Add(Cognex.Vision.Meta.IMemberMeta)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.MemberMetaCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Meta.MemberMetaCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.MemberMetaCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Meta.MemberMetaCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.Contains(Cognex.Vision.Meta.IMemberMeta)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.IndexOf(Cognex.Vision.Meta.IMemberMeta)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.Insert(System.Int32,Cognex.Vision.Meta.IMemberMeta)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.MemberMetaCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Meta.MemberMetaCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.setItem(System.Int32,Cognex.Vision.Meta.IMemberMeta)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.MemberMetaCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Meta.MemberMetaCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.MemberMetaCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Meta.MemberMetaCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.Remove(Cognex.Vision.Meta.IMemberMeta)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.MemberMetaCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Meta.MemberMetaCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.MemberMetaCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Meta.MemberMetaCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.op_Equality(Cognex.Vision.Meta.MemberMetaCollection,Cognex.Vision.Meta.MemberMetaCollection)">
            <summary>Compares the equality of two MemberMetaCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.op_Inequality(Cognex.Vision.Meta.MemberMetaCollection,Cognex.Vision.Meta.MemberMetaCollection)">
            <summary>Compares the inequality of two MemberMetaCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.CopyTo(Cognex.Vision.Meta.IMemberMeta[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MemberMetaCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Meta.IMemberMeta})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.Meta.IHaveFakePropertyMeta">
            <summary>
            <para>Interface implemented by types to advertise that they support additional <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see>. <see cref="T:Cognex.Vision.Meta.FakePropertyMeta">FakePropertyMeta</see> instances returned by a type contain reflection based information that allows for binding to methods that behave generally like properties. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.Meta.MethodMetaCollection">
            <summary>
            <para>A Collection of <see cref="T:Cognex.Vision.Meta.MethodMeta">MethodMeta</see> instances. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.#ctor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Meta.MethodMetaCollection">MethodMetaCollection</see> Constructor. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.#ctor(System.Int64)">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Meta.MethodMetaCollection">MethodMetaCollection</see> Constructor. </para>
            </summary>
            <param name="minimumCapacity">Sets the initial capacity of the collection </param>
        </member>
        <member name="E:Cognex.Vision.Meta.MethodMetaCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MethodMetaCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MethodMetaCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MethodMetaCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MethodMetaCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MethodMetaCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MethodMetaCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MethodMetaCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MethodMetaCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MethodMetaCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.MethodMetaCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMetaCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMetaCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMetaCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.MethodMetaCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.Add(Cognex.Vision.Meta.MethodMeta)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.MethodMetaCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Meta.MethodMetaCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.MethodMetaCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Meta.MethodMetaCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.Contains(Cognex.Vision.Meta.MethodMeta)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.IndexOf(Cognex.Vision.Meta.MethodMeta)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.Insert(System.Int32,Cognex.Vision.Meta.MethodMeta)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.MethodMetaCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Meta.MethodMetaCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.setItem(System.Int32,Cognex.Vision.Meta.MethodMeta)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.MethodMetaCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Meta.MethodMetaCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.MethodMetaCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Meta.MethodMetaCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.Remove(Cognex.Vision.Meta.MethodMeta)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.MethodMetaCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Meta.MethodMetaCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.MethodMetaCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Meta.MethodMetaCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.op_Equality(Cognex.Vision.Meta.MethodMetaCollection,Cognex.Vision.Meta.MethodMetaCollection)">
            <summary>Compares the equality of two MethodMetaCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.op_Inequality(Cognex.Vision.Meta.MethodMetaCollection,Cognex.Vision.Meta.MethodMetaCollection)">
            <summary>Compares the inequality of two MethodMetaCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.CopyTo(Cognex.Vision.Meta.MethodMeta[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.MethodMetaCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Meta.MethodMeta})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.Meta.ParameterMetaCollection">
            <summary>
            <para>A collection of <see cref="T:Cognex.Vision.Meta.ParameterMeta">ParameterMeta</see> instances. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.#ctor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Meta.ParameterMetaCollection">ParameterMetaCollection</see> Constructor. </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.#ctor(System.Int64)">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Meta.ParameterMetaCollection">ParameterMetaCollection</see> Constructor. </para>
            </summary>
            <param name="minimumCapacity">Sets the initial capacity of the collection </param>
        </member>
        <member name="E:Cognex.Vision.Meta.ParameterMetaCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.ParameterMetaCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.ParameterMetaCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.ParameterMetaCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.ParameterMetaCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.ParameterMetaCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.ParameterMetaCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.ParameterMetaCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.ParameterMetaCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.ParameterMetaCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.ParameterMetaCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMetaCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMetaCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMetaCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.ParameterMetaCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.Add(Cognex.Vision.Meta.ParameterMeta)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.ParameterMetaCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Meta.ParameterMetaCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.ParameterMetaCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Meta.ParameterMetaCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.Contains(Cognex.Vision.Meta.ParameterMeta)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.IndexOf(Cognex.Vision.Meta.ParameterMeta)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.Insert(System.Int32,Cognex.Vision.Meta.ParameterMeta)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.ParameterMetaCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Meta.ParameterMetaCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.setItem(System.Int32,Cognex.Vision.Meta.ParameterMeta)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.ParameterMetaCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Meta.ParameterMetaCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.ParameterMetaCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Meta.ParameterMetaCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.Remove(Cognex.Vision.Meta.ParameterMeta)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.ParameterMetaCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Meta.ParameterMetaCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.ParameterMetaCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Meta.ParameterMetaCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.op_Equality(Cognex.Vision.Meta.ParameterMetaCollection,Cognex.Vision.Meta.ParameterMetaCollection)">
            <summary>Compares the equality of two ParameterMetaCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.op_Inequality(Cognex.Vision.Meta.ParameterMetaCollection,Cognex.Vision.Meta.ParameterMetaCollection)">
            <summary>Compares the inequality of two ParameterMetaCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.CopyTo(Cognex.Vision.Meta.ParameterMeta[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.ParameterMetaCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Meta.ParameterMeta})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.Meta.PropertyMetaCollection">
            <summary>
            <para>A Collection of <see cref="T:Cognex.Vision.Meta.PropertyMeta">PropertyMeta</see> instances. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.#ctor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Meta.PropertyMetaCollection">PropertyMetaCollection</see> Constructor </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.#ctor(System.Int64)">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Meta.PropertyMetaCollection">PropertyMetaCollection</see> Constructor </para>
            </summary>
            <param name="minimumCapacity">Sets the initial capacity of the collection </param>
        </member>
        <member name="E:Cognex.Vision.Meta.PropertyMetaCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.PropertyMetaCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.PropertyMetaCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.PropertyMetaCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.PropertyMetaCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.PropertyMetaCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.PropertyMetaCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.PropertyMetaCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.PropertyMetaCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.PropertyMetaCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.PropertyMetaCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMetaCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMetaCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMetaCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.PropertyMetaCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.Add(Cognex.Vision.Meta.PropertyMeta)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.PropertyMetaCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Meta.PropertyMetaCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.PropertyMetaCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Meta.PropertyMetaCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.Contains(Cognex.Vision.Meta.PropertyMeta)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.IndexOf(Cognex.Vision.Meta.PropertyMeta)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.Insert(System.Int32,Cognex.Vision.Meta.PropertyMeta)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.PropertyMetaCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Meta.PropertyMetaCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.setItem(System.Int32,Cognex.Vision.Meta.PropertyMeta)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.PropertyMetaCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Meta.PropertyMetaCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.PropertyMetaCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Meta.PropertyMetaCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.Remove(Cognex.Vision.Meta.PropertyMeta)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.PropertyMetaCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Meta.PropertyMetaCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.PropertyMetaCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Meta.PropertyMetaCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.ToString">
            <summary>
            <para>Returns a human readable string representation of the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.op_Equality(Cognex.Vision.Meta.PropertyMetaCollection,Cognex.Vision.Meta.PropertyMetaCollection)">
            <summary>Compares the equality of two PropertyMetaCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.op_Inequality(Cognex.Vision.Meta.PropertyMetaCollection,Cognex.Vision.Meta.PropertyMetaCollection)">
            <summary>Compares the inequality of two PropertyMetaCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.CopyTo(Cognex.Vision.Meta.PropertyMeta[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.PropertyMetaCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Meta.PropertyMeta})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="T:Cognex.Vision.Meta.TypeMetaCollection">
            <summary>
            <para>A collection of <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> instances. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.#ctor">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Meta.TypeMetaCollection">TypeMetaCollection</see> Constructor </para>
            </summary>
            <para>
            </para>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.#ctor(System.Int64)">
            <summary>
            <para>
            <see cref="T:Cognex.Vision.Meta.TypeMetaCollection">TypeMetaCollection</see> Constructor </para>
            </summary>
            <param name="minimumCapacity">Sets the initial capacity of the collection </param>
        </member>
        <member name="E:Cognex.Vision.Meta.TypeMetaCollection.Changed">
            <summary>
            <para>The actual event. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.TypeMetaCollection.Clearing">
            <summary>
            <para>Raised before the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.TypeMetaCollection.Cleared">
            <summary>
            <para>Raised after the collection is cleared. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.TypeMetaCollection.InsertingItem">
            <summary>
            <para>Raised before an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.TypeMetaCollection.InsertedItem">
            <summary>
            <para>Raised after an item is inserted. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.TypeMetaCollection.MovingItem">
            <summary>
            <para>Raised before an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.TypeMetaCollection.MovedItem">
            <summary>
            <para>Raised after an item is moved to a new index. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.TypeMetaCollection.RemovingItem">
            <summary>
            <para>Raised before an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.TypeMetaCollection.RemovedItem">
            <summary>
            <para>Raised after an item is removed. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.TypeMetaCollection.ReplacingItem">
            <summary>
            <para>Raised before an item is replaced. </para>
            </summary>
        </member>
        <member name="E:Cognex.Vision.Meta.TypeMetaCollection.ReplacedItem">
            <summary>
            <para>Raised after an item is replaced. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMetaCollection.Count">
            <summary>
            <para>Get the number of elements contained in this collection. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMetaCollection.IsReadOnly">
            <summary>
            <para>Get whether or not this collection is read-only. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMetaCollection.Capacity">
            <summary>
            <para>Get the capacity of this collection. This is the maximum number of items that may be stored in this collection without reallocation. Capacity is increased automatically as needed to hold added items. </para>
            </summary>
        </member>
        <member name="P:Cognex.Vision.Meta.TypeMetaCollection.ChangedEventSuspended">
            <summary>
            <para>Indicates if raising the ChangedEvent has been suspended. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.Add(Cognex.Vision.Meta.TypeMeta)">
            <summary>
            <para>Add an item to the end of this collection. </para>
            </summary>
            <param name="value">The item to add to the collection. </param>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.TypeMetaCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Meta.TypeMetaCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. </para>
            <para>
            <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.Clear">
            <summary>
            <para>Remove all items from this collection. </para>
            </summary>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.TypeMetaCollection.Clearing">Clearing</see> Raises before the collection is cleared. <see cref="E:Cognex.Vision.Meta.TypeMetaCollection.Cleared">Cleared</see> Raises after the collection is cleared. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.Contains(Cognex.Vision.Meta.TypeMeta)">
            <summary>
            <para>Determine whether an item is in this collection. </para>
            </summary>
            <param name="item">The item to search for in this collection. </param>
            <returns>
            <para>True if <b>item</b> is found in this collection, else false. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.IndexOf(Cognex.Vision.Meta.TypeMeta)">
            <summary>
            <para>Find the first item in this collection that matches the supplied item, and return its index. </para>
            </summary>
            <param name="item">The item to locate in this collection. </param>
            <returns>
            <para>The zero-based index of the first occurrence of the input item, or -1 if none exists. </para>
            </returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.Insert(System.Int32,Cognex.Vision.Meta.TypeMeta)">
            <summary>
            <para>Insert the given item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index at which to insert the item. </param>
            <param name="value">The item to be inserted into the collection. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.TypeMetaCollection.InsertingItem">InsertingItem</see> Raises before the item is inserted. <see cref="E:Cognex.Vision.Meta.TypeMetaCollection.InsertedItem">InsertedItem</see> Raises after the item is inserted. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.setItem(System.Int32,Cognex.Vision.Meta.TypeMeta)">
            <summary>
            <para>Replace the element at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to replace. </param>
            <param name="value">The item that will replace the item at the specified index. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.TypeMetaCollection.ReplacingItem">ReplacingItem</see> Raises before the item is replaced. <see cref="E:Cognex.Vision.Meta.TypeMetaCollection.ReplacedItem">ReplacedItem</see> Raises after the item is replaced. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.Move(System.Int32,System.Int32)">
            <summary>
            <para>Move the selected item to a new index in this collection. </para>
            </summary>
            <param name="fromIndex">The index of the item to move. </param>
            <param name="toIndex">The index to which the item will be moved. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If either <b>fromIndex</b> or <b>toIndex</b> is less than zero or is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.TypeMetaCollection.MovingItem">MovingItem</see> Raises before the item is moved. <see cref="E:Cognex.Vision.Meta.TypeMetaCollection.MovedItem">MovedItem</see> Raises after the item is moved. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Item property. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.Remove(Cognex.Vision.Meta.TypeMeta)">
            <summary>
            <para>Remove the specified item from this collection. </para>
            </summary>
            <param name="value">The item to remove from this collection. </param>
            <returns>
            <para>True if a match was found and the item removed, otherwise False. </para>
            </returns>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.TypeMetaCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Meta.TypeMetaCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Remove the item at the specified index. </para>
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
            <remarks>
            <para>
            <see cref="E:Cognex.Vision.Meta.TypeMetaCollection.RemovingItem">RemovingItem</see> Raises before the item is removed. <see cref="E:Cognex.Vision.Meta.TypeMetaCollection.RemovedItem">RemovedItem</see> Raises after the item is removed. <see cref="E:Cognex.Vision.IChangedEvent.Changed">Changed</see> Raises because this method changes the Count and Item properties. The following StateFlags may be affected:<list type="bullet">
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfCount">SfCount</see>
            </description>
            </item>
            <item>
            <description>
            <see cref="!:Cognex.Vision.Implementation.CollectionBase.SfItem">SfItem</see>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.Reserve(System.Int64)">
            <summary>
            <para>Set the collection capacity be at least the specified number of items. If <b>minimumCapacity</b> is greater than the current collection capacity, this method will cause the collection to reallocate its storage, increasing its capacity to at least <b>minimumCapacity</b>. Attempts to set capacity to a value less than or equal to the current value are ignored. </para>
            </summary>
            <param name="minimumCapacity">The desired minimum number of items that this collection should be able to store without requiring reallocation. </param>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.ResumeAndRaiseChangedEvent">
            <summary>
            <para>Re-enables raising of the ChangedEvent after SuspendChangedEvent has been called, and raises the ChangedEvent if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.SuspendChangedEvent">
            <summary>
            <para>Temporarily suspends the raising of the ChangedEvent. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.GetTypeMeta">
            <summary>
            <para>Get the <see cref="T:Cognex.Vision.Meta.TypeMeta">TypeMeta</see> that describes the type of this object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.ToString">
            <summary>
            <para>Returns a human readable string that represents the object. </para>
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.GetHashCode">
            <summary>Returns the hash code of this object.</summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.Equals(System.Object)">
            <summary>Compares the equality of this object with another.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.op_Equality(Cognex.Vision.Meta.TypeMetaCollection,Cognex.Vision.Meta.TypeMetaCollection)">
            <summary>Compares the equality of two TypeMetaCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.op_Inequality(Cognex.Vision.Meta.TypeMetaCollection,Cognex.Vision.Meta.TypeMetaCollection)">
            <summary>Compares the inequality of two TypeMetaCollection objects.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>True if the specified object is not equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.CopyTo(Cognex.Vision.Meta.TypeMeta[],System.Int32)">
            <summary>
            Copies all the elements of the collection to the specified one-dimensional array
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.TypeMetaCollection.AddRange(System.Collections.Generic.IEnumerable{Cognex.Vision.Meta.TypeMeta})">
            <summary>Adds the elements of the specified collection to the end of the collection.</summary>
            <param name="items">The collection of items to add to the collection.</param>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.ReadOnlyCollectionOfTypeMetaPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.ReadOnlyCollectionOfTypeMetaPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.ReadOnlyCollectionOfParameterMetaPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.ReadOnlyCollectionOfParameterMetaPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfFakePropertyMetaPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfFakePropertyMetaPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfFakePropertyMetaPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfFakePropertyMetaPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.ReadOnlyCollectionOfMethodMetaPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.ReadOnlyCollectionOfMethodMetaPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.ReadOnlyCollectionOfPropertyMetaPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.ReadOnlyCollectionOfPropertyMetaPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfIMemberMetaPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfIMemberMetaPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfIMemberMetaPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfIMemberMetaPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.ReadOnlyCollectionOfIMemberMetaPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.ReadOnlyCollectionOfIMemberMetaPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfMethodMetaPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfMethodMetaPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfMethodMetaPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfMethodMetaPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfParameterMetaPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfParameterMetaPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfParameterMetaPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfParameterMetaPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfPropertyMetaPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfPropertyMetaPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfPropertyMetaPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfPropertyMetaPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfTypeMetaPtr.GetItem(System.Int32)">
            <summary>Get the item at the specified index.</summary><param name="index">The zero-based index of the desired item.</param><exception cref="T:Cognex.Vision.ArgumentOutOfRangeException">If <b>index</b> is less than zero or <b>index</b> is greater than or equal to Count. </exception>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfTypeMetaPtr.GetTypeMeta">
            <summary>Get the description of the object type.</summary><returns> that describes the type of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfTypeMetaPtr.ToString">
            <summary>Converts this object to a string representation.</summary><returns>A string representation of this object.</returns>
        </member>
        <member name="M:Cognex.Vision.Meta.Implementation.CollectionOfTypeMetaPtr.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator">IEnumerator</see> for the collection.
            </summary>
        </member>
        <member name="T:Cognex.Vision.Meta.InvalidCastConstants">
            <summary>
            <para>Controls handling of invalid casts when traversing Vision property paths. </para>
            </summary>
            <remarks>
            <para>
            <para>When evaluating a property path, Vision will use information from the static type system that says what properties <b>could</b> be at a particular node and combine this with information from the runtime object instances that currently <b>are</b> found along the path.</para>
            <para>Think of a path like "Tool.SearchRegion.(Circle).Radius"</para>
            <para>If, when browsing to create this path, we looked strictly at what the type system alone says can be at that path we would lose some valuable context about what properties the user might be interested based on the object instances that are actually found along this path right now. For instance it might be harder for the user to easily select a likely property such as "Radius" because by default we'd just display the properties of <see cref="T:Cognex.Vision.IRegion">IRegion</see>, even though the instance held by SearchRegion is currently a <see cref="T:Cognex.Vision.Circle">Circle</see>.</para>
            <para>If, on the other hand, we are overly strict about evaluating the paths based on the object instances they were originally created with, we might lose the ability to evaluate a perfectly reasonable path because of the type of the object instance when the path was first created.</para>
            <para>Think now of a path like "Tool.SearchRegion.(Circle).CenterX"</para>
            <para>Imagine the user changes the SearchRegion to a <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>, Vision users will reasonably expect this path (and links to/from it) to still be valid (because <see cref="T:Cognex.Vision.Rectangle">Rectangle</see> contains a CenterX property). </para>
            </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.Meta.InvalidCastConstants.Throw">
            <summary>
            <para>Throw if we encounter an InvalidCast while traversing a property path. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.Meta.InvalidCastConstants.TrueToPath">
            <summary>
            <para>Evaluate the path as defined by the parts of the path (including type cast nodes) </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.Meta.InvalidCastConstants.TrueToObject">
            <summary>
            <para>Allow ignoring static type information specified in the path in order to support cases where we can still successfully evaluate the path. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.VisionExceptionCodes">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.NoException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.GenericException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.SecurityViolationException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.OutOfMemoryException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.TimeoutExpiredException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.OperatorNotTrainedException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ArgumentNullException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ImageNoPixelsException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.InvalidOperationException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.InvalidArgumentException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ArgumentException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ArgumentOutOfRangeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.InternalErrorException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.NotSupportedException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ImageException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ImageAllocatedException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ImageAllocateSizeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ImageClippedException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ImageBadCoordException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ImageBadTypeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ImageNoTreeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ImageBadSelectedSpaceNameException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ImageBadSizeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.TransformException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.TransformNotLinearException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.TransformSingularPointException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.TransformSingularException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.TransformCantPopEmptyComposedException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.TransformTooFewPointsLinFitException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.NotImplementedException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.FileOpenException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.FileReadException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.FileWriteException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.NoFileOpenException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.BadFileFormatException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.BadFileModeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.KeyNotFoundException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.SpaceTreeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.SpaceTreeDuplicateChildNameException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.SpaceTreeFixturedSpaceNameCollisionException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.SpaceTreeInvalidNameSyntaxException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.SpaceTreeNameNotInTreeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.SpaceTreeNameNotUniqueException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.SpaceTreeAddCreateCircularReferenceException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeNotRectangleException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeNotAffineRectException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeNoCompositeChildrenException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeCoordinatesMustDifferException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeDegeneratePolygonException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeCannotEncloseException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeDegenerateShapeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeComplexPolygonException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeCantParentShapeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeCannotConvertException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeBadContourSegTypeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeBadContourSegConnException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeAddWontBreakContourException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapePenKeyInUseException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeBadContourSegmentSetException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeBadContourChainClosureException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeDegenerateContourException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeAlreadyAShapeModelException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ShapeDegenerateEllipticalArcSegException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.IteratorInvalidIteratorException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.IteratorInvalidPositionException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.IteratorEndOfContainerException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.InternalShapeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.DegenerateContourException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.EndOfContourException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.OperatorNoInputImageException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.OperatorInvalidRegionException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.OperatorNoTrainImageException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.OperatorNoRunParamsException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.OperatorInvalidShapeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ToolNoOperatorException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ToolNoResultException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.IOLineNotEnabledException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.IOLineCannotEnableException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.NoDataAvailableToProcessException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.RegionSizeMismatchException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.SerializationException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.InvalidCastException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.CompositeException">
            <summary>
            </summary>
        </member>
        <member name="F:Cognex.Vision.VisionExceptionCodes.ScriptException">
            <summary>
            </summary>
        </member>
        <member name="T:Cognex.Vision.PinModeConstants">
            <summary>
            <para>An enumeration used to describe how a <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPin</see> manages its value. Generally, <see cref="T:Cognex.Vision.Implementation.ToolPin">ToolPins</see> on a <see cref="!:Cognex.Vision.Framework.ToolBlock">ToolBlock</see> employ StoreValue mode while other tools employ FetchValue mode. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PinModeConstants.StoreValue">
            <summary>
            <para>Store the tool pin value. Suitable for ToolBlocks. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PinModeConstants.FetchValue">
            <summary>
            <para>Fetch the tool pin value. Suitable for most non-ToolBlock tools. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.LinkStateConstants">
            <summary>
            <para>Enumeration of the possible states of a Link/DataBinding. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LinkStateConstants.Valid">
            <summary>
            <para>The connection is valid. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LinkStateConstants.Invalid">
            <summary>
            <para>The connection is broken/invalid, usually because an exception occurred when evaluating the path to the source or destination. </para>
            </summary>
            <para>Note: Invalid Links/DataBindings are displayed as red-dashed lines in the GUI </para>
        </member>
        <member name="F:Cognex.Vision.LinkStateConstants.All">
            <summary>
            <para>Union of all possible states, currently just Valid or Invalid. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.ToolResultConstants">
            <summary>
            <para>Enumeration of constants that indicate the overall result of running a tool. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ToolResultConstants.Accept">
            <summary>
            <para>Indicates that the tool ran successfully and did not generate a warning or reject condition. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ToolResultConstants.Warning">
            <summary>
            <para>Indicates that the tool ran successfully but generated a warning condition. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ToolResultConstants.Reject">
            <summary>
            <para>Indicates that the tool ran successfully but generated a reject condition. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ToolResultConstants.Error">
            <summary>
            <para>Indicates that the tool did not run successfully. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.RecordUsageConstants">
            <summary>
            <para>Constants that can be assigned to the RecordUsage property of a CogRecord to specify how it is used. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RecordUsageConstants.Tool">
            <summary>
            <para>Top-level record of a vision tool. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RecordUsageConstants.Configuration">
            <summary>
            <para>Configuration data, such as a region of interest. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RecordUsageConstants.Pattern">
            <summary>
            <para>A stored pattern, mask, template, etc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RecordUsageConstants.Input">
            <summary>
            <para>An input, such as an input image. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RecordUsageConstants.Diagnostic">
            <summary>
            <para>Information generated for diagnostic purposes. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RecordUsageConstants.Result">
            <summary>
            <para>A result or output, such as an output image or result graphic. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RecordUsageConstants.Temporary">
            <summary>
            <para>A temporary record, typically added by an edit control. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RecordUsageConstants.QuickBuild">
            <summary>
            <para>A QuickBuild record, all records created by QuickBuild have this value. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RecordUsageConstants.ToolDefined">
            <summary>
            <para>Tool-defined record usage constants begin here, and end at 0x4FFFFFFF. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RecordUsageConstants.UserDefined">
            <summary>
            <para>User-defined record usage constants begin here, and end at 0x7FFFFFFF. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.ToolCopyModeConstants">
            <summary>
            <para>Enumeration of modes that tool copying supports. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ToolCopyModeConstants.ReGuid">
            <summary>
            <para>Replace tool IDs with unique new values. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.GraphicLineStyleConstants">
            <summary>
            <para>Enumeration of line style constants for drawing graphics. </para>
            </summary>
            <remarks>
            <para>
            <see cref="T:Cognex.Vision.Line">Line</see> style constants for drawing graphics. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.GraphicLineStyleConstants.Solid">
            <summary>
            <para>A solid line. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicLineStyleConstants.Dash">
            <summary>
            <para>A dashed line. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicLineStyleConstants.Dot">
            <summary>
            <para>A dotted line. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicLineStyleConstants.DashDot">
            <summary>
            <para>A dashed and doted line. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicLineStyleConstants.DashDotDot">
            <summary>
            <para>A dashed and double-dotted line. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CopyShapeConstants">
            <summary>
            <para>Enumeration of copy constants for duplicating shapes. </para>
            </summary>
            <remarks>
            <para>Enumeration that specifies which aspects of shapes to copy. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.CopyShapeConstants.GeometryOnly">
            <summary>
            <para>Only the geometric properties that define the shape will be copied into the new shape. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CopyShapeConstants.BasicGraphics">
            <summary>
            <para>Copy the <see cref="T:Cognex.Vision.IGraphic">IGraphic</see> and <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see> properties into the new shape. Does not copy the enabled degrees of freedom. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CopyShapeConstants.DOFs">
            <summary>
            <para>Copy the enabled degrees of freedom into the shape. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CopyShapeConstants.Children">
            <summary>
            <para>Copy any children of the current shape into the new shape. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CopyShapeConstants.All">
            <summary>
            <para>Copy all properties including child shapes into the new shape. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.GraphicDOFConstants">
            <summary>
            <para>Enumeration for the degree of freedom for any shape. </para>
            </summary>
            <remarks>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.IGraphicInteractive.GraphicDOFEnableBase">enabled</see> for a <see cref="T:Cognex.Vision.IGraphicInteractive">IGraphicInteractive</see>. You can OR these constants to combine different degrees of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.GraphicDOFConstants.None">
            <summary>
            <para>Disable all degrees of freedom. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicDOFConstants.Position">
            <summary>
            <para>Allow changing of position. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicDOFConstants.All">
            <summary>
            <para>Enable all degrees of freedom. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.StandardCursorConstants">
            <summary>
            <para>Enumerates the standard mouse cursors that can be used with interactive graphics. The selected cursor will appear in the display whenever the mouse is hovering near the interactive graphic. </para>
            </summary>
            <remarks>
            <para>Enumerates the standard mouse cursors used for tool graphics. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.TipTextGraphic">
            <summary>
            <para>This cursor indicates an interactive graphic that may have associated TipText, but cannot be selected or manipulated in any way. </para>
            </summary>
            <remarks>
            <para>An attention cursor used to indicate that a graphic has tooltip text available. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.SelectableGraphic">
            <summary>
            <para>This cursor indicates an interactive graphic that can be selected, but not manipulated. </para>
            </summary>
            <remarks>
            <para>An attention cursor used to indicate that a graphic is selectable (but not manipulable). </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.ManipulableGraphic">
            <summary>
            <para>This cursor indicates an interactive graphic that can be selected and manipulated. </para>
            </summary>
            <remarks>
            <para>An attention cursor used to indicate that a graphic is manipulable. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.UnconstrainedSizeHandle">
            <summary>
            <para>This cursor indicates an interactive 'handle' graphic. Manipulating the handle will change the size of the graphic to which the handle is attached. </para>
            </summary>
            <remarks>
            <para>A handle cursor used to indicate that the graphic can be resized without restriction. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.AspectConstrainedSizeHandle">
            <summary>
            <para>This cursor indicates an interactive 'handle' graphic. Manipulating the handle will change the size of the graphic to which the handle is attached, while retaining that graphic's aspect ratio. </para>
            </summary>
            <remarks>
            <para>A handle cursor used to indicate that a graphic is resizable but that its aspect ratio is fixed. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.RotateHandle">
            <summary>
            <para>This cursor indicates an interactive 'handle' graphic. Manipulating the handle will change the rotation of the graphic to which the handle is attached. </para>
            </summary>
            <remarks>
            <para>A handle cursor used to indicate that a handle is used for rotation. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.SkewHandle">
            <summary>
            <para>This cursor indicates an interactive 'handle' graphic. Manipulating the handle will change the skew of the graphic to which the handle is attached. </para>
            </summary>
            <remarks>
            <para>A handle cursor used to indicate that a handle is used for skew. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.SizeHandleNS">
            <summary>
            <para>This cursor indicates an interactive 'handle' graphic. Manipulating the handle will change the size of the graphic in the North-South vertical direction. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.SizeHandleNESW">
            <summary>
            <para>This cursor indicates an interactive 'handle' graphic. Manipulating the handle will change the size of the graphic in the NorthEast-SouthWest diagonal direction. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.SizeHandleNWSE">
            <summary>
            <para>This cursor indicates an interactive 'handle' graphic. Manipulating the handle will change the size of the graphic in the NorthWest-SouthEast diagonal direction. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.SizeHandleEW">
            <summary>
            <para>This cursor indicates an interactive 'handle' graphic. Manipulating the handle will change the size of the graphic in the East-West horizontal direction. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.BendEndHandle">
            <summary>
            <para>This cursor indicates an interactive 'handle' graphic. Manipulating the handle will bend the end(s) of the graphic. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.VertexAdd">
            <summary>
            <para>This cursor indicates an interactive graphic to which a vertex may be added. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.VertexRemove">
            <summary>
            <para>This cursor indicates an interactive graphic from which a vertex may be removed. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.StandardCursorConstants.Default">
            <summary>
            <para>This cursor is the default for all interactive graphics. It appears as a small '+' in the display. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.RectangleDOFConstants">
            <summary>
            <para>Enumeration for the degree of freedom constants of an interactive rectangle shape. </para>
            </summary>
            <remarks>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.Rectangle.GraphicDOFEnable">GraphicDOFEnable</see> for an interactive <see cref="T:Cognex.Vision.Rectangle">Rectangle</see>. You can OR these constants to combine different degrees of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.RectangleDOFConstants.None">
            <summary>
            <para>Disables interactive manipulation of all degrees of freedom of the rectangle. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RectangleDOFConstants.Size">
            <summary>
            <para>Enables interactive manipulation of size of the rectangle. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RectangleDOFConstants.Scale">
            <summary>
            <para>Enables interactive manipulation of relative X,Y scale of the rectangle. </para>
            </summary>
            <remarks>
            <para>Allows changing the height and width while keeping the ratio of their lengths constant. If <see cref="T:Cognex.Vision.RectangleDOFConstants">Size</see> is enabled, it overrides this degree of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.RectangleDOFConstants.Position">
            <summary>
            <para>Enables interactive manipulation of X,Y position of the rectangle. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RectangleDOFConstants.All">
            <summary>
            <para>Enables interactive manipulation of all degrees of freedom of the rectangle. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.AddSpaceConstants">
            <summary>
            <para>In a coordinate space tree each child of a given parent space must have a unique name. This enumeration specifies what action will be taken when the user attempts to add a duplicate child space name to an existing parent in the tree. </para>
            </summary>
            <remarks>
            <para>In a <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> each child of a given parent space must have a unique name. This enumeration specifies what action to take if you try to add a coordinate space to a parent space that already has an immediate child with the same name as the one you are trying to add. The options are to return an error, replace the named item, or do nothing. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.AddSpaceConstants.DuplicateIsError">
            <summary>
            <para>Attempts to add a duplicate child space will fail. An error will be returned. </para>
            </summary>
            <remarks>
            <para>Attempts to add a duplicate child space will fail, and an error will be returned. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.AddSpaceConstants.ReplaceDuplicate">
            <summary>
            <para>Attempts to add a duplicate child space will, instead, replace the transform of the existing child with the same name. Attempts to add a duplicate child tree will replace the entire subtree of the existing child, as well as its transform. </para>
            </summary>
            <remarks>
            <para>Attempts to add a duplicate child space will, instead, replace the transform of the existing child with the same name. Attempts to add a duplicate child tree will replace the entire subtree of the existing child, as well as its transform. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.AddSpaceConstants.IgnoreDuplicate">
            <summary>
            <para>Attempts to add a duplicate child space will be ignored. No error will be returned. </para>
            </summary>
            <remarks>
            <para>Attempts to add a duplicate child space will be ignored. No error will be returned. </para>
            </remarks>
        </member>
        <member name="T:Cognex.Vision.SpaceTreePathnameConstants">
            <summary>
            <para>This enumeration controls the formatting of coordinate space names that are returned from a <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see>. </para>
            </summary>
            <remarks>
            <para>This enumeration controls the formatting of <see cref="T:Cognex.Vision.CoordinateSpaceTree">coordinate space names</see> that are returned from a coordinate space tree ( <see cref="T:Cognex.Vision.CoordinateSpaceTree">CoordinateSpaceTree</see> ). </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.SpaceTreePathnameConstants.None">
            <summary>
            <para>Returned space names will be expressed as a single, non-qualified name. </para>
            </summary>
            <remarks>
            <para>Express space names as a single, nonqualified name. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.SpaceTreePathnameConstants.Full">
            <summary>
            <para>Returned space names will be expressed as a full pathname through the coordinate space tree. </para>
            </summary>
            <remarks>
            <para>Express space names as a full pathname through the coordinate space tree. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.SpaceTreePathnameConstants.Partial">
            <summary>
            <para>Returned space names will be expressed as a partial pathname through the coordinate space tree, starting at the space named by the first argument of the method that you called. </para>
            </summary>
            <remarks>
            <para>Express space names as a partial pathname through the coordinate space tree object, starting at the space specified by the first method argument. </para>
            </remarks>
        </member>
        <member name="T:Cognex.Vision.ImageCopyModeConstants">
            <summary>
            <para>Enumeration of modes that image copying supports. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ImageCopyModeConstants.CopyPixels">
            <summary>
            <para>Copying the image copies the pixel data, too. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ImageCopyModeConstants.SharePixels">
            <summary>
            <para>Copying the image shares the pixel data with original image. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ImageCopyModeConstants.NoPixels">
            <summary>
            <para>Copies everything in the image except the pixels. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ImageCopyModeConstants.FullCopy">
            <summary>
            <para>Copies everything including pixel data, coordinate space tree and PixelFromRoot transform. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.RectangleAffineDOFConstants">
            <summary>
            <para>Enumeration for the DOF constants of an interactive affine rectangle shape. </para>
            </summary>
            <remarks>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.RectangleAffine.GraphicDOFEnable">GraphicDOFEnable</see> for an interactive <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see>. You can OR these constants to combine different degrees of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.RectangleAffineDOFConstants.None">
            <summary>
            <para>Disables interactive manipulation of all degrees of freedom of the affine rectangle. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RectangleAffineDOFConstants.Size">
            <summary>
            <para>Enables interactive manipulation of size of the affine rectangle. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RectangleAffineDOFConstants.Rotation">
            <summary>
            <para>Enables interactive manipulation of rotation of the affine rectangle. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RectangleAffineDOFConstants.Skew">
            <summary>
            <para>Enables interactive manipulation of skew of the affine rectangle. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RectangleAffineDOFConstants.Scale">
            <summary>
            <para>Enables interactive manipulation of relative scale of the X length to the Y length of the affine rectangle. </para>
            </summary>
            <remarks>
            <para>Allows changing the height and width while keeping the ratio of their lengths constant. If <see cref="F:Cognex.Vision.RectangleAffineDOFConstants.Size">Size</see> is enabled, it overrides this degree of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.RectangleAffineDOFConstants.Position">
            <summary>
            <para>Enables interactive manipulation of X,Y position of the affine rectangle. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RectangleAffineDOFConstants.All">
            <summary>
            <para>Enables interactive manipulation of all degrees of freedom of the affine rectangle. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.RectangleAffineDirectionAdornmentConstants">
            <summary>
            <para>Enumeration for affine rectangle direction adornments. </para>
            </summary>
            <remarks>
            <para>Enumeration for affine rectangle direction adornments. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.RectangleAffineDirectionAdornmentConstants.None">
            <summary>
            <para>Configures the affine rectangle to show no adornment in this direction. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RectangleAffineDirectionAdornmentConstants.Arrow">
            <summary>
            <para>Configures the affine rectangle to show an open arrow adornment in this direction. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RectangleAffineDirectionAdornmentConstants.SolidArrow">
            <summary>
            <para>Configures the affine rectangle to show a solid arrow adornment in this direction. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.GraphicMultiPenPenTypeConstants">
            <summary>
            <para>Enumeration of pen types in <see cref="T:Cognex.Vision.IGraphicMultiPen">IGraphicMultiPen</see>. </para>
            </summary>
            <remarks>
            <para>Enumeration of <see cref="M:Cognex.Vision.IGraphicMultiPen.GetPenType(System.Int32)">pen types</see> in GeneralContour. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.GraphicMultiPenPenTypeConstants.Simple">
            <summary>
            <para>The pen is a simple type consisting of a color, line style and line width. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicMultiPenPenTypeConstants.Interactive">
            <summary>
            <para>The pen is an interactive type consisting of one simple pen for each of the three interactive states (normal, selected, and dragged). </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.EllipticalArcDirectionAdornmentConstants">
            <summary>
            <para>Enumeration for elliptical arc direction adornments. These adornment arrows indicate the direction from the start point of the arc to its end point. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcDirectionAdornmentConstants.None">
            <summary>
            <para>Configure the elliptical arc to show no direction adornment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcDirectionAdornmentConstants.Arrow">
            <summary>
            <para>Configure the elliptical arc to show an open arrow adornment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcDirectionAdornmentConstants.SolidArrow">
            <summary>
            <para>Configure the elliptical arc to show a solid arrow adornment. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.EllipticalArcAdornmentConstants">
            <summary>
            <para>Enumeration for elliptical arc endpoint adornments. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcAdornmentConstants.None">
            <summary>
            <para>Show no adornments at the end of the elliptical arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcAdornmentConstants.Arrow">
            <summary>
            <para>Show an open arrow head at the end of the elliptical arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcAdornmentConstants.SolidArrow">
            <summary>
            <para>Show a solid (filled) arrow head at the end of the elliptical arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcAdornmentConstants.SolidSquare">
            <summary>
            <para>Show a solid (filled) square at the end of the elliptical arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcAdornmentConstants.SolidCircle">
            <summary>
            <para>Show a solid (filled) circle at the end of the elliptical arc. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.EllipticalArcDOFConstants">
            <summary>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.EllipticalArc.GraphicDOFEnable">enabled</see> for an interactive <see cref="T:Cognex.Vision.EllipticalArc">EllipticalArc</see>. You can OR these constants to combine different degrees of freedom. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcDOFConstants.None">
            <summary>
            <para>Disables interactive manipulation of the elliptical arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcDOFConstants.EndPoints">
            <summary>
            <para>Enables interactive manipulation of both endpoints of the elliptical arc. Notice that changing an endpoint is likely to affect the center, radii, rotation, start and span of the arc, but will not modify the other endpoint. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcDOFConstants.ArcSpan">
            <summary>
            <para>Enables interactive manipulation of the length of the elliptical arc. Either end of the arc can be slid along the underlying ellipse, without changing the ellipse's center, radii or rotation. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcDOFConstants.Bend">
            <summary>
            <para>Enables interactive manipulation of the curvature of the elliptical arc. Notice that changing the curvature is likely to affect the center, radii, rotation, start and span of the arc, but will not modify its endpoints. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcDOFConstants.ConstrainedSpan">
            <summary>
            <para>Enables interactive manipulation of the curvature of the elliptical arc while constraining it to pass through the endpoints and the bend handle. This DOF allows the user to change the fraction of the full ellipse that appears between the arc endpoints. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcDOFConstants.ArcSpanFourPi">
            <summary>
            <para>If interactive manipulation of the <see cref="P:Cognex.Vision.EllipticalArc.AngleSpan">arc's span</see> is enabled, setting this bit allows the span to vary between 4 * Pi and -4 * Pi. The limits for interactive manipulation are 2 * Pi and -2 * Pi if this bit is not set. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcDOFConstants.Position">
            <summary>
            <para>Enables interactive manipulation of the X,Y position of the elliptical arc. Changing the position will not affect the radii, rotation, start or span of the arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalArcDOFConstants.All">
            <summary>
            <para>Enables interactive manipulation of all degrees of freedom for the elliptical arc. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.EllipseDOFConstants">
            <summary>
            <para>Enumeration for the degree of freedom constants of an interactive ellipse shape. </para>
            </summary>
            <remarks>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.Ellipse.GraphicDOFEnable">GraphicDOFEnable</see> for an interactive <see cref="T:Cognex.Vision.Ellipse">Ellipse</see> shape. You can OR these constants to combine different degrees of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.EllipseDOFConstants.None">
            <summary>
            <para>Disable all degrees of freedom. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipseDOFConstants.Size">
            <summary>
            <para>Enables interactive manipulation of both radii of the ellipse independently. </para>
            </summary>
            <remarks>
            <para>Allows changing the length of both radii independently of each other. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.EllipseDOFConstants.Scale">
            <summary>
            <para>Enables interactive manipulation of both radii of the ellipse while keeping the ratio of their lengths constant. Note: If the 'Size' DOF is enabled, it will override this one. </para>
            </summary>
            <remarks>
            <para>Allows changing the radii of the ellipse while keeping the ratio of their lengths constant. If <see cref="F:Cognex.Vision.EllipseDOFConstants.Size">Size</see> is enabled, it overrides this degree of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.EllipseDOFConstants.Rotation">
            <summary>
            <para>Enables interactive manipulation of the rotation of the ellipse. </para>
            </summary>
            <remarks>
            <para>Allow rotation of the ellipse. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.EllipseDOFConstants.Position">
            <summary>
            <para>Enables interactive manipulation of the X,Y position of the ellipse's center. </para>
            </summary>
            <remarks>
            <para>Allow changing of position. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.EllipseDOFConstants.All">
            <summary>
            <para>Enables interactive manipulation of all degrees of freedom for the ellipse. </para>
            </summary>
            <remarks>
            <para>Enable all degrees of freedom. </para>
            </remarks>
        </member>
        <member name="T:Cognex.Vision.EllipseDirectionAdornmentConstants">
            <summary>
            <para>Enumeration for ellipse direction adornments. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipseDirectionAdornmentConstants.None">
            <summary>
            <para>Configures the ellipse to show no adornment in this direction. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipseDirectionAdornmentConstants.Arrow">
            <summary>
            <para>Configures the ellipse to show an open arrow adornment in this direction. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipseDirectionAdornmentConstants.SolidArrow">
            <summary>
            <para>Configures the ellipse to show a solid arrow adornment in this direction. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.LineSegmentAdornmentConstants">
            <summary>
            <para>Enumeration for line segment endpoint adornments. </para>
            </summary>
            <remarks>
            <para>Enumeration for line segment endpoint adornments. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.LineSegmentAdornmentConstants.None">
            <summary>
            <para>Show no adornments at the end of the line segment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineSegmentAdornmentConstants.Arrow">
            <summary>
            <para>Show an open arrow head at the end of the line segment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineSegmentAdornmentConstants.SolidArrow">
            <summary>
            <para>Show a solid (filled) arrow head at the end of the line segment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineSegmentAdornmentConstants.SolidSquare">
            <summary>
            <para>Show a solid (filled) square at the end of the line segment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineSegmentAdornmentConstants.SolidCircle">
            <summary>
            <para>Show a solid (filled) circle at the end of the line segment. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.LineSegmentDOFConstants">
            <summary>
            <para>Enumeration for the degree of freedom constants of an interactive line segment. </para>
            </summary>
            <remarks>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.LineSegment.GraphicDOFEnable">GraphicDOFEnable</see> for an interactive <see cref="T:Cognex.Vision.LineSegment">LineSegment</see>. You can OR these constants to combine different degrees of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.LineSegmentDOFConstants.None">
            <summary>
            <para>Disables all interactive modification of the line segment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineSegmentDOFConstants.StartPoint">
            <summary>
            <para>Enables interactive manipulation of the start point of the line segment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineSegmentDOFConstants.EndPoint">
            <summary>
            <para>Enables interactive manipulation of the end point of the line segment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineSegmentDOFConstants.BothPoints">
            <summary>
            <para>Enables interactive manipulation of both points of the line segment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineSegmentDOFConstants.Position">
            <summary>
            <para>Enables interactive manipulation of the position of the line segment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineSegmentDOFConstants.All">
            <summary>
            <para>Enables interactive manipulation of all degrees of freedom of the line segment. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.LineAdornmentConstants">
            <summary>
            <para>Enumeration for the line's reference point adornment. </para>
            </summary>
            <remarks>
            <para>Enumeration for a <see cref="T:Cognex.Vision.Line">Line</see> reference point <see cref="P:Cognex.Vision.Line.Adornment">adornment</see>. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.LineAdornmentConstants.None">
            <summary>
            <para>Show no adornment on the line. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineAdornmentConstants.ArrowAtReferencePoint">
            <summary>
            <para>Show an open arrow head pointing in the direction of the line at the reference point on the line. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineAdornmentConstants.SolidArrowAtReferencePoint">
            <summary>
            <para>Show a solid (filled) arrow head pointing in the direction of the line at the reference point on the line. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineAdornmentConstants.ArrowInDisplay">
            <summary>
            <para>Show an open arrow head pointing in the direction of the line at the center point of the portion of the line in the display. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineAdornmentConstants.SolidArrowInDisplay">
            <summary>
            <para>Show a solid (filled) arrow head pointing in the direction of the line at the center point of the portion of the line in the display. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.LineDOFConstants">
            <summary>
            <para>Enumeration for the graphic degree of freedom enable constants of an interactive line. </para>
            </summary>
            <remarks>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.Line.GraphicDOFEnable">GraphicDOFEnable</see> for an interactive <see cref="T:Cognex.Vision.Line">Line</see>. You can OR these constants to combine different degrees of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.LineDOFConstants.None">
            <summary>
            <para>Disables all interactive modification of the <see cref="T:Cognex.Vision.Line">Line</see>. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineDOFConstants.Rotation">
            <summary>
            <para>Enables interactive manipulation of the rotation of the <see cref="T:Cognex.Vision.Line">Line</see> about the reference point. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineDOFConstants.Position">
            <summary>
            <para>Enables interactive repositioning of the <see cref="T:Cognex.Vision.Line">Line</see>. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.LineDOFConstants.All">
            <summary>
            <para>Enables all degrees of freedom for the <see cref="T:Cognex.Vision.Line">Line</see>. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CircleDOFConstants">
            <summary>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.Circle.GraphicDOFEnable">enabled</see> for an interactive <see cref="T:Cognex.Vision.Circle">Circle</see> shape. You can OR these constants to combine different degrees of freedom.</para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircleDOFConstants.None">
            <summary>
            <para>Disables interactive manipulation of all degrees of freedom of the circle. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircleDOFConstants.Radius">
            <summary>
            <para>Enables interactive manipulation of the circle's radius. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircleDOFConstants.Position">
            <summary>
            <para>Enables interactive manipulation of the X,Y position of the circle's center. Allow changing of position. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircleDOFConstants.All">
            <summary>
            <para>Enables interactive manipulation of all degrees of freedom of the circle. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CircularArcDirectionAdornmentConstants">
            <summary>
            <para>Enumeration for circular arc direction adornments. These adornment arrows can be used indicate the radial or arc direction. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcDirectionAdornmentConstants.None">
            <summary>
            <para>Show no adornment to indicate arc direction. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcDirectionAdornmentConstants.Arrow">
            <summary>
            <para>Show an open arrow adornment to indicate arc direction. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcDirectionAdornmentConstants.SolidArrow">
            <summary>
            <para>Show a solid arrow adornment to indicate arc direction. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CircularArcDisplayModeConstants">
            <summary>
            <para>Enumeration for circular arc display modes. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcDisplayModeConstants.Mathematical">
            <summary>
            <para>Display the arc with the normal geometric radius specified in the Radius property. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcDisplayModeConstants.Screen">
            <summary>
            <para>Display the arc with the screen radius specified in the <see cref="P:Cognex.Vision.CircularArc.DisplayedRadiusInScreenPixels">DisplayedRadiusInScreenPixels</see> property. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CircularArcAdornmentConstants">
            <summary>
            <para>Enumeration for circular arc end point adornments. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcAdornmentConstants.None">
            <summary>
            <para>Show no adornments at the end of the circular arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcAdornmentConstants.Arrow">
            <summary>
            <para>Show an open arrow head at the end of the circular arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcAdornmentConstants.SolidArrow">
            <summary>
            <para>Show a solid (filled) arrow head at the end of the circular arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcAdornmentConstants.SolidSquare">
            <summary>
            <para>Show a solid (filled) square at the end of the circular arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcAdornmentConstants.SolidCircle">
            <summary>
            <para>Show a solid (filled) circle at the end of the circular arc. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CircularArcDOFConstants">
            <summary>
            <para>Enumeration for the graphic degree of freedom enable constants of an interactive circular arc shape. </para>
            </summary>
            <remarks>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.CircularArc.GraphicDOFEnable">enabled</see> for an interactive <see cref="T:Cognex.Vision.CircularArc">CircularArc</see>. You can OR these constants to combine different degrees of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.CircularArcDOFConstants.None">
            <summary>
            <para>Disables interactive manipulation of all degrees of freedom of the circular arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcDOFConstants.ArcSpan">
            <summary>
            <para>Enables interactive manipulation of the circular arc's <see cref="P:Cognex.Vision.CircularArc.AngleStart">AngleStart</see> and <see cref="P:Cognex.Vision.CircularArc.AngleSpan">AngleSpan</see> up to two Pi. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcDOFConstants.EndPoints">
            <summary>
            <para>Enables interactive manipulation of the circular arc's end points, keeping the arc height and opposite end point constant. This typically modifies all geometric properties of the circular arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcDOFConstants.Bend">
            <summary>
            <para>Enables interactive manipulation of the circular arc's curvature, keeping the two end points constant. This DOF typically modifies all geometric properties of the circular arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcDOFConstants.ArcSpanFourPi">
            <summary>
            <para>Extends interactive manipulation of the circular arc's span up to four Pi. Note that if <b>ArcSpan</b> is not enabled, this DOF setting has no effect. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcDOFConstants.Position">
            <summary>
            <para>Enables interactive manipulation of the X,Y position of the circular arc's center. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularArcDOFConstants.All">
            <summary>
            <para>Enables interactive manipulation of all degrees of freedom of the circular arc. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CircularAnnulusSectionDirectionAdornmentConstants">
            <summary>
            <para>Enumeration for circular annulus section direction adornments. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionDirectionAdornmentConstants.None">
            <summary>
            <para>Configures the circular annulus arcs, or radial lines, to show no direction adornment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionDirectionAdornmentConstants.Arrow">
            <summary>
            <para>Configures the circular annulus arcs, or radial lines, to show an open arrow direction adornment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionDirectionAdornmentConstants.SolidArrow">
            <summary>
            <para>Configures the circular annulus arcs, or radial lines, to show a solid arrow direction adornment. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CircularAnnulusSectionCenterArcAdornmentConstants">
            <summary>
            <para>Enumeration for circular annulus section center arc adornment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionCenterArcAdornmentConstants.None">
            <summary>
            <para>Configures the circular annulus section to show no center arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionCenterArcAdornmentConstants.SolidArc">
            <summary>
            <para>Configures the circular annulus section to show a solid center arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionCenterArcAdornmentConstants.DottedArc">
            <summary>
            <para>Configures the circular annulus section to show a dotted center arc. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CircularAnnulusSectionDOFConstants">
            <summary>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.CircularAnnulusSection.GraphicDOFEnable">enabled</see> for an interactive <see cref="T:Cognex.Vision.CircularAnnulusSection">CircularAnnulusSection</see>. You can OR these constants to combine different degrees of freedom. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionDOFConstants.None">
            <summary>
            <para>Disables interactive manipulation of all degrees of freedom of the circular annulus section. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionDOFConstants.SectionSpan">
            <summary>
            <para>Enables interactive manipulation of the circular annulus section's span up to two Pi. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionDOFConstants.EndPoints">
            <summary>
            <para>Enables interactive manipulation of the circular annulus section's center arc end points, keeping the section height and opposite center arc end point constant. This typically modifies all geometric properties of the circular annulus section. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionDOFConstants.Bend">
            <summary>
            <para>Enables interactive manipulation of the circular annulus section's curvature, keeping the two center arc end points constant. This typically modifies all geometric properties of the circular annulus section. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionDOFConstants.Radii">
            <summary>
            <para>Enables interactive manipulation of the circular annulus section's start and end arcs radii, keeping the opposite arc's radius a constant. These handles modify the Radius and RadialScale properties of the circular annulus section. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionDOFConstants.SectionSpanFourPi">
            <summary>
            <para>Extends interactive manipulation of the circular annulus section's span up to four Pi. Note that if <b>SectionSpan</b> is not enabled, this DOF setting has no effect. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionDOFConstants.CornerPoints">
            <summary>
            <para>Enables interactive manipulation of the circular annulus section's four corner points, by adjusting angular span and radii. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionDOFConstants.BendEnds">
            <summary>
            <para>Enables interactive manipulation of the circular annulus section's curvature, keeping the center arc midpoint and length constant. This typically modifies all geometric properties of the circular annulus section. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionDOFConstants.Rotation">
            <summary>
            <para>Enables interactive manipulation of the rotation of the circular annulus section, around either the midpoint of the center arc, or the center of the section, depending on angular span. This typically modifies all geometric properties of the circular annulus section. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionDOFConstants.Position">
            <summary>
            <para>Enables interactive manipulation of the X,Y position of the circular annulus section's center. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CircularAnnulusSectionDOFConstants.All">
            <summary>
            <para>Enables interactive manipulation of all degrees of freedom of the circular annulus section. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.EllipticalAnnulusSectionDirectionAdornmentConstants">
            <summary>
            <para>Enumeration for elliptical annulus section direction adornments. These adornment arrows can be used indicate the radial or arc direction. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionDirectionAdornmentConstants.None">
            <summary>
            <para>Configure the elliptical annulus arcs, or radial lines, to show no direction adornment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionDirectionAdornmentConstants.Arrow">
            <summary>
            <para>Configure the elliptical annulus arcs, or radial lines, to show an open arrow adornment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionDirectionAdornmentConstants.SolidArrow">
            <summary>
            <para>Configure the elliptical annulus arcs, or radial lines, to show a solid arrow adornment. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.EllipticalAnnulusSectionCenterArcAdornmentConstants">
            <summary>
            <para>Enumeration for selecting a center arc adornment for the elliptical annulus section. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionCenterArcAdornmentConstants.None">
            <summary>
            <para>Configures the elliptical annulus section to show no center arc adornment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionCenterArcAdornmentConstants.SolidArc">
            <summary>
            <para>Configures the elliptical annulus section to show a solid center arc adornment. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionCenterArcAdornmentConstants.DottedArc">
            <summary>
            <para>Configures the elliptical annulus section to show a dotted center arc adornment. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.EllipticalAnnulusSectionDOFConstants">
            <summary>
            <para>Enumeration for the degree of freedom constants of an interactive elliptical annulus section shape. These constants control how the shape can be manipulated on a display. </para>
            </summary>
            <remarks>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.EllipticalAnnulusSection.GraphicDOFEnable">enabled</see>, for an interactive <see cref="T:Cognex.Vision.EllipticalAnnulusSection">EllipticalAnnulusSection</see>. You can OR these constants to combine different degrees of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionDOFConstants.None">
            <summary>
            <para>Disables interactive manipulation of the elliptical annulus section. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionDOFConstants.EndPoints">
            <summary>
            <para>Enables interactive manipulation of the endpoints of the manipulation arc in the annulus section. Notice that changing an endpoint is likely to affect the center, radii, rotation, start, span and radial scale of the annulus, but not the other endpoint. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionDOFConstants.SectionSpan">
            <summary>
            <para>Enables interactive manipulation of the arc length of the elliptical annulus section. Either end of the section can be slid along the underlying ellipse, without changing ellipse's center, radii, or rotation. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionDOFConstants.Bend">
            <summary>
            <para>Enables interactive manipulation of the curvature of the annulus section. Changing the curvature is likely to affect the center, radii, rotation, start, span and radial scale of the annulus, but will not modify the endpoints of the manipulation arc. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionDOFConstants.ConstrainedSpan">
            <summary>
            <para>Enables interactive manipulation of the curvature of the elliptical annulus section while constraining the manipulation arc to pass through the endpoints and the bend handle. Changes the fraction of the full ellipse that appears between the endpoints. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionDOFConstants.Radii">
            <summary>
            <para>Enables interactive manipulation of the radii of the elliptical annulus section. Changing one radius will not affect the center, rotation, start or span of the annulus, nor will it modify the other radius. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionDOFConstants.SectionSpanFourPi">
            <summary>
            <para>If interactive manipulation of the annulus section's span is enabled, setting this bit allows the span to vary between 4 * Pi and -4 * Pi. The limits for interactive manipulation are 2 * Pi and -2 * Pi if this bit is not set. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionDOFConstants.Position">
            <summary>
            <para>Enables interactive manipulation of the X,Y position of the elliptical annulus section. Changing the position will not affect the radii, rotation, start, span or radial scale of the annulus. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.EllipticalAnnulusSectionDOFConstants.All">
            <summary>
            <para>Enables interactive manipulation of all degrees of freedom for the elliptical annulus section. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.PolygonFillConstants">
            <summary>
            <para>Enumeration of selections for FillMode property in <see cref="T:Cognex.Vision.Polygon">Polygon</see>. </para>
            </summary>
            <remarks>
            <para>Enumeration of selections for <see cref="P:Cognex.Vision.Polygon.FillMode">FillMode</see> property in <see cref="T:Cognex.Vision.Polygon">Polygon</see> used to determine whether a point lies within a polygon. The two algorithms can produce different results. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.PolygonFillConstants.EvenOdd">
            <summary>
            <para>Use the even/odd algorithm to distinguish inside from outside for this polygon. </para>
            </summary>
            <remarks>
            <para>If a ray from a point crosses the polygon an odd number of times, the point is inside the polygon. If the ray crosses the polygon an even number of time, the point is outside the polygon. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.PolygonFillConstants.WindingNumber">
            <summary>
            <para>Use the winding number algorithm to distinguish inside from outside for this polygon. </para>
            </summary>
            <remarks>
            <para>A point is considered inside the polygon if an observer standing at a given point would make at least one revolution about the point as a ray that extends from the point to the polygon traces the shape from vertex to vertex. Another way to describe this algorithm is to label each line segment - if it goes in a counterclockwise direction relative to the point and + if it goes clockwise relative to the point. Then trace a ray from the point through the polygon, adding 1 for each + segment crossed and subtracting 1 for each - segment crossed. If the result is not zero, the point is inside the polygon. </para>
            </remarks>
        </member>
        <member name="T:Cognex.Vision.PolygonDOFConstants">
            <summary>
            <para>Enumeration for the degree of freedom constants of an interactive polygon shape. </para>
            </summary>
            <remarks>
            <para>Enumeration for the degree of freedom constants of an interactive polygon shape. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.PolygonDOFConstants.None">
            <summary>
            <para>Disables interactive manipulation of all degrees of freedom of the polygon. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonDOFConstants.VertexPositions">
            <summary>
            <para>Enables interactive manipulation of individual vertex positions. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonDOFConstants.Position">
            <summary>
            <para>Enables interactive manipulation of the position of the entire polygon. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonDOFConstants.All">
            <summary>
            <para>Enables interactive manipulation of all degrees of freedom of the polygon. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.PolygonVertexAdornmentConstants">
            <summary>
            <para>Enumeration of vertex adornments. </para>
            </summary>
            <remarks>
            <para>Enumeration of vertex adornments. Use <see cref="P:Cognex.Vision.Polygon.VertexAdornment">VertexAdornment</see> to set the adornment style. The adornment applies to all vertices, but you can use <see cref="M:Cognex.Vision.Polygon.SetVertexAdornmentColor(System.Int32,Cognex.Vision.PolygonVertexColorConstants)">SetVertexAdornmentColor</see> to hide or to change the color of the adornment for each vertex. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexAdornmentConstants.None">
            <summary>
            <para>Show no adornments at the vertices. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexAdornmentConstants.SolidSquare">
            <summary>
            <para>Show a solid (filled) square at each vertex. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexAdornmentConstants.SolidCircle">
            <summary>
            <para>Show a solid (filled) circle at each vertex. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.PolygonVertexColorConstants">
            <summary>
            <para>Enumeration of selections for VertexAdornmentColor property. </para>
            </summary>
            <remarks>
            <para>Enumeration of selections for VertexAdornmentColor property. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.Black">
            <summary>
            <para>Draw this vertex adornment in black. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.DarkRed">
            <summary>
            <para>Draw this vertex adornment in dark red. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.Red">
            <summary>
            <para>Draw this vertex adornment in red. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.DarkGreen">
            <summary>
            <para>Draw this vertex adornment in dark green. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.Orange">
            <summary>
            <para>Draw this vertex adornment in orange. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.Green">
            <summary>
            <para>Draw this vertex adornment in green. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.Yellow">
            <summary>
            <para>Draw this vertex adornment in yellow. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.DarkGrey">
            <summary>
            <para>Draw this vertex adornment in dark grey. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.Grey">
            <summary>
            <para>Draw this vertex adornment in grey. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.LightGrey">
            <summary>
            <para>Draw this vertex adornment in light grey. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.Blue">
            <summary>
            <para>Draw this vertex adornment in blue. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.Purple">
            <summary>
            <para>Draw this vertex adornment in purple. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.Magenta">
            <summary>
            <para>Draw this vertex adornment in magenta. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.Cyan">
            <summary>
            <para>Draw this vertex adornment in cyan. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.White">
            <summary>
            <para>Draw this vertex adornment in white. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.Auto">
            <summary>
            <para>Draw this vertex adornment in the same color as the shape itself. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PolygonVertexColorConstants.None">
            <summary>
            <para>Do not draw this vertex adornment. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.GraphicLabelAlignmentConstants">
            <summary>
            <para>Enumeration of alignment options for a <see cref="T:Cognex.Vision.GraphicLabel">GraphicLabel</see>. </para>
            </summary>
            <remarks>
            <para>Enumeration of alignment options for a <see cref="T:Cognex.Vision.GraphicLabel">GraphicLabel</see>. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.GraphicLabelAlignmentConstants.TopLeft">
            <summary>
            <para>The anchor point of the label is the top left point of its bounding box. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicLabelAlignmentConstants.TopCenter">
            <summary>
            <para>The anchor point of the label is the top center point of its bounding box. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicLabelAlignmentConstants.TopRight">
            <summary>
            <para>The anchor point of the label is the top right point of its bounding box. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicLabelAlignmentConstants.BaselineLeft">
            <summary>
            <para>The anchor point of the label is the left most point of the line where the bottom of the characters are drawn. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicLabelAlignmentConstants.BaselineCenter">
            <summary>
            <para>The anchor point of the label is the center point of the line where the bottom of the characters are drawn. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicLabelAlignmentConstants.BaselineRight">
            <summary>
            <para>The anchor point of the label is the right most point of the line where the bottom of the characters are drawn. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicLabelAlignmentConstants.BottomLeft">
            <summary>
            <para>The anchor point of the label is the bottom left point of its bounding box. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicLabelAlignmentConstants.BottomCenter">
            <summary>
            <para>The anchor point of the label is the bottom center point of its bounding box. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicLabelAlignmentConstants.BottomRight">
            <summary>
            <para>The anchor point of the label is the bottom right point of its bounding box. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.FontStyleConstants">
            <summary>
            <para>An enumeration that defines the style information applied to text. </para>
            </summary>
            <remarks>
            <para>Typically used to specify the style information for a <see cref="T:Cognex.Vision.Font">font</see>. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.FontStyleConstants.Regular">
            <summary>
            <para>Normal text. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.FontStyleConstants.Bold">
            <summary>
            <para>Bold text. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.FontStyleConstants.Italic">
            <summary>
            <para>Italic text. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.FontStyleConstants.Underline">
            <summary>
            <para>Underlined text. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.FontStyleConstants.Strikeout">
            <summary>
            <para>Text with a line through the middle. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.GraphicLabelDOFConstants">
            <summary>
            <para>Enumeration for the graphic degree of freedom enable constants of an interactive text label. </para>
            </summary>
            <remarks>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.GraphicLabel.GraphicDOFEnable">GraphicDOFEnable</see> for an interactive <see cref="T:Cognex.Vision.GraphicLabel">GraphicLabel</see>. You can OR these constants to combine different degrees of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.GraphicLabelDOFConstants.None">
            <summary>
            <para>Disables interactive manipulation of all degrees of freedom of the Label. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicLabelDOFConstants.Position">
            <summary>
            <para>Enables interactive manipulation of the position of the label. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.GraphicLabelDOFConstants.All">
            <summary>
            <para>Enables interactive manipulation of all degrees of freedom of the Label. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.ImageDataModeConstants">
            <summary>
            <para>Enumeration of modes for accessing pixel data of an image. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ImageDataModeConstants.Read">
            <summary>
            <para>Data are read-only. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ImageDataModeConstants.Write">
            <summary>
            <para>Data are write-only. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ImageDataModeConstants.ReadWrite">
            <summary>
            <para>Data can be both read and written. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.PointMarkerDOFConstants">
            <summary>
            <para>Enumeration for the graphic degree of freedom enable constants of an interactive point marker. </para>
            </summary>
            <remarks>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.PointMarker.GraphicDOFEnable">GraphicDOFEnable</see> for an interactive <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>. You can OR these constants to combine different degrees of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.PointMarkerDOFConstants.None">
            <summary>
            <para>Disables all movement of the point marker. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PointMarkerDOFConstants.Position">
            <summary>
            <para>This DOF allows the user to manipulate the X,Y position of the point marker center. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PointMarkerDOFConstants.All">
            <summary>
            <para>Enables all degrees of freedom for the point marker. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.PointMarkerGraphicTypeConstants">
            <summary>
            <para>Enumeration of selections for GraphicType property in ICogPointMarker. </para>
            </summary>
            <remarks>
            <para>Constants that describe the graphics used to display a <see cref="T:Cognex.Vision.PointMarker">PointMarker</see>. See <see cref="P:Cognex.Vision.PointMarker.GraphicType">GraphicType</see>. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.PointMarkerGraphicTypeConstants.Cross">
            <summary>
            <para>Displays a cross with the center point at the X,Y coordinates of the point marker. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PointMarkerGraphicTypeConstants.Crosshair">
            <summary>
            <para>Displays a circle with a cross at the X,Y coordinates of the point marker. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PointMarkerGraphicTypeConstants.Circle">
            <summary>
            <para>Displays a circle with the center point at the X,Y coordinates of the point marker. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PointMarkerGraphicTypeConstants.Square">
            <summary>
            <para>Display a square with the center point at the X,Y coordinates of the point marker. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PointMarkerGraphicTypeConstants.OutwardArrow">
            <summary>
            <para>Displays an arrow originating at the X,Y coordinates of the point marker. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PointMarkerGraphicTypeConstants.InwardArrow">
            <summary>
            <para>Displays an arrow terminating at the X,Y coordinates of the point marker. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PointMarkerGraphicTypeConstants.CenteredLineSegment">
            <summary>
            <para>Displays a line segment with its center at the X,Y coordinates of the point marker. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.PointMarkerGraphicTypeConstants.ElongatedCross">
            <summary>
            <para>Displays a cross with the center point at the X,Y coordinates of the point marker, with a horizontal arm half the length of the vertical arm. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CompositeShapeCompositionModeConstants">
            <summary>
            <para>Enumeration of composite shape composition modes. </para>
            </summary>
            <remarks>
            <para>Enumeration of composite shape composition modes. Use <see cref="P:Cognex.Vision.CompositeShape.CompositionMode">CompositionMode</see> to set the composition mode. If the composition mode is <b>Uniform</b>, all of the composite shape's graphic properties (line style, width, color, and so on) are propagated to all of the subshapes. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.CompositeShapeCompositionModeConstants.Uniform">
            <summary>
            <para>In this mode the composite shape acts as if it were a single rigid unified shape, with one color, line style, and so on. Graphics properties of the composite shape are propagated to the subshapes. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CompositeShapeCompositionModeConstants.Freeform">
            <summary>
            <para>In this mode the shape acts as a conglomerate of shapes with potentially many different colors, line styles, and so on. Graphics properties of the composite shape are not propagated to the subshapes. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CompositeShapeDOFConstants">
            <summary>
            <para>Enumeration for the graphic degree of freedom enable constants of an interactive composite shape. </para>
            </summary>
            <remarks>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.CompositeShape.GraphicDOFEnable">enabled</see> for an interactive <see cref="T:Cognex.Vision.CompositeShape">CompositeShape</see>. You can OR these constants to combine different degrees of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.CompositeShapeDOFConstants.None">
            <summary>
            <para>Disables interactive manipulation of all degrees of freedom of the composite shape. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CompositeShapeDOFConstants.Size">
            <summary>
            <para>Enables interactive manipulation of the size of the graphics contained in the composite shape. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CompositeShapeDOFConstants.Rotation">
            <summary>
            <para>Enables interactive manipulation of rotation of the composite shape. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CompositeShapeDOFConstants.Skew">
            <summary>
            <para>Enables interactive manipulation of skew of the composite shape. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CompositeShapeDOFConstants.Scale">
            <summary>
            <para>Enables interactive manipulation of scale of the composite shape. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CompositeShapeDOFConstants.Position">
            <summary>
            <para>Enables interactive manipulation of X,Y position of the composite shape. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CompositeShapeDOFConstants.All">
            <summary>
            <para>Enables interactive manipulation of all degrees of freedom of the composite shape. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CompositeShapeDirectionAdornmentConstants">
            <summary>
            <para>Enumeration for composite shape direction adornments. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CompositeShapeDirectionAdornmentConstants.None">
            <summary>
            <para>Configures the composite shape to show no adornment in this direction. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CompositeShapeDirectionAdornmentConstants.Arrow">
            <summary>
            <para>Configures the composite shape to show an open arrow adornment in this direction. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CompositeShapeDirectionAdornmentConstants.SolidArrow">
            <summary>
            <para>Configures the composite shape to show a solid arrow adornment in this direction. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CoordinateAxesModeConstants">
            <summary>
            <para>Constants that determine which properties are used to draw the <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see> and how interactive manipulation affects the mathematical properties of the axes. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateAxesModeConstants.Mathematical">
            <summary>
            <para>The graphic is drawn based on the <see cref="P:Cognex.Vision.CoordinateAxes.XAxisLength">XAxisLength</see>, <see cref="P:Cognex.Vision.CoordinateAxes.Aspect">Aspect</see>, <see cref="P:Cognex.Vision.CoordinateAxes.DisplayedScaleFactorX">DisplayedScaleFactorX</see>, and <see cref="P:Cognex.Vision.CoordinateAxes.DisplayedScaleFactorY">DisplayedScaleFactorY</see> properties. Interactive manipulation of the axes size modifies the <see cref="P:Cognex.Vision.CoordinateAxes.XAxisLength">XAxisLength</see> and <see cref="P:Cognex.Vision.CoordinateAxes.Aspect">Aspect</see> properties. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateAxesModeConstants.Screen">
            <summary>
            <para>The graphic is drawn based on the <see cref="P:Cognex.Vision.CoordinateAxes.DisplayedXAxisLength">DisplayedXAxisLength</see> and <see cref="P:Cognex.Vision.CoordinateAxes.DisplayedAspect">DisplayedAspect</see> properties. Interactive manipulation of the arm lengths modifies only the displayed representation of the axes and not the mathematical properties. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateAxesModeConstants.Scale">
            <summary>
            <para>The graphic is drawn based on the <see cref="P:Cognex.Vision.CoordinateAxes.XAxisLength">XAxisLength</see>, <see cref="P:Cognex.Vision.CoordinateAxes.Aspect">Aspect</see>, <see cref="P:Cognex.Vision.CoordinateAxes.DisplayedScaleFactorX">DisplayedScaleFactorX</see> and <see cref="P:Cognex.Vision.CoordinateAxes.DisplayedScaleFactorY">DisplayedScaleFactorY</see> properties. Interactive manipulation of the axes size modifies the <see cref="P:Cognex.Vision.CoordinateAxes.DisplayedScaleFactorX">DisplayedScaleFactorX</see> and <see cref="P:Cognex.Vision.CoordinateAxes.DisplayedScaleFactorY">DisplayedScaleFactorY</see> properties. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CoordinateAxesDOFConstants">
            <summary>
            <para>Enumeration for the graphic degree of freedom enable constants of an interactive coordinate axes. </para>
            </summary>
            <remarks>
            <para>Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.Vision.CoordinateAxes.GraphicDOFEnable">enabled</see> for <see cref="T:Cognex.Vision.CoordinateAxes">CoordinateAxes</see>. You can OR these constants to combine different degrees of freedom. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.CoordinateAxesDOFConstants.None">
            <summary>
            <para>Disables interactive manipulation of all degrees of freedom of the coordinate axes. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateAxesDOFConstants.Scale">
            <summary>
            <para>Enables interactive manipulation of the size of the axis arms of the coordinate axes. Allows changing each axis while maintaining the ratio of their lengths. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateAxesDOFConstants.Aspect">
            <summary>
            <para>Enables interactive manipulation of X-axis of the coordinate axes independently of the Y-axis. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateAxesDOFConstants.Rotation">
            <summary>
            <para>Enables interactive manipulation of the rotation of the coordinate axes. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateAxesDOFConstants.Skew">
            <summary>
            <para>Enables interactive manipulation of the skew of the coordinate axes. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateAxesDOFConstants.Position">
            <summary>
            <para>Enables interactive manipulation of the X,Y position of the coordinate axes. Allows changing of position. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateAxesDOFConstants.All">
            <summary>
            <para>Enables interactive manipulation of all degrees of freedom of the coordinate axes. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CoordinateAxesEndPointAdornmentConstants">
            <summary>
            <para>Enumeration for coordinate axes endpoint adornments. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateAxesEndPointAdornmentConstants.None">
            <summary>
            <para>Show no adornments at the end of the coordinate axes. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateAxesEndPointAdornmentConstants.Arrow">
            <summary>
            <para>Show an open arrow head at the end of the coordinate axes. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateAxesEndPointAdornmentConstants.SolidArrow">
            <summary>
            <para>Show a solid (filled) arrow head at the end of the coordinate axes. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.CoordinateSpaceAngleNormalizationModeConstants">
            <summary>
            <para>Determines if a <see cref="T:Cognex.Vision.CoordinateSpaceAngle">CoordinateSpaceAngle</see> value rolls over at zero, 180, or never. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateSpaceAngleNormalizationModeConstants.None">
            <summary>
            <para>Angle is not normalized. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateSpaceAngleNormalizationModeConstants.Signed">
            <summary>
            <para>Angle range is [-180, 180). Values outside this range will be normalized to the equivalent measurement within this range. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.CoordinateSpaceAngleNormalizationModeConstants.Unsigned">
            <summary>
            <para>Angle range is [0, 360). Values outside this range will be normalized to the equivalent measurement within this range. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.Image16EncodingConstants">
            <summary>
            <para>Enumeration of 16 bit image encoding. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.Image16EncodingConstants.Grey10">
            <summary>
            <para>Greyscale, 10 bit pixel. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.Image16EncodingConstants.Grey12">
            <summary>
            <para>Greyscale, 12 bit pixel. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.Image16EncodingConstants.Grey14">
            <summary>
            <para>Greyscale, 14 bit pixel. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.Image16EncodingConstants.Grey16">
            <summary>
            <para>Greyscale, 16 bit pixel. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.Image16EncodingConstants.Grey8">
            <summary>
            <para>Greyscale, 8 bit pixel. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.ImageColorSpaceConstants">
            <summary>
            <para>Enumeration of color spaces. </para>
            </summary>
            <remarks>
            <para>Enumeration of color spaces. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.ImageColorSpaceConstants.RGB">
            <summary>
            <para>Red Green Blue (RGB) color space. </para>
            </summary>
            <remarks>
            <para>Red Green Blue (RGB) color space. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.ImageColorSpaceConstants.HSI">
            <summary>
            <para>Hue Saturation Intensity (HSI) color space. </para>
            </summary>
            <remarks>
            <para>Hue Saturation Intensity (HSI) color space. </para>
            </remarks>
        </member>
        <member name="T:Cognex.Vision.ImagePlaneConstants">
            <summary>
            <para>Enumeration of image planes. </para>
            </summary>
            <remarks>
            <para>Enumeration of image planes. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.ImagePlaneConstants.Red">
            <summary>
            <para>Red image plane within a cogImageColorSpaceRGB image. </para>
            </summary>
            <remarks>
            <para>Red image plane within a <see cref="T:Cognex.Vision.ImageColorSpaceConstants">RGB</see> image. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.ImagePlaneConstants.Green">
            <summary>
            <para>Green image plane within a cogImageColorSpaceRGB image. </para>
            </summary>
            <remarks>
            <para>Green image plane within a <see cref="T:Cognex.Vision.ImageColorSpaceConstants">RGB</see> image. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.ImagePlaneConstants.Blue">
            <summary>
            <para>Blue image plane within a cogImageColorSpaceRGB image. </para>
            </summary>
            <remarks>
            <para>Blue image plane within a <see cref="T:Cognex.Vision.ImageColorSpaceConstants">RGB</see> image. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.ImagePlaneConstants.Hue">
            <summary>
            <para>Hue image plane within a cogImageColorSpaceHSI image. </para>
            </summary>
            <remarks>
            <para>Hue image plane within a <see cref="T:Cognex.Vision.ImageColorSpaceConstants">HSI</see> image. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.ImagePlaneConstants.Saturation">
            <summary>
            <para>Saturation image plane within a cogImageColorSpaceHSI image. </para>
            </summary>
            <remarks>
            <para>Saturation image plane within a <see cref="T:Cognex.Vision.ImageColorSpaceConstants">HSI</see> image. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.ImagePlaneConstants.Intensity">
            <summary>
            <para>Intensity image plane within a cogImageColorSpaceHSI image. </para>
            </summary>
            <remarks>
            <para>Intensity image plane within a <see cref="T:Cognex.Vision.ImageColorSpaceConstants">HSI</see> image. </para>
            </remarks>
        </member>
        <member name="T:Cognex.Vision.SerializerOptionsConstants">
            <summary>
            <para>This enumeration contains constants that are used to specify particular fields to be serialized or deserialized. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.SerializerOptionsConstants.Minimum">
            <summary>
            <para>Serialize a minimum set of properties. Excludes input/output images and results. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.SerializerOptionsConstants.Results">
            <summary>
            <para>Serialize result objects. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.SerializerOptionsConstants.InputImages">
            <summary>
            <para>Serialize input images. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.SerializerOptionsConstants.OutputImages">
            <summary>
            <para>Serialize output images. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.SerializerOptionsConstants.ToolBlockTerminalImages">
            <summary>
            <para>Serialize images contained in ToolBlock terminals. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.SerializerOptionsConstants.All">
            <summary>
            <para>Serialize all types of properties. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.ImageConvertBayerTypeConstants">
            <summary>
            <para>Enumeration of Bayer image types. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ImageConvertBayerTypeConstants.GR">
            <summary>
            <para>Upper left pixel is Green followed by Red. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ImageConvertBayerTypeConstants.RG">
            <summary>
            <para>Upper left pixel is Red followed by Green. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ImageConvertBayerTypeConstants.BG">
            <summary>
            <para>Upper left pixel is Blue followed by Green. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.ImageConvertBayerTypeConstants.GB">
            <summary>
            <para>Upper left pixel is Green followed by Blue. </para>
            </summary>
        </member>
        <member name="T:Cognex.Vision.RegionModeConstants">
            <summary>
            <para>Enumeration of Region modes. Region mode specifies how a region is applied to an image. </para>
            </summary>
        </member>
        <member name="F:Cognex.Vision.RegionModeConstants.PixelAlignedBoundingBoxAdjustMask">
            <summary>
            <para>Only the pixels within the supplied region are used. This is implemented by computing a mask which extends the region to its pixel aligned bounding box. </para>
            </summary>
            <remarks>
            <para>If you specify an input region other than a simple, pixel-aligned rectangle, this region mode specifies that all the pixels within a pixel-aligned bounding box that encloses the region will be supplied to the vision tool. Those pixels that lie inside the bounding box but outside the region that you supply are set as "don't care" pixels in the mask image used by the vision tool (if it supports one). The following figure shows the effect of using this mode if you specify an ellipse as an input region. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.RegionModeConstants.PixelAlignedBoundingBox">
            <summary>
            <para>The region used will be the pixel aligned bounding box enclosing the supplied region. This mode often provides faster performance than the PixelAlignedBoundingBoxAdjustMask mode. </para>
            </summary>
            <remarks>
            <para>If you specify an input region other than a simple, pixel-aligned rectangle, this region mode specifies that all the pixels within a pixel-aligned bounding box that encloses the region will be supplied to the vision tool. The following figure shows the effect of using this mode if you specify an ellipse as an input region. </para>
            </remarks>
        </member>
        <member name="F:Cognex.Vision.RegionModeConstants.AffineTransform">
            <summary>
            <para>A new image will be created by performing an affine transformation on the region. The region must be either a simple rectangle or an affine rectangle. </para>
            </summary>
            <remarks>
            <para>If you specify an <see cref="T:Cognex.Vision.RectangleAffine">RectangleAffine</see> as your input region, you can specify this region mode to affine-transform the pixels in the region into a new, pixel-aligned rectangular image. This mode is appropriate when your vision tool requires a pixel-aligned rectangular input region, but the data you wish to supply lies at an angle in the input image. </para>
            </remarks>
        </member>
    </members>
</doc>
